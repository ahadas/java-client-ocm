/*
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package open_cluster_management.io;

import open_cluster_management.ApiException;
import open_cluster_management.io.IoK8sApimachineryPkgApisMetaV1DeleteOptions;
import open_cluster_management.io.IoK8sApimachineryPkgApisMetaV1Patch;
import open_cluster_management.io.IoK8sApimachineryPkgApisMetaV1Status;
import open_cluster_management.io.IoOpenshiftMachineconfigurationV1ContainerRuntimeConfig;
import open_cluster_management.io.IoOpenshiftMachineconfigurationV1ContainerRuntimeConfigList;
import open_cluster_management.io.IoOpenshiftMachineconfigurationV1ControllerConfig;
import open_cluster_management.io.IoOpenshiftMachineconfigurationV1ControllerConfigList;
import open_cluster_management.io.IoOpenshiftMachineconfigurationV1KubeletConfig;
import open_cluster_management.io.IoOpenshiftMachineconfigurationV1KubeletConfigList;
import open_cluster_management.io.IoOpenshiftMachineconfigurationV1MCOConfig;
import open_cluster_management.io.IoOpenshiftMachineconfigurationV1MCOConfigList;
import open_cluster_management.io.IoOpenshiftMachineconfigurationV1MachineConfig;
import open_cluster_management.io.IoOpenshiftMachineconfigurationV1MachineConfigList;
import open_cluster_management.io.IoOpenshiftMachineconfigurationV1MachineConfigPool;
import open_cluster_management.io.IoOpenshiftMachineconfigurationV1MachineConfigPoolList;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MachineconfigurationOpenshiftIoV1Api
 */
@Ignore
public class MachineconfigurationOpenshiftIoV1ApiTest {

    private final MachineconfigurationOpenshiftIoV1Api api = new MachineconfigurationOpenshiftIoV1Api();

    
    /**
     * 
     *
     * create a ContainerRuntimeConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createMachineconfigurationOpenshiftIoV1ContainerRuntimeConfigTest() throws ApiException {
        IoOpenshiftMachineconfigurationV1ContainerRuntimeConfig body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftMachineconfigurationV1ContainerRuntimeConfig response = api.createMachineconfigurationOpenshiftIoV1ContainerRuntimeConfig(body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a ControllerConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createMachineconfigurationOpenshiftIoV1ControllerConfigTest() throws ApiException {
        IoOpenshiftMachineconfigurationV1ControllerConfig body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftMachineconfigurationV1ControllerConfig response = api.createMachineconfigurationOpenshiftIoV1ControllerConfig(body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a KubeletConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createMachineconfigurationOpenshiftIoV1KubeletConfigTest() throws ApiException {
        IoOpenshiftMachineconfigurationV1KubeletConfig body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftMachineconfigurationV1KubeletConfig response = api.createMachineconfigurationOpenshiftIoV1KubeletConfig(body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a MachineConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createMachineconfigurationOpenshiftIoV1MachineConfigTest() throws ApiException {
        IoOpenshiftMachineconfigurationV1MachineConfig body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftMachineconfigurationV1MachineConfig response = api.createMachineconfigurationOpenshiftIoV1MachineConfig(body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a MachineConfigPool
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createMachineconfigurationOpenshiftIoV1MachineConfigPoolTest() throws ApiException {
        IoOpenshiftMachineconfigurationV1MachineConfigPool body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftMachineconfigurationV1MachineConfigPool response = api.createMachineconfigurationOpenshiftIoV1MachineConfigPool(body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a MCOConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createMachineconfigurationOpenshiftIoV1NamespacedMCOConfigTest() throws ApiException {
        String namespace = null;
        IoOpenshiftMachineconfigurationV1MCOConfig body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftMachineconfigurationV1MCOConfig response = api.createMachineconfigurationOpenshiftIoV1NamespacedMCOConfig(namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of ContainerRuntimeConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteMachineconfigurationOpenshiftIoV1CollectionContainerRuntimeConfigTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteMachineconfigurationOpenshiftIoV1CollectionContainerRuntimeConfig(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of ControllerConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteMachineconfigurationOpenshiftIoV1CollectionControllerConfigTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteMachineconfigurationOpenshiftIoV1CollectionControllerConfig(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of KubeletConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteMachineconfigurationOpenshiftIoV1CollectionKubeletConfigTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteMachineconfigurationOpenshiftIoV1CollectionKubeletConfig(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of MachineConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteMachineconfigurationOpenshiftIoV1CollectionMachineConfigTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteMachineconfigurationOpenshiftIoV1CollectionMachineConfig(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of MachineConfigPool
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteMachineconfigurationOpenshiftIoV1CollectionMachineConfigPoolTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteMachineconfigurationOpenshiftIoV1CollectionMachineConfigPool(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of MCOConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteMachineconfigurationOpenshiftIoV1CollectionNamespacedMCOConfigTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteMachineconfigurationOpenshiftIoV1CollectionNamespacedMCOConfig(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a ContainerRuntimeConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteMachineconfigurationOpenshiftIoV1ContainerRuntimeConfigTest() throws ApiException {
        String name = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteMachineconfigurationOpenshiftIoV1ContainerRuntimeConfig(name, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a ControllerConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteMachineconfigurationOpenshiftIoV1ControllerConfigTest() throws ApiException {
        String name = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteMachineconfigurationOpenshiftIoV1ControllerConfig(name, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a KubeletConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteMachineconfigurationOpenshiftIoV1KubeletConfigTest() throws ApiException {
        String name = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteMachineconfigurationOpenshiftIoV1KubeletConfig(name, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a MachineConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteMachineconfigurationOpenshiftIoV1MachineConfigTest() throws ApiException {
        String name = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteMachineconfigurationOpenshiftIoV1MachineConfig(name, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a MachineConfigPool
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteMachineconfigurationOpenshiftIoV1MachineConfigPoolTest() throws ApiException {
        String name = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteMachineconfigurationOpenshiftIoV1MachineConfigPool(name, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a MCOConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteMachineconfigurationOpenshiftIoV1NamespacedMCOConfigTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteMachineconfigurationOpenshiftIoV1NamespacedMCOConfig(name, namespace, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind ContainerRuntimeConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listMachineconfigurationOpenshiftIoV1ContainerRuntimeConfigTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftMachineconfigurationV1ContainerRuntimeConfigList response = api.listMachineconfigurationOpenshiftIoV1ContainerRuntimeConfig(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind ControllerConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listMachineconfigurationOpenshiftIoV1ControllerConfigTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftMachineconfigurationV1ControllerConfigList response = api.listMachineconfigurationOpenshiftIoV1ControllerConfig(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind KubeletConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listMachineconfigurationOpenshiftIoV1KubeletConfigTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftMachineconfigurationV1KubeletConfigList response = api.listMachineconfigurationOpenshiftIoV1KubeletConfig(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind MCOConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listMachineconfigurationOpenshiftIoV1MCOConfigForAllNamespacesTest() throws ApiException {
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftMachineconfigurationV1MCOConfigList response = api.listMachineconfigurationOpenshiftIoV1MCOConfigForAllNamespaces(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind MachineConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listMachineconfigurationOpenshiftIoV1MachineConfigTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftMachineconfigurationV1MachineConfigList response = api.listMachineconfigurationOpenshiftIoV1MachineConfig(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind MachineConfigPool
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listMachineconfigurationOpenshiftIoV1MachineConfigPoolTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftMachineconfigurationV1MachineConfigPoolList response = api.listMachineconfigurationOpenshiftIoV1MachineConfigPool(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind MCOConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listMachineconfigurationOpenshiftIoV1NamespacedMCOConfigTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftMachineconfigurationV1MCOConfigList response = api.listMachineconfigurationOpenshiftIoV1NamespacedMCOConfig(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified ContainerRuntimeConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchMachineconfigurationOpenshiftIoV1ContainerRuntimeConfigTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftMachineconfigurationV1ContainerRuntimeConfig response = api.patchMachineconfigurationOpenshiftIoV1ContainerRuntimeConfig(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified ContainerRuntimeConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchMachineconfigurationOpenshiftIoV1ContainerRuntimeConfigStatusTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftMachineconfigurationV1ContainerRuntimeConfig response = api.patchMachineconfigurationOpenshiftIoV1ContainerRuntimeConfigStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified ControllerConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchMachineconfigurationOpenshiftIoV1ControllerConfigTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftMachineconfigurationV1ControllerConfig response = api.patchMachineconfigurationOpenshiftIoV1ControllerConfig(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified ControllerConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchMachineconfigurationOpenshiftIoV1ControllerConfigStatusTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftMachineconfigurationV1ControllerConfig response = api.patchMachineconfigurationOpenshiftIoV1ControllerConfigStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified KubeletConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchMachineconfigurationOpenshiftIoV1KubeletConfigTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftMachineconfigurationV1KubeletConfig response = api.patchMachineconfigurationOpenshiftIoV1KubeletConfig(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified KubeletConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchMachineconfigurationOpenshiftIoV1KubeletConfigStatusTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftMachineconfigurationV1KubeletConfig response = api.patchMachineconfigurationOpenshiftIoV1KubeletConfigStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified MachineConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchMachineconfigurationOpenshiftIoV1MachineConfigTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftMachineconfigurationV1MachineConfig response = api.patchMachineconfigurationOpenshiftIoV1MachineConfig(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified MachineConfigPool
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchMachineconfigurationOpenshiftIoV1MachineConfigPoolTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftMachineconfigurationV1MachineConfigPool response = api.patchMachineconfigurationOpenshiftIoV1MachineConfigPool(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified MachineConfigPool
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchMachineconfigurationOpenshiftIoV1MachineConfigPoolStatusTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftMachineconfigurationV1MachineConfigPool response = api.patchMachineconfigurationOpenshiftIoV1MachineConfigPoolStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified MCOConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchMachineconfigurationOpenshiftIoV1NamespacedMCOConfigTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftMachineconfigurationV1MCOConfig response = api.patchMachineconfigurationOpenshiftIoV1NamespacedMCOConfig(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified ContainerRuntimeConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readMachineconfigurationOpenshiftIoV1ContainerRuntimeConfigTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftMachineconfigurationV1ContainerRuntimeConfig response = api.readMachineconfigurationOpenshiftIoV1ContainerRuntimeConfig(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified ContainerRuntimeConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readMachineconfigurationOpenshiftIoV1ContainerRuntimeConfigStatusTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftMachineconfigurationV1ContainerRuntimeConfig response = api.readMachineconfigurationOpenshiftIoV1ContainerRuntimeConfigStatus(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified ControllerConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readMachineconfigurationOpenshiftIoV1ControllerConfigTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftMachineconfigurationV1ControllerConfig response = api.readMachineconfigurationOpenshiftIoV1ControllerConfig(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified ControllerConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readMachineconfigurationOpenshiftIoV1ControllerConfigStatusTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftMachineconfigurationV1ControllerConfig response = api.readMachineconfigurationOpenshiftIoV1ControllerConfigStatus(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified KubeletConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readMachineconfigurationOpenshiftIoV1KubeletConfigTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftMachineconfigurationV1KubeletConfig response = api.readMachineconfigurationOpenshiftIoV1KubeletConfig(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified KubeletConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readMachineconfigurationOpenshiftIoV1KubeletConfigStatusTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftMachineconfigurationV1KubeletConfig response = api.readMachineconfigurationOpenshiftIoV1KubeletConfigStatus(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified MachineConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readMachineconfigurationOpenshiftIoV1MachineConfigTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftMachineconfigurationV1MachineConfig response = api.readMachineconfigurationOpenshiftIoV1MachineConfig(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified MachineConfigPool
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readMachineconfigurationOpenshiftIoV1MachineConfigPoolTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftMachineconfigurationV1MachineConfigPool response = api.readMachineconfigurationOpenshiftIoV1MachineConfigPool(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified MachineConfigPool
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readMachineconfigurationOpenshiftIoV1MachineConfigPoolStatusTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftMachineconfigurationV1MachineConfigPool response = api.readMachineconfigurationOpenshiftIoV1MachineConfigPoolStatus(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified MCOConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readMachineconfigurationOpenshiftIoV1NamespacedMCOConfigTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftMachineconfigurationV1MCOConfig response = api.readMachineconfigurationOpenshiftIoV1NamespacedMCOConfig(name, namespace, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified ContainerRuntimeConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceMachineconfigurationOpenshiftIoV1ContainerRuntimeConfigTest() throws ApiException {
        String name = null;
        IoOpenshiftMachineconfigurationV1ContainerRuntimeConfig body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftMachineconfigurationV1ContainerRuntimeConfig response = api.replaceMachineconfigurationOpenshiftIoV1ContainerRuntimeConfig(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified ContainerRuntimeConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceMachineconfigurationOpenshiftIoV1ContainerRuntimeConfigStatusTest() throws ApiException {
        String name = null;
        IoOpenshiftMachineconfigurationV1ContainerRuntimeConfig body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftMachineconfigurationV1ContainerRuntimeConfig response = api.replaceMachineconfigurationOpenshiftIoV1ContainerRuntimeConfigStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified ControllerConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceMachineconfigurationOpenshiftIoV1ControllerConfigTest() throws ApiException {
        String name = null;
        IoOpenshiftMachineconfigurationV1ControllerConfig body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftMachineconfigurationV1ControllerConfig response = api.replaceMachineconfigurationOpenshiftIoV1ControllerConfig(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified ControllerConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceMachineconfigurationOpenshiftIoV1ControllerConfigStatusTest() throws ApiException {
        String name = null;
        IoOpenshiftMachineconfigurationV1ControllerConfig body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftMachineconfigurationV1ControllerConfig response = api.replaceMachineconfigurationOpenshiftIoV1ControllerConfigStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified KubeletConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceMachineconfigurationOpenshiftIoV1KubeletConfigTest() throws ApiException {
        String name = null;
        IoOpenshiftMachineconfigurationV1KubeletConfig body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftMachineconfigurationV1KubeletConfig response = api.replaceMachineconfigurationOpenshiftIoV1KubeletConfig(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified KubeletConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceMachineconfigurationOpenshiftIoV1KubeletConfigStatusTest() throws ApiException {
        String name = null;
        IoOpenshiftMachineconfigurationV1KubeletConfig body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftMachineconfigurationV1KubeletConfig response = api.replaceMachineconfigurationOpenshiftIoV1KubeletConfigStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified MachineConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceMachineconfigurationOpenshiftIoV1MachineConfigTest() throws ApiException {
        String name = null;
        IoOpenshiftMachineconfigurationV1MachineConfig body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftMachineconfigurationV1MachineConfig response = api.replaceMachineconfigurationOpenshiftIoV1MachineConfig(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified MachineConfigPool
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceMachineconfigurationOpenshiftIoV1MachineConfigPoolTest() throws ApiException {
        String name = null;
        IoOpenshiftMachineconfigurationV1MachineConfigPool body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftMachineconfigurationV1MachineConfigPool response = api.replaceMachineconfigurationOpenshiftIoV1MachineConfigPool(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified MachineConfigPool
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceMachineconfigurationOpenshiftIoV1MachineConfigPoolStatusTest() throws ApiException {
        String name = null;
        IoOpenshiftMachineconfigurationV1MachineConfigPool body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftMachineconfigurationV1MachineConfigPool response = api.replaceMachineconfigurationOpenshiftIoV1MachineConfigPoolStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified MCOConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceMachineconfigurationOpenshiftIoV1NamespacedMCOConfigTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoOpenshiftMachineconfigurationV1MCOConfig body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftMachineconfigurationV1MCOConfig response = api.replaceMachineconfigurationOpenshiftIoV1NamespacedMCOConfig(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
}
