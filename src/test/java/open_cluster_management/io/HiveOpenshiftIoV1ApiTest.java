/*
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package open_cluster_management.io;

import open_cluster_management.ApiException;
import open_cluster_management.io.IoK8sApiAutoscalingV1Scale;
import open_cluster_management.io.IoK8sApimachineryPkgApisMetaV1DeleteOptions;
import open_cluster_management.io.IoK8sApimachineryPkgApisMetaV1Patch;
import open_cluster_management.io.IoK8sApimachineryPkgApisMetaV1Status;
import open_cluster_management.io.IoOpenshiftHiveV1Checkpoint;
import open_cluster_management.io.IoOpenshiftHiveV1CheckpointList;
import open_cluster_management.io.IoOpenshiftHiveV1ClusterDeployment;
import open_cluster_management.io.IoOpenshiftHiveV1ClusterDeploymentList;
import open_cluster_management.io.IoOpenshiftHiveV1ClusterDeprovision;
import open_cluster_management.io.IoOpenshiftHiveV1ClusterDeprovisionList;
import open_cluster_management.io.IoOpenshiftHiveV1ClusterImageSet;
import open_cluster_management.io.IoOpenshiftHiveV1ClusterImageSetList;
import open_cluster_management.io.IoOpenshiftHiveV1ClusterProvision;
import open_cluster_management.io.IoOpenshiftHiveV1ClusterProvisionList;
import open_cluster_management.io.IoOpenshiftHiveV1ClusterState;
import open_cluster_management.io.IoOpenshiftHiveV1ClusterStateList;
import open_cluster_management.io.IoOpenshiftHiveV1DNSZone;
import open_cluster_management.io.IoOpenshiftHiveV1DNSZoneList;
import open_cluster_management.io.IoOpenshiftHiveV1HiveConfig;
import open_cluster_management.io.IoOpenshiftHiveV1HiveConfigList;
import open_cluster_management.io.IoOpenshiftHiveV1MachinePool;
import open_cluster_management.io.IoOpenshiftHiveV1MachinePoolList;
import open_cluster_management.io.IoOpenshiftHiveV1MachinePoolNameLease;
import open_cluster_management.io.IoOpenshiftHiveV1MachinePoolNameLeaseList;
import open_cluster_management.io.IoOpenshiftHiveV1SelectorSyncIdentityProvider;
import open_cluster_management.io.IoOpenshiftHiveV1SelectorSyncIdentityProviderList;
import open_cluster_management.io.IoOpenshiftHiveV1SelectorSyncSet;
import open_cluster_management.io.IoOpenshiftHiveV1SelectorSyncSetList;
import open_cluster_management.io.IoOpenshiftHiveV1SyncIdentityProvider;
import open_cluster_management.io.IoOpenshiftHiveV1SyncIdentityProviderList;
import open_cluster_management.io.IoOpenshiftHiveV1SyncSet;
import open_cluster_management.io.IoOpenshiftHiveV1SyncSetInstance;
import open_cluster_management.io.IoOpenshiftHiveV1SyncSetInstanceList;
import open_cluster_management.io.IoOpenshiftHiveV1SyncSetList;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for HiveOpenshiftIoV1Api
 */
@Ignore
public class HiveOpenshiftIoV1ApiTest {

    private final HiveOpenshiftIoV1Api api = new HiveOpenshiftIoV1Api();

    
    /**
     * 
     *
     * create a ClusterImageSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createHiveOpenshiftIoV1ClusterImageSetTest() throws ApiException {
        IoOpenshiftHiveV1ClusterImageSet body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftHiveV1ClusterImageSet response = api.createHiveOpenshiftIoV1ClusterImageSet(body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a HiveConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createHiveOpenshiftIoV1HiveConfigTest() throws ApiException {
        IoOpenshiftHiveV1HiveConfig body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftHiveV1HiveConfig response = api.createHiveOpenshiftIoV1HiveConfig(body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a Checkpoint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createHiveOpenshiftIoV1NamespacedCheckpointTest() throws ApiException {
        String namespace = null;
        IoOpenshiftHiveV1Checkpoint body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftHiveV1Checkpoint response = api.createHiveOpenshiftIoV1NamespacedCheckpoint(namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a ClusterDeployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createHiveOpenshiftIoV1NamespacedClusterDeploymentTest() throws ApiException {
        String namespace = null;
        IoOpenshiftHiveV1ClusterDeployment body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftHiveV1ClusterDeployment response = api.createHiveOpenshiftIoV1NamespacedClusterDeployment(namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a ClusterDeprovision
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createHiveOpenshiftIoV1NamespacedClusterDeprovisionTest() throws ApiException {
        String namespace = null;
        IoOpenshiftHiveV1ClusterDeprovision body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftHiveV1ClusterDeprovision response = api.createHiveOpenshiftIoV1NamespacedClusterDeprovision(namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a ClusterProvision
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createHiveOpenshiftIoV1NamespacedClusterProvisionTest() throws ApiException {
        String namespace = null;
        IoOpenshiftHiveV1ClusterProvision body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftHiveV1ClusterProvision response = api.createHiveOpenshiftIoV1NamespacedClusterProvision(namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a ClusterState
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createHiveOpenshiftIoV1NamespacedClusterStateTest() throws ApiException {
        String namespace = null;
        IoOpenshiftHiveV1ClusterState body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftHiveV1ClusterState response = api.createHiveOpenshiftIoV1NamespacedClusterState(namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a DNSZone
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createHiveOpenshiftIoV1NamespacedDNSZoneTest() throws ApiException {
        String namespace = null;
        IoOpenshiftHiveV1DNSZone body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftHiveV1DNSZone response = api.createHiveOpenshiftIoV1NamespacedDNSZone(namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a MachinePool
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createHiveOpenshiftIoV1NamespacedMachinePoolTest() throws ApiException {
        String namespace = null;
        IoOpenshiftHiveV1MachinePool body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftHiveV1MachinePool response = api.createHiveOpenshiftIoV1NamespacedMachinePool(namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a MachinePoolNameLease
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createHiveOpenshiftIoV1NamespacedMachinePoolNameLeaseTest() throws ApiException {
        String namespace = null;
        IoOpenshiftHiveV1MachinePoolNameLease body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftHiveV1MachinePoolNameLease response = api.createHiveOpenshiftIoV1NamespacedMachinePoolNameLease(namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a SyncIdentityProvider
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createHiveOpenshiftIoV1NamespacedSyncIdentityProviderTest() throws ApiException {
        String namespace = null;
        IoOpenshiftHiveV1SyncIdentityProvider body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftHiveV1SyncIdentityProvider response = api.createHiveOpenshiftIoV1NamespacedSyncIdentityProvider(namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a SyncSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createHiveOpenshiftIoV1NamespacedSyncSetTest() throws ApiException {
        String namespace = null;
        IoOpenshiftHiveV1SyncSet body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftHiveV1SyncSet response = api.createHiveOpenshiftIoV1NamespacedSyncSet(namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a SyncSetInstance
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createHiveOpenshiftIoV1NamespacedSyncSetInstanceTest() throws ApiException {
        String namespace = null;
        IoOpenshiftHiveV1SyncSetInstance body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftHiveV1SyncSetInstance response = api.createHiveOpenshiftIoV1NamespacedSyncSetInstance(namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a SelectorSyncIdentityProvider
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createHiveOpenshiftIoV1SelectorSyncIdentityProviderTest() throws ApiException {
        IoOpenshiftHiveV1SelectorSyncIdentityProvider body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftHiveV1SelectorSyncIdentityProvider response = api.createHiveOpenshiftIoV1SelectorSyncIdentityProvider(body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a SelectorSyncSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createHiveOpenshiftIoV1SelectorSyncSetTest() throws ApiException {
        IoOpenshiftHiveV1SelectorSyncSet body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftHiveV1SelectorSyncSet response = api.createHiveOpenshiftIoV1SelectorSyncSet(body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a ClusterImageSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteHiveOpenshiftIoV1ClusterImageSetTest() throws ApiException {
        String name = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteHiveOpenshiftIoV1ClusterImageSet(name, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of ClusterImageSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteHiveOpenshiftIoV1CollectionClusterImageSetTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteHiveOpenshiftIoV1CollectionClusterImageSet(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of HiveConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteHiveOpenshiftIoV1CollectionHiveConfigTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteHiveOpenshiftIoV1CollectionHiveConfig(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of Checkpoint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteHiveOpenshiftIoV1CollectionNamespacedCheckpointTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteHiveOpenshiftIoV1CollectionNamespacedCheckpoint(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of ClusterDeployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteHiveOpenshiftIoV1CollectionNamespacedClusterDeploymentTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteHiveOpenshiftIoV1CollectionNamespacedClusterDeployment(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of ClusterDeprovision
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteHiveOpenshiftIoV1CollectionNamespacedClusterDeprovisionTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteHiveOpenshiftIoV1CollectionNamespacedClusterDeprovision(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of ClusterProvision
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteHiveOpenshiftIoV1CollectionNamespacedClusterProvisionTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteHiveOpenshiftIoV1CollectionNamespacedClusterProvision(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of ClusterState
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteHiveOpenshiftIoV1CollectionNamespacedClusterStateTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteHiveOpenshiftIoV1CollectionNamespacedClusterState(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of DNSZone
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteHiveOpenshiftIoV1CollectionNamespacedDNSZoneTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteHiveOpenshiftIoV1CollectionNamespacedDNSZone(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of MachinePool
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteHiveOpenshiftIoV1CollectionNamespacedMachinePoolTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteHiveOpenshiftIoV1CollectionNamespacedMachinePool(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of MachinePoolNameLease
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteHiveOpenshiftIoV1CollectionNamespacedMachinePoolNameLeaseTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteHiveOpenshiftIoV1CollectionNamespacedMachinePoolNameLease(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of SyncIdentityProvider
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteHiveOpenshiftIoV1CollectionNamespacedSyncIdentityProviderTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteHiveOpenshiftIoV1CollectionNamespacedSyncIdentityProvider(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of SyncSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteHiveOpenshiftIoV1CollectionNamespacedSyncSetTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteHiveOpenshiftIoV1CollectionNamespacedSyncSet(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of SyncSetInstance
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteHiveOpenshiftIoV1CollectionNamespacedSyncSetInstanceTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteHiveOpenshiftIoV1CollectionNamespacedSyncSetInstance(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of SelectorSyncIdentityProvider
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteHiveOpenshiftIoV1CollectionSelectorSyncIdentityProviderTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteHiveOpenshiftIoV1CollectionSelectorSyncIdentityProvider(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of SelectorSyncSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteHiveOpenshiftIoV1CollectionSelectorSyncSetTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteHiveOpenshiftIoV1CollectionSelectorSyncSet(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a HiveConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteHiveOpenshiftIoV1HiveConfigTest() throws ApiException {
        String name = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteHiveOpenshiftIoV1HiveConfig(name, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a Checkpoint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteHiveOpenshiftIoV1NamespacedCheckpointTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteHiveOpenshiftIoV1NamespacedCheckpoint(name, namespace, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a ClusterDeployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteHiveOpenshiftIoV1NamespacedClusterDeploymentTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteHiveOpenshiftIoV1NamespacedClusterDeployment(name, namespace, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a ClusterDeprovision
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteHiveOpenshiftIoV1NamespacedClusterDeprovisionTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteHiveOpenshiftIoV1NamespacedClusterDeprovision(name, namespace, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a ClusterProvision
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteHiveOpenshiftIoV1NamespacedClusterProvisionTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteHiveOpenshiftIoV1NamespacedClusterProvision(name, namespace, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a ClusterState
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteHiveOpenshiftIoV1NamespacedClusterStateTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteHiveOpenshiftIoV1NamespacedClusterState(name, namespace, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a DNSZone
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteHiveOpenshiftIoV1NamespacedDNSZoneTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteHiveOpenshiftIoV1NamespacedDNSZone(name, namespace, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a MachinePool
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteHiveOpenshiftIoV1NamespacedMachinePoolTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteHiveOpenshiftIoV1NamespacedMachinePool(name, namespace, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a MachinePoolNameLease
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteHiveOpenshiftIoV1NamespacedMachinePoolNameLeaseTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteHiveOpenshiftIoV1NamespacedMachinePoolNameLease(name, namespace, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a SyncIdentityProvider
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteHiveOpenshiftIoV1NamespacedSyncIdentityProviderTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteHiveOpenshiftIoV1NamespacedSyncIdentityProvider(name, namespace, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a SyncSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteHiveOpenshiftIoV1NamespacedSyncSetTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteHiveOpenshiftIoV1NamespacedSyncSet(name, namespace, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a SyncSetInstance
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteHiveOpenshiftIoV1NamespacedSyncSetInstanceTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteHiveOpenshiftIoV1NamespacedSyncSetInstance(name, namespace, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a SelectorSyncIdentityProvider
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteHiveOpenshiftIoV1SelectorSyncIdentityProviderTest() throws ApiException {
        String name = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteHiveOpenshiftIoV1SelectorSyncIdentityProvider(name, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a SelectorSyncSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteHiveOpenshiftIoV1SelectorSyncSetTest() throws ApiException {
        String name = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteHiveOpenshiftIoV1SelectorSyncSet(name, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind Checkpoint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listHiveOpenshiftIoV1CheckpointForAllNamespacesTest() throws ApiException {
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftHiveV1CheckpointList response = api.listHiveOpenshiftIoV1CheckpointForAllNamespaces(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind ClusterDeployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listHiveOpenshiftIoV1ClusterDeploymentForAllNamespacesTest() throws ApiException {
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftHiveV1ClusterDeploymentList response = api.listHiveOpenshiftIoV1ClusterDeploymentForAllNamespaces(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind ClusterDeprovision
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listHiveOpenshiftIoV1ClusterDeprovisionForAllNamespacesTest() throws ApiException {
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftHiveV1ClusterDeprovisionList response = api.listHiveOpenshiftIoV1ClusterDeprovisionForAllNamespaces(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind ClusterImageSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listHiveOpenshiftIoV1ClusterImageSetTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftHiveV1ClusterImageSetList response = api.listHiveOpenshiftIoV1ClusterImageSet(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind ClusterProvision
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listHiveOpenshiftIoV1ClusterProvisionForAllNamespacesTest() throws ApiException {
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftHiveV1ClusterProvisionList response = api.listHiveOpenshiftIoV1ClusterProvisionForAllNamespaces(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind ClusterState
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listHiveOpenshiftIoV1ClusterStateForAllNamespacesTest() throws ApiException {
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftHiveV1ClusterStateList response = api.listHiveOpenshiftIoV1ClusterStateForAllNamespaces(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind DNSZone
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listHiveOpenshiftIoV1DNSZoneForAllNamespacesTest() throws ApiException {
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftHiveV1DNSZoneList response = api.listHiveOpenshiftIoV1DNSZoneForAllNamespaces(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind HiveConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listHiveOpenshiftIoV1HiveConfigTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftHiveV1HiveConfigList response = api.listHiveOpenshiftIoV1HiveConfig(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind MachinePool
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listHiveOpenshiftIoV1MachinePoolForAllNamespacesTest() throws ApiException {
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftHiveV1MachinePoolList response = api.listHiveOpenshiftIoV1MachinePoolForAllNamespaces(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind MachinePoolNameLease
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listHiveOpenshiftIoV1MachinePoolNameLeaseForAllNamespacesTest() throws ApiException {
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftHiveV1MachinePoolNameLeaseList response = api.listHiveOpenshiftIoV1MachinePoolNameLeaseForAllNamespaces(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind Checkpoint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listHiveOpenshiftIoV1NamespacedCheckpointTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftHiveV1CheckpointList response = api.listHiveOpenshiftIoV1NamespacedCheckpoint(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind ClusterDeployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listHiveOpenshiftIoV1NamespacedClusterDeploymentTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftHiveV1ClusterDeploymentList response = api.listHiveOpenshiftIoV1NamespacedClusterDeployment(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind ClusterDeprovision
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listHiveOpenshiftIoV1NamespacedClusterDeprovisionTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftHiveV1ClusterDeprovisionList response = api.listHiveOpenshiftIoV1NamespacedClusterDeprovision(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind ClusterProvision
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listHiveOpenshiftIoV1NamespacedClusterProvisionTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftHiveV1ClusterProvisionList response = api.listHiveOpenshiftIoV1NamespacedClusterProvision(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind ClusterState
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listHiveOpenshiftIoV1NamespacedClusterStateTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftHiveV1ClusterStateList response = api.listHiveOpenshiftIoV1NamespacedClusterState(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind DNSZone
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listHiveOpenshiftIoV1NamespacedDNSZoneTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftHiveV1DNSZoneList response = api.listHiveOpenshiftIoV1NamespacedDNSZone(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind MachinePool
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listHiveOpenshiftIoV1NamespacedMachinePoolTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftHiveV1MachinePoolList response = api.listHiveOpenshiftIoV1NamespacedMachinePool(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind MachinePoolNameLease
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listHiveOpenshiftIoV1NamespacedMachinePoolNameLeaseTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftHiveV1MachinePoolNameLeaseList response = api.listHiveOpenshiftIoV1NamespacedMachinePoolNameLease(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind SyncIdentityProvider
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listHiveOpenshiftIoV1NamespacedSyncIdentityProviderTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftHiveV1SyncIdentityProviderList response = api.listHiveOpenshiftIoV1NamespacedSyncIdentityProvider(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind SyncSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listHiveOpenshiftIoV1NamespacedSyncSetTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftHiveV1SyncSetList response = api.listHiveOpenshiftIoV1NamespacedSyncSet(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind SyncSetInstance
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listHiveOpenshiftIoV1NamespacedSyncSetInstanceTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftHiveV1SyncSetInstanceList response = api.listHiveOpenshiftIoV1NamespacedSyncSetInstance(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind SelectorSyncIdentityProvider
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listHiveOpenshiftIoV1SelectorSyncIdentityProviderTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftHiveV1SelectorSyncIdentityProviderList response = api.listHiveOpenshiftIoV1SelectorSyncIdentityProvider(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind SelectorSyncSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listHiveOpenshiftIoV1SelectorSyncSetTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftHiveV1SelectorSyncSetList response = api.listHiveOpenshiftIoV1SelectorSyncSet(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind SyncIdentityProvider
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listHiveOpenshiftIoV1SyncIdentityProviderForAllNamespacesTest() throws ApiException {
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftHiveV1SyncIdentityProviderList response = api.listHiveOpenshiftIoV1SyncIdentityProviderForAllNamespaces(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind SyncSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listHiveOpenshiftIoV1SyncSetForAllNamespacesTest() throws ApiException {
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftHiveV1SyncSetList response = api.listHiveOpenshiftIoV1SyncSetForAllNamespaces(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind SyncSetInstance
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listHiveOpenshiftIoV1SyncSetInstanceForAllNamespacesTest() throws ApiException {
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftHiveV1SyncSetInstanceList response = api.listHiveOpenshiftIoV1SyncSetInstanceForAllNamespaces(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified ClusterImageSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchHiveOpenshiftIoV1ClusterImageSetTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftHiveV1ClusterImageSet response = api.patchHiveOpenshiftIoV1ClusterImageSet(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified ClusterImageSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchHiveOpenshiftIoV1ClusterImageSetStatusTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftHiveV1ClusterImageSet response = api.patchHiveOpenshiftIoV1ClusterImageSetStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified HiveConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchHiveOpenshiftIoV1HiveConfigTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftHiveV1HiveConfig response = api.patchHiveOpenshiftIoV1HiveConfig(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified HiveConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchHiveOpenshiftIoV1HiveConfigStatusTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftHiveV1HiveConfig response = api.patchHiveOpenshiftIoV1HiveConfigStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified Checkpoint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchHiveOpenshiftIoV1NamespacedCheckpointTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftHiveV1Checkpoint response = api.patchHiveOpenshiftIoV1NamespacedCheckpoint(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified Checkpoint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchHiveOpenshiftIoV1NamespacedCheckpointStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftHiveV1Checkpoint response = api.patchHiveOpenshiftIoV1NamespacedCheckpointStatus(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified ClusterDeployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchHiveOpenshiftIoV1NamespacedClusterDeploymentTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftHiveV1ClusterDeployment response = api.patchHiveOpenshiftIoV1NamespacedClusterDeployment(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified ClusterDeployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchHiveOpenshiftIoV1NamespacedClusterDeploymentStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftHiveV1ClusterDeployment response = api.patchHiveOpenshiftIoV1NamespacedClusterDeploymentStatus(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified ClusterDeprovision
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchHiveOpenshiftIoV1NamespacedClusterDeprovisionTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftHiveV1ClusterDeprovision response = api.patchHiveOpenshiftIoV1NamespacedClusterDeprovision(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified ClusterDeprovision
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchHiveOpenshiftIoV1NamespacedClusterDeprovisionStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftHiveV1ClusterDeprovision response = api.patchHiveOpenshiftIoV1NamespacedClusterDeprovisionStatus(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified ClusterProvision
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchHiveOpenshiftIoV1NamespacedClusterProvisionTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftHiveV1ClusterProvision response = api.patchHiveOpenshiftIoV1NamespacedClusterProvision(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified ClusterProvision
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchHiveOpenshiftIoV1NamespacedClusterProvisionStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftHiveV1ClusterProvision response = api.patchHiveOpenshiftIoV1NamespacedClusterProvisionStatus(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified ClusterState
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchHiveOpenshiftIoV1NamespacedClusterStateTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftHiveV1ClusterState response = api.patchHiveOpenshiftIoV1NamespacedClusterState(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified ClusterState
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchHiveOpenshiftIoV1NamespacedClusterStateStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftHiveV1ClusterState response = api.patchHiveOpenshiftIoV1NamespacedClusterStateStatus(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified DNSZone
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchHiveOpenshiftIoV1NamespacedDNSZoneTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftHiveV1DNSZone response = api.patchHiveOpenshiftIoV1NamespacedDNSZone(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified DNSZone
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchHiveOpenshiftIoV1NamespacedDNSZoneStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftHiveV1DNSZone response = api.patchHiveOpenshiftIoV1NamespacedDNSZoneStatus(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified MachinePool
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchHiveOpenshiftIoV1NamespacedMachinePoolTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftHiveV1MachinePool response = api.patchHiveOpenshiftIoV1NamespacedMachinePool(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified MachinePoolNameLease
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchHiveOpenshiftIoV1NamespacedMachinePoolNameLeaseTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftHiveV1MachinePoolNameLease response = api.patchHiveOpenshiftIoV1NamespacedMachinePoolNameLease(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update scale of the specified MachinePool
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchHiveOpenshiftIoV1NamespacedMachinePoolScaleTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoK8sApiAutoscalingV1Scale response = api.patchHiveOpenshiftIoV1NamespacedMachinePoolScale(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified MachinePool
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchHiveOpenshiftIoV1NamespacedMachinePoolStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftHiveV1MachinePool response = api.patchHiveOpenshiftIoV1NamespacedMachinePoolStatus(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified SyncIdentityProvider
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchHiveOpenshiftIoV1NamespacedSyncIdentityProviderTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftHiveV1SyncIdentityProvider response = api.patchHiveOpenshiftIoV1NamespacedSyncIdentityProvider(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified SyncSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchHiveOpenshiftIoV1NamespacedSyncSetTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftHiveV1SyncSet response = api.patchHiveOpenshiftIoV1NamespacedSyncSet(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified SyncSetInstance
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchHiveOpenshiftIoV1NamespacedSyncSetInstanceTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftHiveV1SyncSetInstance response = api.patchHiveOpenshiftIoV1NamespacedSyncSetInstance(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified SyncSetInstance
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchHiveOpenshiftIoV1NamespacedSyncSetInstanceStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftHiveV1SyncSetInstance response = api.patchHiveOpenshiftIoV1NamespacedSyncSetInstanceStatus(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified SelectorSyncIdentityProvider
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchHiveOpenshiftIoV1SelectorSyncIdentityProviderTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftHiveV1SelectorSyncIdentityProvider response = api.patchHiveOpenshiftIoV1SelectorSyncIdentityProvider(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified SelectorSyncSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchHiveOpenshiftIoV1SelectorSyncSetTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftHiveV1SelectorSyncSet response = api.patchHiveOpenshiftIoV1SelectorSyncSet(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified ClusterImageSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readHiveOpenshiftIoV1ClusterImageSetTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftHiveV1ClusterImageSet response = api.readHiveOpenshiftIoV1ClusterImageSet(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified ClusterImageSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readHiveOpenshiftIoV1ClusterImageSetStatusTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftHiveV1ClusterImageSet response = api.readHiveOpenshiftIoV1ClusterImageSetStatus(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified HiveConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readHiveOpenshiftIoV1HiveConfigTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftHiveV1HiveConfig response = api.readHiveOpenshiftIoV1HiveConfig(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified HiveConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readHiveOpenshiftIoV1HiveConfigStatusTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftHiveV1HiveConfig response = api.readHiveOpenshiftIoV1HiveConfigStatus(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified Checkpoint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readHiveOpenshiftIoV1NamespacedCheckpointTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftHiveV1Checkpoint response = api.readHiveOpenshiftIoV1NamespacedCheckpoint(name, namespace, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified Checkpoint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readHiveOpenshiftIoV1NamespacedCheckpointStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftHiveV1Checkpoint response = api.readHiveOpenshiftIoV1NamespacedCheckpointStatus(name, namespace, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified ClusterDeployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readHiveOpenshiftIoV1NamespacedClusterDeploymentTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftHiveV1ClusterDeployment response = api.readHiveOpenshiftIoV1NamespacedClusterDeployment(name, namespace, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified ClusterDeployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readHiveOpenshiftIoV1NamespacedClusterDeploymentStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftHiveV1ClusterDeployment response = api.readHiveOpenshiftIoV1NamespacedClusterDeploymentStatus(name, namespace, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified ClusterDeprovision
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readHiveOpenshiftIoV1NamespacedClusterDeprovisionTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftHiveV1ClusterDeprovision response = api.readHiveOpenshiftIoV1NamespacedClusterDeprovision(name, namespace, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified ClusterDeprovision
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readHiveOpenshiftIoV1NamespacedClusterDeprovisionStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftHiveV1ClusterDeprovision response = api.readHiveOpenshiftIoV1NamespacedClusterDeprovisionStatus(name, namespace, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified ClusterProvision
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readHiveOpenshiftIoV1NamespacedClusterProvisionTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftHiveV1ClusterProvision response = api.readHiveOpenshiftIoV1NamespacedClusterProvision(name, namespace, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified ClusterProvision
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readHiveOpenshiftIoV1NamespacedClusterProvisionStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftHiveV1ClusterProvision response = api.readHiveOpenshiftIoV1NamespacedClusterProvisionStatus(name, namespace, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified ClusterState
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readHiveOpenshiftIoV1NamespacedClusterStateTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftHiveV1ClusterState response = api.readHiveOpenshiftIoV1NamespacedClusterState(name, namespace, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified ClusterState
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readHiveOpenshiftIoV1NamespacedClusterStateStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftHiveV1ClusterState response = api.readHiveOpenshiftIoV1NamespacedClusterStateStatus(name, namespace, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified DNSZone
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readHiveOpenshiftIoV1NamespacedDNSZoneTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftHiveV1DNSZone response = api.readHiveOpenshiftIoV1NamespacedDNSZone(name, namespace, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified DNSZone
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readHiveOpenshiftIoV1NamespacedDNSZoneStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftHiveV1DNSZone response = api.readHiveOpenshiftIoV1NamespacedDNSZoneStatus(name, namespace, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified MachinePool
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readHiveOpenshiftIoV1NamespacedMachinePoolTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftHiveV1MachinePool response = api.readHiveOpenshiftIoV1NamespacedMachinePool(name, namespace, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified MachinePoolNameLease
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readHiveOpenshiftIoV1NamespacedMachinePoolNameLeaseTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftHiveV1MachinePoolNameLease response = api.readHiveOpenshiftIoV1NamespacedMachinePoolNameLease(name, namespace, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read scale of the specified MachinePool
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readHiveOpenshiftIoV1NamespacedMachinePoolScaleTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        String resourceVersion = null;
        IoK8sApiAutoscalingV1Scale response = api.readHiveOpenshiftIoV1NamespacedMachinePoolScale(name, namespace, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified MachinePool
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readHiveOpenshiftIoV1NamespacedMachinePoolStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftHiveV1MachinePool response = api.readHiveOpenshiftIoV1NamespacedMachinePoolStatus(name, namespace, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified SyncIdentityProvider
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readHiveOpenshiftIoV1NamespacedSyncIdentityProviderTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftHiveV1SyncIdentityProvider response = api.readHiveOpenshiftIoV1NamespacedSyncIdentityProvider(name, namespace, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified SyncSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readHiveOpenshiftIoV1NamespacedSyncSetTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftHiveV1SyncSet response = api.readHiveOpenshiftIoV1NamespacedSyncSet(name, namespace, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified SyncSetInstance
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readHiveOpenshiftIoV1NamespacedSyncSetInstanceTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftHiveV1SyncSetInstance response = api.readHiveOpenshiftIoV1NamespacedSyncSetInstance(name, namespace, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified SyncSetInstance
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readHiveOpenshiftIoV1NamespacedSyncSetInstanceStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftHiveV1SyncSetInstance response = api.readHiveOpenshiftIoV1NamespacedSyncSetInstanceStatus(name, namespace, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified SelectorSyncIdentityProvider
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readHiveOpenshiftIoV1SelectorSyncIdentityProviderTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftHiveV1SelectorSyncIdentityProvider response = api.readHiveOpenshiftIoV1SelectorSyncIdentityProvider(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified SelectorSyncSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readHiveOpenshiftIoV1SelectorSyncSetTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftHiveV1SelectorSyncSet response = api.readHiveOpenshiftIoV1SelectorSyncSet(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified ClusterImageSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceHiveOpenshiftIoV1ClusterImageSetTest() throws ApiException {
        String name = null;
        IoOpenshiftHiveV1ClusterImageSet body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftHiveV1ClusterImageSet response = api.replaceHiveOpenshiftIoV1ClusterImageSet(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified ClusterImageSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceHiveOpenshiftIoV1ClusterImageSetStatusTest() throws ApiException {
        String name = null;
        IoOpenshiftHiveV1ClusterImageSet body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftHiveV1ClusterImageSet response = api.replaceHiveOpenshiftIoV1ClusterImageSetStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified HiveConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceHiveOpenshiftIoV1HiveConfigTest() throws ApiException {
        String name = null;
        IoOpenshiftHiveV1HiveConfig body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftHiveV1HiveConfig response = api.replaceHiveOpenshiftIoV1HiveConfig(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified HiveConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceHiveOpenshiftIoV1HiveConfigStatusTest() throws ApiException {
        String name = null;
        IoOpenshiftHiveV1HiveConfig body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftHiveV1HiveConfig response = api.replaceHiveOpenshiftIoV1HiveConfigStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified Checkpoint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceHiveOpenshiftIoV1NamespacedCheckpointTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoOpenshiftHiveV1Checkpoint body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftHiveV1Checkpoint response = api.replaceHiveOpenshiftIoV1NamespacedCheckpoint(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified Checkpoint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceHiveOpenshiftIoV1NamespacedCheckpointStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoOpenshiftHiveV1Checkpoint body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftHiveV1Checkpoint response = api.replaceHiveOpenshiftIoV1NamespacedCheckpointStatus(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified ClusterDeployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceHiveOpenshiftIoV1NamespacedClusterDeploymentTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoOpenshiftHiveV1ClusterDeployment body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftHiveV1ClusterDeployment response = api.replaceHiveOpenshiftIoV1NamespacedClusterDeployment(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified ClusterDeployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceHiveOpenshiftIoV1NamespacedClusterDeploymentStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoOpenshiftHiveV1ClusterDeployment body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftHiveV1ClusterDeployment response = api.replaceHiveOpenshiftIoV1NamespacedClusterDeploymentStatus(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified ClusterDeprovision
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceHiveOpenshiftIoV1NamespacedClusterDeprovisionTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoOpenshiftHiveV1ClusterDeprovision body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftHiveV1ClusterDeprovision response = api.replaceHiveOpenshiftIoV1NamespacedClusterDeprovision(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified ClusterDeprovision
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceHiveOpenshiftIoV1NamespacedClusterDeprovisionStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoOpenshiftHiveV1ClusterDeprovision body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftHiveV1ClusterDeprovision response = api.replaceHiveOpenshiftIoV1NamespacedClusterDeprovisionStatus(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified ClusterProvision
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceHiveOpenshiftIoV1NamespacedClusterProvisionTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoOpenshiftHiveV1ClusterProvision body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftHiveV1ClusterProvision response = api.replaceHiveOpenshiftIoV1NamespacedClusterProvision(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified ClusterProvision
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceHiveOpenshiftIoV1NamespacedClusterProvisionStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoOpenshiftHiveV1ClusterProvision body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftHiveV1ClusterProvision response = api.replaceHiveOpenshiftIoV1NamespacedClusterProvisionStatus(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified ClusterState
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceHiveOpenshiftIoV1NamespacedClusterStateTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoOpenshiftHiveV1ClusterState body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftHiveV1ClusterState response = api.replaceHiveOpenshiftIoV1NamespacedClusterState(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified ClusterState
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceHiveOpenshiftIoV1NamespacedClusterStateStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoOpenshiftHiveV1ClusterState body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftHiveV1ClusterState response = api.replaceHiveOpenshiftIoV1NamespacedClusterStateStatus(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified DNSZone
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceHiveOpenshiftIoV1NamespacedDNSZoneTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoOpenshiftHiveV1DNSZone body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftHiveV1DNSZone response = api.replaceHiveOpenshiftIoV1NamespacedDNSZone(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified DNSZone
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceHiveOpenshiftIoV1NamespacedDNSZoneStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoOpenshiftHiveV1DNSZone body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftHiveV1DNSZone response = api.replaceHiveOpenshiftIoV1NamespacedDNSZoneStatus(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified MachinePool
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceHiveOpenshiftIoV1NamespacedMachinePoolTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoOpenshiftHiveV1MachinePool body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftHiveV1MachinePool response = api.replaceHiveOpenshiftIoV1NamespacedMachinePool(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified MachinePoolNameLease
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceHiveOpenshiftIoV1NamespacedMachinePoolNameLeaseTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoOpenshiftHiveV1MachinePoolNameLease body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftHiveV1MachinePoolNameLease response = api.replaceHiveOpenshiftIoV1NamespacedMachinePoolNameLease(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace scale of the specified MachinePool
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceHiveOpenshiftIoV1NamespacedMachinePoolScaleTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApiAutoscalingV1Scale body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoK8sApiAutoscalingV1Scale response = api.replaceHiveOpenshiftIoV1NamespacedMachinePoolScale(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified MachinePool
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceHiveOpenshiftIoV1NamespacedMachinePoolStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoOpenshiftHiveV1MachinePool body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftHiveV1MachinePool response = api.replaceHiveOpenshiftIoV1NamespacedMachinePoolStatus(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified SyncIdentityProvider
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceHiveOpenshiftIoV1NamespacedSyncIdentityProviderTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoOpenshiftHiveV1SyncIdentityProvider body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftHiveV1SyncIdentityProvider response = api.replaceHiveOpenshiftIoV1NamespacedSyncIdentityProvider(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified SyncSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceHiveOpenshiftIoV1NamespacedSyncSetTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoOpenshiftHiveV1SyncSet body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftHiveV1SyncSet response = api.replaceHiveOpenshiftIoV1NamespacedSyncSet(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified SyncSetInstance
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceHiveOpenshiftIoV1NamespacedSyncSetInstanceTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoOpenshiftHiveV1SyncSetInstance body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftHiveV1SyncSetInstance response = api.replaceHiveOpenshiftIoV1NamespacedSyncSetInstance(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified SyncSetInstance
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceHiveOpenshiftIoV1NamespacedSyncSetInstanceStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoOpenshiftHiveV1SyncSetInstance body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftHiveV1SyncSetInstance response = api.replaceHiveOpenshiftIoV1NamespacedSyncSetInstanceStatus(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified SelectorSyncIdentityProvider
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceHiveOpenshiftIoV1SelectorSyncIdentityProviderTest() throws ApiException {
        String name = null;
        IoOpenshiftHiveV1SelectorSyncIdentityProvider body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftHiveV1SelectorSyncIdentityProvider response = api.replaceHiveOpenshiftIoV1SelectorSyncIdentityProvider(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified SelectorSyncSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceHiveOpenshiftIoV1SelectorSyncSetTest() throws ApiException {
        String name = null;
        IoOpenshiftHiveV1SelectorSyncSet body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftHiveV1SelectorSyncSet response = api.replaceHiveOpenshiftIoV1SelectorSyncSet(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
}
