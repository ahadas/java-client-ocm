/*
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package open_cluster_management.io;

import open_cluster_management.ApiException;
import open_cluster_management.io.IoK8sApiAutoscalingV1Scale;
import open_cluster_management.io.IoK8sApiCoreV1Binding;
import open_cluster_management.io.IoK8sApiCoreV1ComponentStatus;
import open_cluster_management.io.IoK8sApiCoreV1ComponentStatusList;
import open_cluster_management.io.IoK8sApiCoreV1ConfigMap;
import open_cluster_management.io.IoK8sApiCoreV1ConfigMapList;
import open_cluster_management.io.IoK8sApiCoreV1Endpoints;
import open_cluster_management.io.IoK8sApiCoreV1EndpointsList;
import open_cluster_management.io.IoK8sApiCoreV1Event;
import open_cluster_management.io.IoK8sApiCoreV1EventList;
import open_cluster_management.io.IoK8sApiCoreV1LimitRange;
import open_cluster_management.io.IoK8sApiCoreV1LimitRangeList;
import open_cluster_management.io.IoK8sApiCoreV1Namespace;
import open_cluster_management.io.IoK8sApiCoreV1NamespaceList;
import open_cluster_management.io.IoK8sApiCoreV1Node;
import open_cluster_management.io.IoK8sApiCoreV1NodeList;
import open_cluster_management.io.IoK8sApiCoreV1PersistentVolume;
import open_cluster_management.io.IoK8sApiCoreV1PersistentVolumeClaim;
import open_cluster_management.io.IoK8sApiCoreV1PersistentVolumeClaimList;
import open_cluster_management.io.IoK8sApiCoreV1PersistentVolumeList;
import open_cluster_management.io.IoK8sApiCoreV1Pod;
import open_cluster_management.io.IoK8sApiCoreV1PodList;
import open_cluster_management.io.IoK8sApiCoreV1PodTemplate;
import open_cluster_management.io.IoK8sApiCoreV1PodTemplateList;
import open_cluster_management.io.IoK8sApiCoreV1ReplicationController;
import open_cluster_management.io.IoK8sApiCoreV1ReplicationControllerList;
import open_cluster_management.io.IoK8sApiCoreV1ResourceQuota;
import open_cluster_management.io.IoK8sApiCoreV1ResourceQuotaList;
import open_cluster_management.io.IoK8sApiCoreV1Secret;
import open_cluster_management.io.IoK8sApiCoreV1SecretList;
import open_cluster_management.io.IoK8sApiCoreV1Service;
import open_cluster_management.io.IoK8sApiCoreV1ServiceAccount;
import open_cluster_management.io.IoK8sApiCoreV1ServiceAccountList;
import open_cluster_management.io.IoK8sApiCoreV1ServiceList;
import open_cluster_management.io.IoK8sApiPolicyV1beta1Eviction;
import open_cluster_management.io.IoK8sApimachineryPkgApisMetaV1APIResourceList;
import open_cluster_management.io.IoK8sApimachineryPkgApisMetaV1DeleteOptions;
import open_cluster_management.io.IoK8sApimachineryPkgApisMetaV1Patch;
import open_cluster_management.io.IoK8sApimachineryPkgApisMetaV1Status;
import open_cluster_management.io.IoK8sApimachineryPkgApisMetaV1WatchEvent;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CoreV1Api
 */
@Ignore
public class CoreV1ApiTest {

    private final CoreV1Api api = new CoreV1Api();

    
    /**
     * 
     *
     * connect DELETE requests to proxy of Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectCoreV1DeleteNamespacedPodProxyTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String response = api.connectCoreV1DeleteNamespacedPodProxy(name, namespace, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect DELETE requests to proxy of Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectCoreV1DeleteNamespacedPodProxyWithPathTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String path2 = null;
        String response = api.connectCoreV1DeleteNamespacedPodProxyWithPath(name, namespace, path, path2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect DELETE requests to proxy of Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectCoreV1DeleteNamespacedServiceProxyTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String response = api.connectCoreV1DeleteNamespacedServiceProxy(name, namespace, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect DELETE requests to proxy of Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectCoreV1DeleteNamespacedServiceProxyWithPathTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String path2 = null;
        String response = api.connectCoreV1DeleteNamespacedServiceProxyWithPath(name, namespace, path, path2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect DELETE requests to proxy of Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectCoreV1DeleteNodeProxyTest() throws ApiException {
        String name = null;
        String path = null;
        String response = api.connectCoreV1DeleteNodeProxy(name, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect DELETE requests to proxy of Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectCoreV1DeleteNodeProxyWithPathTest() throws ApiException {
        String name = null;
        String path = null;
        String path2 = null;
        String response = api.connectCoreV1DeleteNodeProxyWithPath(name, path, path2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect GET requests to attach of Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectCoreV1GetNamespacedPodAttachTest() throws ApiException {
        String name = null;
        String namespace = null;
        String container = null;
        Boolean stderr = null;
        Boolean stdin = null;
        Boolean stdout = null;
        Boolean tty = null;
        String response = api.connectCoreV1GetNamespacedPodAttach(name, namespace, container, stderr, stdin, stdout, tty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect GET requests to exec of Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectCoreV1GetNamespacedPodExecTest() throws ApiException {
        String name = null;
        String namespace = null;
        String command = null;
        String container = null;
        Boolean stderr = null;
        Boolean stdin = null;
        Boolean stdout = null;
        Boolean tty = null;
        String response = api.connectCoreV1GetNamespacedPodExec(name, namespace, command, container, stderr, stdin, stdout, tty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect GET requests to portforward of Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectCoreV1GetNamespacedPodPortforwardTest() throws ApiException {
        String name = null;
        String namespace = null;
        Integer ports = null;
        String response = api.connectCoreV1GetNamespacedPodPortforward(name, namespace, ports);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect GET requests to proxy of Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectCoreV1GetNamespacedPodProxyTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String response = api.connectCoreV1GetNamespacedPodProxy(name, namespace, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect GET requests to proxy of Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectCoreV1GetNamespacedPodProxyWithPathTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String path2 = null;
        String response = api.connectCoreV1GetNamespacedPodProxyWithPath(name, namespace, path, path2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect GET requests to proxy of Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectCoreV1GetNamespacedServiceProxyTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String response = api.connectCoreV1GetNamespacedServiceProxy(name, namespace, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect GET requests to proxy of Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectCoreV1GetNamespacedServiceProxyWithPathTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String path2 = null;
        String response = api.connectCoreV1GetNamespacedServiceProxyWithPath(name, namespace, path, path2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect GET requests to proxy of Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectCoreV1GetNodeProxyTest() throws ApiException {
        String name = null;
        String path = null;
        String response = api.connectCoreV1GetNodeProxy(name, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect GET requests to proxy of Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectCoreV1GetNodeProxyWithPathTest() throws ApiException {
        String name = null;
        String path = null;
        String path2 = null;
        String response = api.connectCoreV1GetNodeProxyWithPath(name, path, path2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect HEAD requests to proxy of Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectCoreV1HeadNamespacedPodProxyTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String response = api.connectCoreV1HeadNamespacedPodProxy(name, namespace, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect HEAD requests to proxy of Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectCoreV1HeadNamespacedPodProxyWithPathTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String path2 = null;
        String response = api.connectCoreV1HeadNamespacedPodProxyWithPath(name, namespace, path, path2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect HEAD requests to proxy of Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectCoreV1HeadNamespacedServiceProxyTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String response = api.connectCoreV1HeadNamespacedServiceProxy(name, namespace, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect HEAD requests to proxy of Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectCoreV1HeadNamespacedServiceProxyWithPathTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String path2 = null;
        String response = api.connectCoreV1HeadNamespacedServiceProxyWithPath(name, namespace, path, path2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect HEAD requests to proxy of Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectCoreV1HeadNodeProxyTest() throws ApiException {
        String name = null;
        String path = null;
        String response = api.connectCoreV1HeadNodeProxy(name, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect HEAD requests to proxy of Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectCoreV1HeadNodeProxyWithPathTest() throws ApiException {
        String name = null;
        String path = null;
        String path2 = null;
        String response = api.connectCoreV1HeadNodeProxyWithPath(name, path, path2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect OPTIONS requests to proxy of Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectCoreV1OptionsNamespacedPodProxyTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String response = api.connectCoreV1OptionsNamespacedPodProxy(name, namespace, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect OPTIONS requests to proxy of Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectCoreV1OptionsNamespacedPodProxyWithPathTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String path2 = null;
        String response = api.connectCoreV1OptionsNamespacedPodProxyWithPath(name, namespace, path, path2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect OPTIONS requests to proxy of Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectCoreV1OptionsNamespacedServiceProxyTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String response = api.connectCoreV1OptionsNamespacedServiceProxy(name, namespace, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect OPTIONS requests to proxy of Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectCoreV1OptionsNamespacedServiceProxyWithPathTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String path2 = null;
        String response = api.connectCoreV1OptionsNamespacedServiceProxyWithPath(name, namespace, path, path2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect OPTIONS requests to proxy of Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectCoreV1OptionsNodeProxyTest() throws ApiException {
        String name = null;
        String path = null;
        String response = api.connectCoreV1OptionsNodeProxy(name, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect OPTIONS requests to proxy of Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectCoreV1OptionsNodeProxyWithPathTest() throws ApiException {
        String name = null;
        String path = null;
        String path2 = null;
        String response = api.connectCoreV1OptionsNodeProxyWithPath(name, path, path2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect PATCH requests to proxy of Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectCoreV1PatchNamespacedPodProxyTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String response = api.connectCoreV1PatchNamespacedPodProxy(name, namespace, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect PATCH requests to proxy of Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectCoreV1PatchNamespacedPodProxyWithPathTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String path2 = null;
        String response = api.connectCoreV1PatchNamespacedPodProxyWithPath(name, namespace, path, path2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect PATCH requests to proxy of Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectCoreV1PatchNamespacedServiceProxyTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String response = api.connectCoreV1PatchNamespacedServiceProxy(name, namespace, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect PATCH requests to proxy of Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectCoreV1PatchNamespacedServiceProxyWithPathTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String path2 = null;
        String response = api.connectCoreV1PatchNamespacedServiceProxyWithPath(name, namespace, path, path2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect PATCH requests to proxy of Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectCoreV1PatchNodeProxyTest() throws ApiException {
        String name = null;
        String path = null;
        String response = api.connectCoreV1PatchNodeProxy(name, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect PATCH requests to proxy of Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectCoreV1PatchNodeProxyWithPathTest() throws ApiException {
        String name = null;
        String path = null;
        String path2 = null;
        String response = api.connectCoreV1PatchNodeProxyWithPath(name, path, path2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect POST requests to attach of Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectCoreV1PostNamespacedPodAttachTest() throws ApiException {
        String name = null;
        String namespace = null;
        String container = null;
        Boolean stderr = null;
        Boolean stdin = null;
        Boolean stdout = null;
        Boolean tty = null;
        String response = api.connectCoreV1PostNamespacedPodAttach(name, namespace, container, stderr, stdin, stdout, tty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect POST requests to exec of Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectCoreV1PostNamespacedPodExecTest() throws ApiException {
        String name = null;
        String namespace = null;
        String command = null;
        String container = null;
        Boolean stderr = null;
        Boolean stdin = null;
        Boolean stdout = null;
        Boolean tty = null;
        String response = api.connectCoreV1PostNamespacedPodExec(name, namespace, command, container, stderr, stdin, stdout, tty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect POST requests to portforward of Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectCoreV1PostNamespacedPodPortforwardTest() throws ApiException {
        String name = null;
        String namespace = null;
        Integer ports = null;
        String response = api.connectCoreV1PostNamespacedPodPortforward(name, namespace, ports);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect POST requests to proxy of Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectCoreV1PostNamespacedPodProxyTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String response = api.connectCoreV1PostNamespacedPodProxy(name, namespace, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect POST requests to proxy of Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectCoreV1PostNamespacedPodProxyWithPathTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String path2 = null;
        String response = api.connectCoreV1PostNamespacedPodProxyWithPath(name, namespace, path, path2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect POST requests to proxy of Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectCoreV1PostNamespacedServiceProxyTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String response = api.connectCoreV1PostNamespacedServiceProxy(name, namespace, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect POST requests to proxy of Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectCoreV1PostNamespacedServiceProxyWithPathTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String path2 = null;
        String response = api.connectCoreV1PostNamespacedServiceProxyWithPath(name, namespace, path, path2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect POST requests to proxy of Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectCoreV1PostNodeProxyTest() throws ApiException {
        String name = null;
        String path = null;
        String response = api.connectCoreV1PostNodeProxy(name, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect POST requests to proxy of Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectCoreV1PostNodeProxyWithPathTest() throws ApiException {
        String name = null;
        String path = null;
        String path2 = null;
        String response = api.connectCoreV1PostNodeProxyWithPath(name, path, path2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect PUT requests to proxy of Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectCoreV1PutNamespacedPodProxyTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String response = api.connectCoreV1PutNamespacedPodProxy(name, namespace, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect PUT requests to proxy of Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectCoreV1PutNamespacedPodProxyWithPathTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String path2 = null;
        String response = api.connectCoreV1PutNamespacedPodProxyWithPath(name, namespace, path, path2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect PUT requests to proxy of Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectCoreV1PutNamespacedServiceProxyTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String response = api.connectCoreV1PutNamespacedServiceProxy(name, namespace, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect PUT requests to proxy of Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectCoreV1PutNamespacedServiceProxyWithPathTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String path2 = null;
        String response = api.connectCoreV1PutNamespacedServiceProxyWithPath(name, namespace, path, path2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect PUT requests to proxy of Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectCoreV1PutNodeProxyTest() throws ApiException {
        String name = null;
        String path = null;
        String response = api.connectCoreV1PutNodeProxy(name, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect PUT requests to proxy of Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectCoreV1PutNodeProxyWithPathTest() throws ApiException {
        String name = null;
        String path = null;
        String path2 = null;
        String response = api.connectCoreV1PutNodeProxyWithPath(name, path, path2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a Namespace
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCoreV1NamespaceTest() throws ApiException {
        IoK8sApiCoreV1Namespace body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoK8sApiCoreV1Namespace response = api.createCoreV1Namespace(body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a Binding
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCoreV1NamespacedBindingTest() throws ApiException {
        String namespace = null;
        IoK8sApiCoreV1Binding body = null;
        String dryRun = null;
        String fieldManager = null;
        String pretty = null;
        IoK8sApiCoreV1Binding response = api.createCoreV1NamespacedBinding(namespace, body, dryRun, fieldManager, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a ConfigMap
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCoreV1NamespacedConfigMapTest() throws ApiException {
        String namespace = null;
        IoK8sApiCoreV1ConfigMap body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoK8sApiCoreV1ConfigMap response = api.createCoreV1NamespacedConfigMap(namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create Endpoints
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCoreV1NamespacedEndpointsTest() throws ApiException {
        String namespace = null;
        IoK8sApiCoreV1Endpoints body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoK8sApiCoreV1Endpoints response = api.createCoreV1NamespacedEndpoints(namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create an Event
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCoreV1NamespacedEventTest() throws ApiException {
        String namespace = null;
        IoK8sApiCoreV1Event body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoK8sApiCoreV1Event response = api.createCoreV1NamespacedEvent(namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a LimitRange
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCoreV1NamespacedLimitRangeTest() throws ApiException {
        String namespace = null;
        IoK8sApiCoreV1LimitRange body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoK8sApiCoreV1LimitRange response = api.createCoreV1NamespacedLimitRange(namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a PersistentVolumeClaim
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCoreV1NamespacedPersistentVolumeClaimTest() throws ApiException {
        String namespace = null;
        IoK8sApiCoreV1PersistentVolumeClaim body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoK8sApiCoreV1PersistentVolumeClaim response = api.createCoreV1NamespacedPersistentVolumeClaim(namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCoreV1NamespacedPodTest() throws ApiException {
        String namespace = null;
        IoK8sApiCoreV1Pod body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoK8sApiCoreV1Pod response = api.createCoreV1NamespacedPod(namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create binding of a Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCoreV1NamespacedPodBindingTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApiCoreV1Binding body = null;
        String dryRun = null;
        String fieldManager = null;
        String pretty = null;
        IoK8sApiCoreV1Binding response = api.createCoreV1NamespacedPodBinding(name, namespace, body, dryRun, fieldManager, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create eviction of a Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCoreV1NamespacedPodEvictionTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApiPolicyV1beta1Eviction body = null;
        String dryRun = null;
        String fieldManager = null;
        String pretty = null;
        IoK8sApiPolicyV1beta1Eviction response = api.createCoreV1NamespacedPodEviction(name, namespace, body, dryRun, fieldManager, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a PodTemplate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCoreV1NamespacedPodTemplateTest() throws ApiException {
        String namespace = null;
        IoK8sApiCoreV1PodTemplate body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoK8sApiCoreV1PodTemplate response = api.createCoreV1NamespacedPodTemplate(namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a ReplicationController
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCoreV1NamespacedReplicationControllerTest() throws ApiException {
        String namespace = null;
        IoK8sApiCoreV1ReplicationController body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoK8sApiCoreV1ReplicationController response = api.createCoreV1NamespacedReplicationController(namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a ResourceQuota
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCoreV1NamespacedResourceQuotaTest() throws ApiException {
        String namespace = null;
        IoK8sApiCoreV1ResourceQuota body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoK8sApiCoreV1ResourceQuota response = api.createCoreV1NamespacedResourceQuota(namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a Secret
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCoreV1NamespacedSecretTest() throws ApiException {
        String namespace = null;
        IoK8sApiCoreV1Secret body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoK8sApiCoreV1Secret response = api.createCoreV1NamespacedSecret(namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCoreV1NamespacedServiceTest() throws ApiException {
        String namespace = null;
        IoK8sApiCoreV1Service body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoK8sApiCoreV1Service response = api.createCoreV1NamespacedService(namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a ServiceAccount
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCoreV1NamespacedServiceAccountTest() throws ApiException {
        String namespace = null;
        IoK8sApiCoreV1ServiceAccount body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoK8sApiCoreV1ServiceAccount response = api.createCoreV1NamespacedServiceAccount(namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCoreV1NodeTest() throws ApiException {
        IoK8sApiCoreV1Node body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoK8sApiCoreV1Node response = api.createCoreV1Node(body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a PersistentVolume
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCoreV1PersistentVolumeTest() throws ApiException {
        IoK8sApiCoreV1PersistentVolume body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoK8sApiCoreV1PersistentVolume response = api.createCoreV1PersistentVolume(body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of ConfigMap
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCoreV1CollectionNamespacedConfigMapTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String _continue = null;
        String dryRun = null;
        String fieldSelector = null;
        Integer gracePeriodSeconds = null;
        String labelSelector = null;
        Integer limit = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteCoreV1CollectionNamespacedConfigMap(namespace, pretty, allowWatchBookmarks, body, _continue, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of Endpoints
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCoreV1CollectionNamespacedEndpointsTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String _continue = null;
        String dryRun = null;
        String fieldSelector = null;
        Integer gracePeriodSeconds = null;
        String labelSelector = null;
        Integer limit = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteCoreV1CollectionNamespacedEndpoints(namespace, pretty, allowWatchBookmarks, body, _continue, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of Event
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCoreV1CollectionNamespacedEventTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String _continue = null;
        String dryRun = null;
        String fieldSelector = null;
        Integer gracePeriodSeconds = null;
        String labelSelector = null;
        Integer limit = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteCoreV1CollectionNamespacedEvent(namespace, pretty, allowWatchBookmarks, body, _continue, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of LimitRange
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCoreV1CollectionNamespacedLimitRangeTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String _continue = null;
        String dryRun = null;
        String fieldSelector = null;
        Integer gracePeriodSeconds = null;
        String labelSelector = null;
        Integer limit = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteCoreV1CollectionNamespacedLimitRange(namespace, pretty, allowWatchBookmarks, body, _continue, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of PersistentVolumeClaim
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCoreV1CollectionNamespacedPersistentVolumeClaimTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String _continue = null;
        String dryRun = null;
        String fieldSelector = null;
        Integer gracePeriodSeconds = null;
        String labelSelector = null;
        Integer limit = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteCoreV1CollectionNamespacedPersistentVolumeClaim(namespace, pretty, allowWatchBookmarks, body, _continue, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCoreV1CollectionNamespacedPodTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String _continue = null;
        String dryRun = null;
        String fieldSelector = null;
        Integer gracePeriodSeconds = null;
        String labelSelector = null;
        Integer limit = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteCoreV1CollectionNamespacedPod(namespace, pretty, allowWatchBookmarks, body, _continue, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of PodTemplate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCoreV1CollectionNamespacedPodTemplateTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String _continue = null;
        String dryRun = null;
        String fieldSelector = null;
        Integer gracePeriodSeconds = null;
        String labelSelector = null;
        Integer limit = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteCoreV1CollectionNamespacedPodTemplate(namespace, pretty, allowWatchBookmarks, body, _continue, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of ReplicationController
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCoreV1CollectionNamespacedReplicationControllerTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String _continue = null;
        String dryRun = null;
        String fieldSelector = null;
        Integer gracePeriodSeconds = null;
        String labelSelector = null;
        Integer limit = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteCoreV1CollectionNamespacedReplicationController(namespace, pretty, allowWatchBookmarks, body, _continue, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of ResourceQuota
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCoreV1CollectionNamespacedResourceQuotaTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String _continue = null;
        String dryRun = null;
        String fieldSelector = null;
        Integer gracePeriodSeconds = null;
        String labelSelector = null;
        Integer limit = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteCoreV1CollectionNamespacedResourceQuota(namespace, pretty, allowWatchBookmarks, body, _continue, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of Secret
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCoreV1CollectionNamespacedSecretTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String _continue = null;
        String dryRun = null;
        String fieldSelector = null;
        Integer gracePeriodSeconds = null;
        String labelSelector = null;
        Integer limit = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteCoreV1CollectionNamespacedSecret(namespace, pretty, allowWatchBookmarks, body, _continue, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of ServiceAccount
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCoreV1CollectionNamespacedServiceAccountTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String _continue = null;
        String dryRun = null;
        String fieldSelector = null;
        Integer gracePeriodSeconds = null;
        String labelSelector = null;
        Integer limit = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteCoreV1CollectionNamespacedServiceAccount(namespace, pretty, allowWatchBookmarks, body, _continue, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCoreV1CollectionNodeTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String _continue = null;
        String dryRun = null;
        String fieldSelector = null;
        Integer gracePeriodSeconds = null;
        String labelSelector = null;
        Integer limit = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteCoreV1CollectionNode(pretty, allowWatchBookmarks, body, _continue, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of PersistentVolume
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCoreV1CollectionPersistentVolumeTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String _continue = null;
        String dryRun = null;
        String fieldSelector = null;
        Integer gracePeriodSeconds = null;
        String labelSelector = null;
        Integer limit = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteCoreV1CollectionPersistentVolume(pretty, allowWatchBookmarks, body, _continue, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a Namespace
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCoreV1NamespaceTest() throws ApiException {
        String name = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteCoreV1Namespace(name, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a ConfigMap
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCoreV1NamespacedConfigMapTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteCoreV1NamespacedConfigMap(name, namespace, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete Endpoints
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCoreV1NamespacedEndpointsTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteCoreV1NamespacedEndpoints(name, namespace, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete an Event
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCoreV1NamespacedEventTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteCoreV1NamespacedEvent(name, namespace, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a LimitRange
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCoreV1NamespacedLimitRangeTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteCoreV1NamespacedLimitRange(name, namespace, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a PersistentVolumeClaim
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCoreV1NamespacedPersistentVolumeClaimTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteCoreV1NamespacedPersistentVolumeClaim(name, namespace, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCoreV1NamespacedPodTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteCoreV1NamespacedPod(name, namespace, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a PodTemplate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCoreV1NamespacedPodTemplateTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteCoreV1NamespacedPodTemplate(name, namespace, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a ReplicationController
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCoreV1NamespacedReplicationControllerTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteCoreV1NamespacedReplicationController(name, namespace, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a ResourceQuota
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCoreV1NamespacedResourceQuotaTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteCoreV1NamespacedResourceQuota(name, namespace, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a Secret
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCoreV1NamespacedSecretTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteCoreV1NamespacedSecret(name, namespace, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCoreV1NamespacedServiceTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteCoreV1NamespacedService(name, namespace, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a ServiceAccount
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCoreV1NamespacedServiceAccountTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteCoreV1NamespacedServiceAccount(name, namespace, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCoreV1NodeTest() throws ApiException {
        String name = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteCoreV1Node(name, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a PersistentVolume
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCoreV1PersistentVolumeTest() throws ApiException {
        String name = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteCoreV1PersistentVolume(name, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * get available resources
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCoreV1APIResourcesTest() throws ApiException {
        IoK8sApimachineryPkgApisMetaV1APIResourceList response = api.getCoreV1APIResources();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind ComponentStatus
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCoreV1ComponentStatusTest() throws ApiException {
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApiCoreV1ComponentStatusList response = api.listCoreV1ComponentStatus(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind ConfigMap
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCoreV1ConfigMapForAllNamespacesTest() throws ApiException {
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApiCoreV1ConfigMapList response = api.listCoreV1ConfigMapForAllNamespaces(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Endpoints
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCoreV1EndpointsForAllNamespacesTest() throws ApiException {
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApiCoreV1EndpointsList response = api.listCoreV1EndpointsForAllNamespaces(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Event
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCoreV1EventForAllNamespacesTest() throws ApiException {
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApiCoreV1EventList response = api.listCoreV1EventForAllNamespaces(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind LimitRange
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCoreV1LimitRangeForAllNamespacesTest() throws ApiException {
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApiCoreV1LimitRangeList response = api.listCoreV1LimitRangeForAllNamespaces(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Namespace
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCoreV1NamespaceTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApiCoreV1NamespaceList response = api.listCoreV1Namespace(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind ConfigMap
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCoreV1NamespacedConfigMapTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApiCoreV1ConfigMapList response = api.listCoreV1NamespacedConfigMap(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Endpoints
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCoreV1NamespacedEndpointsTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApiCoreV1EndpointsList response = api.listCoreV1NamespacedEndpoints(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Event
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCoreV1NamespacedEventTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApiCoreV1EventList response = api.listCoreV1NamespacedEvent(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind LimitRange
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCoreV1NamespacedLimitRangeTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApiCoreV1LimitRangeList response = api.listCoreV1NamespacedLimitRange(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind PersistentVolumeClaim
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCoreV1NamespacedPersistentVolumeClaimTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApiCoreV1PersistentVolumeClaimList response = api.listCoreV1NamespacedPersistentVolumeClaim(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCoreV1NamespacedPodTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApiCoreV1PodList response = api.listCoreV1NamespacedPod(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind PodTemplate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCoreV1NamespacedPodTemplateTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApiCoreV1PodTemplateList response = api.listCoreV1NamespacedPodTemplate(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind ReplicationController
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCoreV1NamespacedReplicationControllerTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApiCoreV1ReplicationControllerList response = api.listCoreV1NamespacedReplicationController(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind ResourceQuota
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCoreV1NamespacedResourceQuotaTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApiCoreV1ResourceQuotaList response = api.listCoreV1NamespacedResourceQuota(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Secret
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCoreV1NamespacedSecretTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApiCoreV1SecretList response = api.listCoreV1NamespacedSecret(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCoreV1NamespacedServiceTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApiCoreV1ServiceList response = api.listCoreV1NamespacedService(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind ServiceAccount
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCoreV1NamespacedServiceAccountTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApiCoreV1ServiceAccountList response = api.listCoreV1NamespacedServiceAccount(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCoreV1NodeTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApiCoreV1NodeList response = api.listCoreV1Node(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind PersistentVolume
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCoreV1PersistentVolumeTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApiCoreV1PersistentVolumeList response = api.listCoreV1PersistentVolume(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind PersistentVolumeClaim
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCoreV1PersistentVolumeClaimForAllNamespacesTest() throws ApiException {
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApiCoreV1PersistentVolumeClaimList response = api.listCoreV1PersistentVolumeClaimForAllNamespaces(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCoreV1PodForAllNamespacesTest() throws ApiException {
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApiCoreV1PodList response = api.listCoreV1PodForAllNamespaces(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind PodTemplate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCoreV1PodTemplateForAllNamespacesTest() throws ApiException {
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApiCoreV1PodTemplateList response = api.listCoreV1PodTemplateForAllNamespaces(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind ReplicationController
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCoreV1ReplicationControllerForAllNamespacesTest() throws ApiException {
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApiCoreV1ReplicationControllerList response = api.listCoreV1ReplicationControllerForAllNamespaces(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind ResourceQuota
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCoreV1ResourceQuotaForAllNamespacesTest() throws ApiException {
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApiCoreV1ResourceQuotaList response = api.listCoreV1ResourceQuotaForAllNamespaces(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Secret
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCoreV1SecretForAllNamespacesTest() throws ApiException {
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApiCoreV1SecretList response = api.listCoreV1SecretForAllNamespaces(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind ServiceAccount
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCoreV1ServiceAccountForAllNamespacesTest() throws ApiException {
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApiCoreV1ServiceAccountList response = api.listCoreV1ServiceAccountForAllNamespaces(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCoreV1ServiceForAllNamespacesTest() throws ApiException {
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApiCoreV1ServiceList response = api.listCoreV1ServiceForAllNamespaces(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified Namespace
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchCoreV1NamespaceTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        Boolean force = null;
        IoK8sApiCoreV1Namespace response = api.patchCoreV1Namespace(name, body, pretty, dryRun, fieldManager, force);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified Namespace
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchCoreV1NamespaceStatusTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        Boolean force = null;
        IoK8sApiCoreV1Namespace response = api.patchCoreV1NamespaceStatus(name, body, pretty, dryRun, fieldManager, force);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified ConfigMap
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchCoreV1NamespacedConfigMapTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        Boolean force = null;
        IoK8sApiCoreV1ConfigMap response = api.patchCoreV1NamespacedConfigMap(name, namespace, body, pretty, dryRun, fieldManager, force);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified Endpoints
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchCoreV1NamespacedEndpointsTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        Boolean force = null;
        IoK8sApiCoreV1Endpoints response = api.patchCoreV1NamespacedEndpoints(name, namespace, body, pretty, dryRun, fieldManager, force);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified Event
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchCoreV1NamespacedEventTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        Boolean force = null;
        IoK8sApiCoreV1Event response = api.patchCoreV1NamespacedEvent(name, namespace, body, pretty, dryRun, fieldManager, force);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified LimitRange
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchCoreV1NamespacedLimitRangeTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        Boolean force = null;
        IoK8sApiCoreV1LimitRange response = api.patchCoreV1NamespacedLimitRange(name, namespace, body, pretty, dryRun, fieldManager, force);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified PersistentVolumeClaim
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchCoreV1NamespacedPersistentVolumeClaimTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        Boolean force = null;
        IoK8sApiCoreV1PersistentVolumeClaim response = api.patchCoreV1NamespacedPersistentVolumeClaim(name, namespace, body, pretty, dryRun, fieldManager, force);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified PersistentVolumeClaim
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchCoreV1NamespacedPersistentVolumeClaimStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        Boolean force = null;
        IoK8sApiCoreV1PersistentVolumeClaim response = api.patchCoreV1NamespacedPersistentVolumeClaimStatus(name, namespace, body, pretty, dryRun, fieldManager, force);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchCoreV1NamespacedPodTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        Boolean force = null;
        IoK8sApiCoreV1Pod response = api.patchCoreV1NamespacedPod(name, namespace, body, pretty, dryRun, fieldManager, force);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchCoreV1NamespacedPodStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        Boolean force = null;
        IoK8sApiCoreV1Pod response = api.patchCoreV1NamespacedPodStatus(name, namespace, body, pretty, dryRun, fieldManager, force);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified PodTemplate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchCoreV1NamespacedPodTemplateTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        Boolean force = null;
        IoK8sApiCoreV1PodTemplate response = api.patchCoreV1NamespacedPodTemplate(name, namespace, body, pretty, dryRun, fieldManager, force);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified ReplicationController
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchCoreV1NamespacedReplicationControllerTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        Boolean force = null;
        IoK8sApiCoreV1ReplicationController response = api.patchCoreV1NamespacedReplicationController(name, namespace, body, pretty, dryRun, fieldManager, force);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update scale of the specified ReplicationController
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchCoreV1NamespacedReplicationControllerScaleTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        Boolean force = null;
        IoK8sApiAutoscalingV1Scale response = api.patchCoreV1NamespacedReplicationControllerScale(name, namespace, body, pretty, dryRun, fieldManager, force);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified ReplicationController
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchCoreV1NamespacedReplicationControllerStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        Boolean force = null;
        IoK8sApiCoreV1ReplicationController response = api.patchCoreV1NamespacedReplicationControllerStatus(name, namespace, body, pretty, dryRun, fieldManager, force);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified ResourceQuota
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchCoreV1NamespacedResourceQuotaTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        Boolean force = null;
        IoK8sApiCoreV1ResourceQuota response = api.patchCoreV1NamespacedResourceQuota(name, namespace, body, pretty, dryRun, fieldManager, force);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified ResourceQuota
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchCoreV1NamespacedResourceQuotaStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        Boolean force = null;
        IoK8sApiCoreV1ResourceQuota response = api.patchCoreV1NamespacedResourceQuotaStatus(name, namespace, body, pretty, dryRun, fieldManager, force);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified Secret
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchCoreV1NamespacedSecretTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        Boolean force = null;
        IoK8sApiCoreV1Secret response = api.patchCoreV1NamespacedSecret(name, namespace, body, pretty, dryRun, fieldManager, force);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchCoreV1NamespacedServiceTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        Boolean force = null;
        IoK8sApiCoreV1Service response = api.patchCoreV1NamespacedService(name, namespace, body, pretty, dryRun, fieldManager, force);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified ServiceAccount
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchCoreV1NamespacedServiceAccountTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        Boolean force = null;
        IoK8sApiCoreV1ServiceAccount response = api.patchCoreV1NamespacedServiceAccount(name, namespace, body, pretty, dryRun, fieldManager, force);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchCoreV1NamespacedServiceStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        Boolean force = null;
        IoK8sApiCoreV1Service response = api.patchCoreV1NamespacedServiceStatus(name, namespace, body, pretty, dryRun, fieldManager, force);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchCoreV1NodeTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        Boolean force = null;
        IoK8sApiCoreV1Node response = api.patchCoreV1Node(name, body, pretty, dryRun, fieldManager, force);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchCoreV1NodeStatusTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        Boolean force = null;
        IoK8sApiCoreV1Node response = api.patchCoreV1NodeStatus(name, body, pretty, dryRun, fieldManager, force);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified PersistentVolume
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchCoreV1PersistentVolumeTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        Boolean force = null;
        IoK8sApiCoreV1PersistentVolume response = api.patchCoreV1PersistentVolume(name, body, pretty, dryRun, fieldManager, force);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified PersistentVolume
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchCoreV1PersistentVolumeStatusTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        Boolean force = null;
        IoK8sApiCoreV1PersistentVolume response = api.patchCoreV1PersistentVolumeStatus(name, body, pretty, dryRun, fieldManager, force);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified ComponentStatus
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readCoreV1ComponentStatusTest() throws ApiException {
        String name = null;
        String pretty = null;
        IoK8sApiCoreV1ComponentStatus response = api.readCoreV1ComponentStatus(name, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified Namespace
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readCoreV1NamespaceTest() throws ApiException {
        String name = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        IoK8sApiCoreV1Namespace response = api.readCoreV1Namespace(name, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified Namespace
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readCoreV1NamespaceStatusTest() throws ApiException {
        String name = null;
        String pretty = null;
        IoK8sApiCoreV1Namespace response = api.readCoreV1NamespaceStatus(name, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified ConfigMap
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readCoreV1NamespacedConfigMapTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        IoK8sApiCoreV1ConfigMap response = api.readCoreV1NamespacedConfigMap(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified Endpoints
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readCoreV1NamespacedEndpointsTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        IoK8sApiCoreV1Endpoints response = api.readCoreV1NamespacedEndpoints(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified Event
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readCoreV1NamespacedEventTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        IoK8sApiCoreV1Event response = api.readCoreV1NamespacedEvent(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified LimitRange
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readCoreV1NamespacedLimitRangeTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        IoK8sApiCoreV1LimitRange response = api.readCoreV1NamespacedLimitRange(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified PersistentVolumeClaim
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readCoreV1NamespacedPersistentVolumeClaimTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        IoK8sApiCoreV1PersistentVolumeClaim response = api.readCoreV1NamespacedPersistentVolumeClaim(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified PersistentVolumeClaim
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readCoreV1NamespacedPersistentVolumeClaimStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        IoK8sApiCoreV1PersistentVolumeClaim response = api.readCoreV1NamespacedPersistentVolumeClaimStatus(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readCoreV1NamespacedPodTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        IoK8sApiCoreV1Pod response = api.readCoreV1NamespacedPod(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read log of the specified Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readCoreV1NamespacedPodLogTest() throws ApiException {
        String name = null;
        String namespace = null;
        String container = null;
        Boolean follow = null;
        Boolean insecureSkipTLSVerifyBackend = null;
        Integer limitBytes = null;
        String pretty = null;
        Boolean previous = null;
        Integer sinceSeconds = null;
        Integer tailLines = null;
        Boolean timestamps = null;
        String response = api.readCoreV1NamespacedPodLog(name, namespace, container, follow, insecureSkipTLSVerifyBackend, limitBytes, pretty, previous, sinceSeconds, tailLines, timestamps);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readCoreV1NamespacedPodStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        IoK8sApiCoreV1Pod response = api.readCoreV1NamespacedPodStatus(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified PodTemplate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readCoreV1NamespacedPodTemplateTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        IoK8sApiCoreV1PodTemplate response = api.readCoreV1NamespacedPodTemplate(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified ReplicationController
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readCoreV1NamespacedReplicationControllerTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        IoK8sApiCoreV1ReplicationController response = api.readCoreV1NamespacedReplicationController(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read scale of the specified ReplicationController
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readCoreV1NamespacedReplicationControllerScaleTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        IoK8sApiAutoscalingV1Scale response = api.readCoreV1NamespacedReplicationControllerScale(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified ReplicationController
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readCoreV1NamespacedReplicationControllerStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        IoK8sApiCoreV1ReplicationController response = api.readCoreV1NamespacedReplicationControllerStatus(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified ResourceQuota
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readCoreV1NamespacedResourceQuotaTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        IoK8sApiCoreV1ResourceQuota response = api.readCoreV1NamespacedResourceQuota(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified ResourceQuota
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readCoreV1NamespacedResourceQuotaStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        IoK8sApiCoreV1ResourceQuota response = api.readCoreV1NamespacedResourceQuotaStatus(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified Secret
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readCoreV1NamespacedSecretTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        IoK8sApiCoreV1Secret response = api.readCoreV1NamespacedSecret(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readCoreV1NamespacedServiceTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        IoK8sApiCoreV1Service response = api.readCoreV1NamespacedService(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified ServiceAccount
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readCoreV1NamespacedServiceAccountTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        IoK8sApiCoreV1ServiceAccount response = api.readCoreV1NamespacedServiceAccount(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readCoreV1NamespacedServiceStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        IoK8sApiCoreV1Service response = api.readCoreV1NamespacedServiceStatus(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readCoreV1NodeTest() throws ApiException {
        String name = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        IoK8sApiCoreV1Node response = api.readCoreV1Node(name, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readCoreV1NodeStatusTest() throws ApiException {
        String name = null;
        String pretty = null;
        IoK8sApiCoreV1Node response = api.readCoreV1NodeStatus(name, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified PersistentVolume
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readCoreV1PersistentVolumeTest() throws ApiException {
        String name = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        IoK8sApiCoreV1PersistentVolume response = api.readCoreV1PersistentVolume(name, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified PersistentVolume
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readCoreV1PersistentVolumeStatusTest() throws ApiException {
        String name = null;
        String pretty = null;
        IoK8sApiCoreV1PersistentVolume response = api.readCoreV1PersistentVolumeStatus(name, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified Namespace
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceCoreV1NamespaceTest() throws ApiException {
        String name = null;
        IoK8sApiCoreV1Namespace body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoK8sApiCoreV1Namespace response = api.replaceCoreV1Namespace(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace finalize of the specified Namespace
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceCoreV1NamespaceFinalizeTest() throws ApiException {
        String name = null;
        IoK8sApiCoreV1Namespace body = null;
        String dryRun = null;
        String fieldManager = null;
        String pretty = null;
        IoK8sApiCoreV1Namespace response = api.replaceCoreV1NamespaceFinalize(name, body, dryRun, fieldManager, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified Namespace
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceCoreV1NamespaceStatusTest() throws ApiException {
        String name = null;
        IoK8sApiCoreV1Namespace body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoK8sApiCoreV1Namespace response = api.replaceCoreV1NamespaceStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified ConfigMap
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceCoreV1NamespacedConfigMapTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApiCoreV1ConfigMap body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoK8sApiCoreV1ConfigMap response = api.replaceCoreV1NamespacedConfigMap(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified Endpoints
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceCoreV1NamespacedEndpointsTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApiCoreV1Endpoints body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoK8sApiCoreV1Endpoints response = api.replaceCoreV1NamespacedEndpoints(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified Event
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceCoreV1NamespacedEventTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApiCoreV1Event body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoK8sApiCoreV1Event response = api.replaceCoreV1NamespacedEvent(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified LimitRange
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceCoreV1NamespacedLimitRangeTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApiCoreV1LimitRange body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoK8sApiCoreV1LimitRange response = api.replaceCoreV1NamespacedLimitRange(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified PersistentVolumeClaim
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceCoreV1NamespacedPersistentVolumeClaimTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApiCoreV1PersistentVolumeClaim body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoK8sApiCoreV1PersistentVolumeClaim response = api.replaceCoreV1NamespacedPersistentVolumeClaim(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified PersistentVolumeClaim
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceCoreV1NamespacedPersistentVolumeClaimStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApiCoreV1PersistentVolumeClaim body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoK8sApiCoreV1PersistentVolumeClaim response = api.replaceCoreV1NamespacedPersistentVolumeClaimStatus(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceCoreV1NamespacedPodTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApiCoreV1Pod body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoK8sApiCoreV1Pod response = api.replaceCoreV1NamespacedPod(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified Pod
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceCoreV1NamespacedPodStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApiCoreV1Pod body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoK8sApiCoreV1Pod response = api.replaceCoreV1NamespacedPodStatus(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified PodTemplate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceCoreV1NamespacedPodTemplateTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApiCoreV1PodTemplate body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoK8sApiCoreV1PodTemplate response = api.replaceCoreV1NamespacedPodTemplate(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified ReplicationController
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceCoreV1NamespacedReplicationControllerTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApiCoreV1ReplicationController body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoK8sApiCoreV1ReplicationController response = api.replaceCoreV1NamespacedReplicationController(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace scale of the specified ReplicationController
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceCoreV1NamespacedReplicationControllerScaleTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApiAutoscalingV1Scale body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoK8sApiAutoscalingV1Scale response = api.replaceCoreV1NamespacedReplicationControllerScale(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified ReplicationController
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceCoreV1NamespacedReplicationControllerStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApiCoreV1ReplicationController body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoK8sApiCoreV1ReplicationController response = api.replaceCoreV1NamespacedReplicationControllerStatus(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified ResourceQuota
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceCoreV1NamespacedResourceQuotaTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApiCoreV1ResourceQuota body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoK8sApiCoreV1ResourceQuota response = api.replaceCoreV1NamespacedResourceQuota(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified ResourceQuota
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceCoreV1NamespacedResourceQuotaStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApiCoreV1ResourceQuota body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoK8sApiCoreV1ResourceQuota response = api.replaceCoreV1NamespacedResourceQuotaStatus(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified Secret
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceCoreV1NamespacedSecretTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApiCoreV1Secret body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoK8sApiCoreV1Secret response = api.replaceCoreV1NamespacedSecret(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceCoreV1NamespacedServiceTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApiCoreV1Service body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoK8sApiCoreV1Service response = api.replaceCoreV1NamespacedService(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified ServiceAccount
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceCoreV1NamespacedServiceAccountTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApiCoreV1ServiceAccount body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoK8sApiCoreV1ServiceAccount response = api.replaceCoreV1NamespacedServiceAccount(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified Service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceCoreV1NamespacedServiceStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApiCoreV1Service body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoK8sApiCoreV1Service response = api.replaceCoreV1NamespacedServiceStatus(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceCoreV1NodeTest() throws ApiException {
        String name = null;
        IoK8sApiCoreV1Node body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoK8sApiCoreV1Node response = api.replaceCoreV1Node(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceCoreV1NodeStatusTest() throws ApiException {
        String name = null;
        IoK8sApiCoreV1Node body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoK8sApiCoreV1Node response = api.replaceCoreV1NodeStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified PersistentVolume
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceCoreV1PersistentVolumeTest() throws ApiException {
        String name = null;
        IoK8sApiCoreV1PersistentVolume body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoK8sApiCoreV1PersistentVolume response = api.replaceCoreV1PersistentVolume(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified PersistentVolume
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceCoreV1PersistentVolumeStatusTest() throws ApiException {
        String name = null;
        IoK8sApiCoreV1PersistentVolume body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoK8sApiCoreV1PersistentVolume response = api.replaceCoreV1PersistentVolumeStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of ConfigMap. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchCoreV1ConfigMapListForAllNamespacesTest() throws ApiException {
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchCoreV1ConfigMapListForAllNamespaces(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of Endpoints. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchCoreV1EndpointsListForAllNamespacesTest() throws ApiException {
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchCoreV1EndpointsListForAllNamespaces(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of Event. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchCoreV1EventListForAllNamespacesTest() throws ApiException {
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchCoreV1EventListForAllNamespaces(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of LimitRange. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchCoreV1LimitRangeListForAllNamespacesTest() throws ApiException {
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchCoreV1LimitRangeListForAllNamespaces(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind Namespace. deprecated: use the &#39;watch&#39; parameter with a list operation instead, filtered to a single item with the &#39;fieldSelector&#39; parameter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchCoreV1NamespaceTest() throws ApiException {
        String name = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchCoreV1Namespace(name, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of Namespace. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchCoreV1NamespaceListTest() throws ApiException {
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchCoreV1NamespaceList(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind ConfigMap. deprecated: use the &#39;watch&#39; parameter with a list operation instead, filtered to a single item with the &#39;fieldSelector&#39; parameter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchCoreV1NamespacedConfigMapTest() throws ApiException {
        String name = null;
        String namespace = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchCoreV1NamespacedConfigMap(name, namespace, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of ConfigMap. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchCoreV1NamespacedConfigMapListTest() throws ApiException {
        String namespace = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchCoreV1NamespacedConfigMapList(namespace, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind Endpoints. deprecated: use the &#39;watch&#39; parameter with a list operation instead, filtered to a single item with the &#39;fieldSelector&#39; parameter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchCoreV1NamespacedEndpointsTest() throws ApiException {
        String name = null;
        String namespace = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchCoreV1NamespacedEndpoints(name, namespace, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of Endpoints. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchCoreV1NamespacedEndpointsListTest() throws ApiException {
        String namespace = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchCoreV1NamespacedEndpointsList(namespace, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind Event. deprecated: use the &#39;watch&#39; parameter with a list operation instead, filtered to a single item with the &#39;fieldSelector&#39; parameter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchCoreV1NamespacedEventTest() throws ApiException {
        String name = null;
        String namespace = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchCoreV1NamespacedEvent(name, namespace, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of Event. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchCoreV1NamespacedEventListTest() throws ApiException {
        String namespace = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchCoreV1NamespacedEventList(namespace, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind LimitRange. deprecated: use the &#39;watch&#39; parameter with a list operation instead, filtered to a single item with the &#39;fieldSelector&#39; parameter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchCoreV1NamespacedLimitRangeTest() throws ApiException {
        String name = null;
        String namespace = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchCoreV1NamespacedLimitRange(name, namespace, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of LimitRange. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchCoreV1NamespacedLimitRangeListTest() throws ApiException {
        String namespace = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchCoreV1NamespacedLimitRangeList(namespace, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind PersistentVolumeClaim. deprecated: use the &#39;watch&#39; parameter with a list operation instead, filtered to a single item with the &#39;fieldSelector&#39; parameter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchCoreV1NamespacedPersistentVolumeClaimTest() throws ApiException {
        String name = null;
        String namespace = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchCoreV1NamespacedPersistentVolumeClaim(name, namespace, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of PersistentVolumeClaim. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchCoreV1NamespacedPersistentVolumeClaimListTest() throws ApiException {
        String namespace = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchCoreV1NamespacedPersistentVolumeClaimList(namespace, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind Pod. deprecated: use the &#39;watch&#39; parameter with a list operation instead, filtered to a single item with the &#39;fieldSelector&#39; parameter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchCoreV1NamespacedPodTest() throws ApiException {
        String name = null;
        String namespace = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchCoreV1NamespacedPod(name, namespace, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of Pod. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchCoreV1NamespacedPodListTest() throws ApiException {
        String namespace = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchCoreV1NamespacedPodList(namespace, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind PodTemplate. deprecated: use the &#39;watch&#39; parameter with a list operation instead, filtered to a single item with the &#39;fieldSelector&#39; parameter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchCoreV1NamespacedPodTemplateTest() throws ApiException {
        String name = null;
        String namespace = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchCoreV1NamespacedPodTemplate(name, namespace, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of PodTemplate. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchCoreV1NamespacedPodTemplateListTest() throws ApiException {
        String namespace = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchCoreV1NamespacedPodTemplateList(namespace, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind ReplicationController. deprecated: use the &#39;watch&#39; parameter with a list operation instead, filtered to a single item with the &#39;fieldSelector&#39; parameter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchCoreV1NamespacedReplicationControllerTest() throws ApiException {
        String name = null;
        String namespace = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchCoreV1NamespacedReplicationController(name, namespace, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of ReplicationController. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchCoreV1NamespacedReplicationControllerListTest() throws ApiException {
        String namespace = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchCoreV1NamespacedReplicationControllerList(namespace, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind ResourceQuota. deprecated: use the &#39;watch&#39; parameter with a list operation instead, filtered to a single item with the &#39;fieldSelector&#39; parameter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchCoreV1NamespacedResourceQuotaTest() throws ApiException {
        String name = null;
        String namespace = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchCoreV1NamespacedResourceQuota(name, namespace, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of ResourceQuota. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchCoreV1NamespacedResourceQuotaListTest() throws ApiException {
        String namespace = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchCoreV1NamespacedResourceQuotaList(namespace, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind Secret. deprecated: use the &#39;watch&#39; parameter with a list operation instead, filtered to a single item with the &#39;fieldSelector&#39; parameter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchCoreV1NamespacedSecretTest() throws ApiException {
        String name = null;
        String namespace = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchCoreV1NamespacedSecret(name, namespace, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of Secret. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchCoreV1NamespacedSecretListTest() throws ApiException {
        String namespace = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchCoreV1NamespacedSecretList(namespace, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind Service. deprecated: use the &#39;watch&#39; parameter with a list operation instead, filtered to a single item with the &#39;fieldSelector&#39; parameter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchCoreV1NamespacedServiceTest() throws ApiException {
        String name = null;
        String namespace = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchCoreV1NamespacedService(name, namespace, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind ServiceAccount. deprecated: use the &#39;watch&#39; parameter with a list operation instead, filtered to a single item with the &#39;fieldSelector&#39; parameter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchCoreV1NamespacedServiceAccountTest() throws ApiException {
        String name = null;
        String namespace = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchCoreV1NamespacedServiceAccount(name, namespace, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of ServiceAccount. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchCoreV1NamespacedServiceAccountListTest() throws ApiException {
        String namespace = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchCoreV1NamespacedServiceAccountList(namespace, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of Service. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchCoreV1NamespacedServiceListTest() throws ApiException {
        String namespace = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchCoreV1NamespacedServiceList(namespace, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind Node. deprecated: use the &#39;watch&#39; parameter with a list operation instead, filtered to a single item with the &#39;fieldSelector&#39; parameter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchCoreV1NodeTest() throws ApiException {
        String name = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchCoreV1Node(name, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of Node. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchCoreV1NodeListTest() throws ApiException {
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchCoreV1NodeList(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind PersistentVolume. deprecated: use the &#39;watch&#39; parameter with a list operation instead, filtered to a single item with the &#39;fieldSelector&#39; parameter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchCoreV1PersistentVolumeTest() throws ApiException {
        String name = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchCoreV1PersistentVolume(name, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of PersistentVolumeClaim. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchCoreV1PersistentVolumeClaimListForAllNamespacesTest() throws ApiException {
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchCoreV1PersistentVolumeClaimListForAllNamespaces(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of PersistentVolume. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchCoreV1PersistentVolumeListTest() throws ApiException {
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchCoreV1PersistentVolumeList(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of Pod. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchCoreV1PodListForAllNamespacesTest() throws ApiException {
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchCoreV1PodListForAllNamespaces(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of PodTemplate. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchCoreV1PodTemplateListForAllNamespacesTest() throws ApiException {
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchCoreV1PodTemplateListForAllNamespaces(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of ReplicationController. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchCoreV1ReplicationControllerListForAllNamespacesTest() throws ApiException {
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchCoreV1ReplicationControllerListForAllNamespaces(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of ResourceQuota. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchCoreV1ResourceQuotaListForAllNamespacesTest() throws ApiException {
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchCoreV1ResourceQuotaListForAllNamespaces(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of Secret. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchCoreV1SecretListForAllNamespacesTest() throws ApiException {
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchCoreV1SecretListForAllNamespaces(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of ServiceAccount. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchCoreV1ServiceAccountListForAllNamespacesTest() throws ApiException {
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchCoreV1ServiceAccountListForAllNamespaces(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of Service. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchCoreV1ServiceListForAllNamespacesTest() throws ApiException {
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchCoreV1ServiceListForAllNamespaces(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
}
