/*
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package open_cluster_management.io;

import open_cluster_management.ApiException;
import open_cluster_management.io.IoK8sApimachineryPkgApisMetaV1DeleteOptions;
import open_cluster_management.io.IoK8sApimachineryPkgApisMetaV1Patch;
import open_cluster_management.io.IoK8sApimachineryPkgApisMetaV1Status;
import open_cluster_management.io.IoOpenshiftNetworkV1ClusterNetwork;
import open_cluster_management.io.IoOpenshiftNetworkV1ClusterNetworkList;
import open_cluster_management.io.IoOpenshiftNetworkV1EgressNetworkPolicy;
import open_cluster_management.io.IoOpenshiftNetworkV1EgressNetworkPolicyList;
import open_cluster_management.io.IoOpenshiftNetworkV1HostSubnet;
import open_cluster_management.io.IoOpenshiftNetworkV1HostSubnetList;
import open_cluster_management.io.IoOpenshiftNetworkV1NetNamespace;
import open_cluster_management.io.IoOpenshiftNetworkV1NetNamespaceList;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for NetworkOpenshiftIoV1Api
 */
@Ignore
public class NetworkOpenshiftIoV1ApiTest {

    private final NetworkOpenshiftIoV1Api api = new NetworkOpenshiftIoV1Api();

    
    /**
     * 
     *
     * create a ClusterNetwork
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNetworkOpenshiftIoV1ClusterNetworkTest() throws ApiException {
        IoOpenshiftNetworkV1ClusterNetwork body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftNetworkV1ClusterNetwork response = api.createNetworkOpenshiftIoV1ClusterNetwork(body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a HostSubnet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNetworkOpenshiftIoV1HostSubnetTest() throws ApiException {
        IoOpenshiftNetworkV1HostSubnet body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftNetworkV1HostSubnet response = api.createNetworkOpenshiftIoV1HostSubnet(body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create an EgressNetworkPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyTest() throws ApiException {
        String namespace = null;
        IoOpenshiftNetworkV1EgressNetworkPolicy body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftNetworkV1EgressNetworkPolicy response = api.createNetworkOpenshiftIoV1NamespacedEgressNetworkPolicy(namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a NetNamespace
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNetworkOpenshiftIoV1NetNamespaceTest() throws ApiException {
        IoOpenshiftNetworkV1NetNamespace body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftNetworkV1NetNamespace response = api.createNetworkOpenshiftIoV1NetNamespace(body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a ClusterNetwork
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNetworkOpenshiftIoV1ClusterNetworkTest() throws ApiException {
        String name = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteNetworkOpenshiftIoV1ClusterNetwork(name, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of ClusterNetwork
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNetworkOpenshiftIoV1CollectionClusterNetworkTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteNetworkOpenshiftIoV1CollectionClusterNetwork(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of HostSubnet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNetworkOpenshiftIoV1CollectionHostSubnetTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteNetworkOpenshiftIoV1CollectionHostSubnet(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of EgressNetworkPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNetworkOpenshiftIoV1CollectionNamespacedEgressNetworkPolicyTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteNetworkOpenshiftIoV1CollectionNamespacedEgressNetworkPolicy(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of NetNamespace
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNetworkOpenshiftIoV1CollectionNetNamespaceTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteNetworkOpenshiftIoV1CollectionNetNamespace(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a HostSubnet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNetworkOpenshiftIoV1HostSubnetTest() throws ApiException {
        String name = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteNetworkOpenshiftIoV1HostSubnet(name, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete an EgressNetworkPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteNetworkOpenshiftIoV1NamespacedEgressNetworkPolicy(name, namespace, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a NetNamespace
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNetworkOpenshiftIoV1NetNamespaceTest() throws ApiException {
        String name = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteNetworkOpenshiftIoV1NetNamespace(name, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind ClusterNetwork
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNetworkOpenshiftIoV1ClusterNetworkTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftNetworkV1ClusterNetworkList response = api.listNetworkOpenshiftIoV1ClusterNetwork(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind EgressNetworkPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNetworkOpenshiftIoV1EgressNetworkPolicyForAllNamespacesTest() throws ApiException {
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftNetworkV1EgressNetworkPolicyList response = api.listNetworkOpenshiftIoV1EgressNetworkPolicyForAllNamespaces(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind HostSubnet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNetworkOpenshiftIoV1HostSubnetTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftNetworkV1HostSubnetList response = api.listNetworkOpenshiftIoV1HostSubnet(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind EgressNetworkPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftNetworkV1EgressNetworkPolicyList response = api.listNetworkOpenshiftIoV1NamespacedEgressNetworkPolicy(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind NetNamespace
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNetworkOpenshiftIoV1NetNamespaceTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftNetworkV1NetNamespaceList response = api.listNetworkOpenshiftIoV1NetNamespace(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified ClusterNetwork
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNetworkOpenshiftIoV1ClusterNetworkTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftNetworkV1ClusterNetwork response = api.patchNetworkOpenshiftIoV1ClusterNetwork(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified HostSubnet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNetworkOpenshiftIoV1HostSubnetTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftNetworkV1HostSubnet response = api.patchNetworkOpenshiftIoV1HostSubnet(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified EgressNetworkPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftNetworkV1EgressNetworkPolicy response = api.patchNetworkOpenshiftIoV1NamespacedEgressNetworkPolicy(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified NetNamespace
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNetworkOpenshiftIoV1NetNamespaceTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftNetworkV1NetNamespace response = api.patchNetworkOpenshiftIoV1NetNamespace(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified ClusterNetwork
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNetworkOpenshiftIoV1ClusterNetworkTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftNetworkV1ClusterNetwork response = api.readNetworkOpenshiftIoV1ClusterNetwork(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified HostSubnet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNetworkOpenshiftIoV1HostSubnetTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftNetworkV1HostSubnet response = api.readNetworkOpenshiftIoV1HostSubnet(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified EgressNetworkPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftNetworkV1EgressNetworkPolicy response = api.readNetworkOpenshiftIoV1NamespacedEgressNetworkPolicy(name, namespace, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified NetNamespace
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNetworkOpenshiftIoV1NetNamespaceTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftNetworkV1NetNamespace response = api.readNetworkOpenshiftIoV1NetNamespace(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified ClusterNetwork
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNetworkOpenshiftIoV1ClusterNetworkTest() throws ApiException {
        String name = null;
        IoOpenshiftNetworkV1ClusterNetwork body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftNetworkV1ClusterNetwork response = api.replaceNetworkOpenshiftIoV1ClusterNetwork(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified HostSubnet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNetworkOpenshiftIoV1HostSubnetTest() throws ApiException {
        String name = null;
        IoOpenshiftNetworkV1HostSubnet body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftNetworkV1HostSubnet response = api.replaceNetworkOpenshiftIoV1HostSubnet(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified EgressNetworkPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoOpenshiftNetworkV1EgressNetworkPolicy body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftNetworkV1EgressNetworkPolicy response = api.replaceNetworkOpenshiftIoV1NamespacedEgressNetworkPolicy(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified NetNamespace
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNetworkOpenshiftIoV1NetNamespaceTest() throws ApiException {
        String name = null;
        IoOpenshiftNetworkV1NetNamespace body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftNetworkV1NetNamespace response = api.replaceNetworkOpenshiftIoV1NetNamespace(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
}
