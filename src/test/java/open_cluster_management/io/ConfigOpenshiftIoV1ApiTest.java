/*
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package open_cluster_management.io;

import open_cluster_management.ApiException;
import open_cluster_management.io.IoK8sApimachineryPkgApisMetaV1DeleteOptions;
import open_cluster_management.io.IoK8sApimachineryPkgApisMetaV1Patch;
import open_cluster_management.io.IoK8sApimachineryPkgApisMetaV1Status;
import open_cluster_management.io.IoOpenshiftConfigV1APIServer;
import open_cluster_management.io.IoOpenshiftConfigV1APIServerList;
import open_cluster_management.io.IoOpenshiftConfigV1Authentication;
import open_cluster_management.io.IoOpenshiftConfigV1AuthenticationList;
import open_cluster_management.io.IoOpenshiftConfigV1Build;
import open_cluster_management.io.IoOpenshiftConfigV1BuildList;
import open_cluster_management.io.IoOpenshiftConfigV1ClusterOperator;
import open_cluster_management.io.IoOpenshiftConfigV1ClusterOperatorList;
import open_cluster_management.io.IoOpenshiftConfigV1ClusterVersion;
import open_cluster_management.io.IoOpenshiftConfigV1ClusterVersionList;
import open_cluster_management.io.IoOpenshiftConfigV1Console;
import open_cluster_management.io.IoOpenshiftConfigV1ConsoleList;
import open_cluster_management.io.IoOpenshiftConfigV1DNS;
import open_cluster_management.io.IoOpenshiftConfigV1DNSList;
import open_cluster_management.io.IoOpenshiftConfigV1FeatureGate;
import open_cluster_management.io.IoOpenshiftConfigV1FeatureGateList;
import open_cluster_management.io.IoOpenshiftConfigV1Image;
import open_cluster_management.io.IoOpenshiftConfigV1ImageList;
import open_cluster_management.io.IoOpenshiftConfigV1Infrastructure;
import open_cluster_management.io.IoOpenshiftConfigV1InfrastructureList;
import open_cluster_management.io.IoOpenshiftConfigV1Ingress;
import open_cluster_management.io.IoOpenshiftConfigV1IngressList;
import open_cluster_management.io.IoOpenshiftConfigV1Network;
import open_cluster_management.io.IoOpenshiftConfigV1NetworkList;
import open_cluster_management.io.IoOpenshiftConfigV1OAuth;
import open_cluster_management.io.IoOpenshiftConfigV1OAuthList;
import open_cluster_management.io.IoOpenshiftConfigV1OperatorHub;
import open_cluster_management.io.IoOpenshiftConfigV1OperatorHubList;
import open_cluster_management.io.IoOpenshiftConfigV1Project;
import open_cluster_management.io.IoOpenshiftConfigV1ProjectList;
import open_cluster_management.io.IoOpenshiftConfigV1Proxy;
import open_cluster_management.io.IoOpenshiftConfigV1ProxyList;
import open_cluster_management.io.IoOpenshiftConfigV1Scheduler;
import open_cluster_management.io.IoOpenshiftConfigV1SchedulerList;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ConfigOpenshiftIoV1Api
 */
@Ignore
public class ConfigOpenshiftIoV1ApiTest {

    private final ConfigOpenshiftIoV1Api api = new ConfigOpenshiftIoV1Api();

    
    /**
     * 
     *
     * create an APIServer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createConfigOpenshiftIoV1APIServerTest() throws ApiException {
        IoOpenshiftConfigV1APIServer body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1APIServer response = api.createConfigOpenshiftIoV1APIServer(body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create an Authentication
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createConfigOpenshiftIoV1AuthenticationTest() throws ApiException {
        IoOpenshiftConfigV1Authentication body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1Authentication response = api.createConfigOpenshiftIoV1Authentication(body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a Build
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createConfigOpenshiftIoV1BuildTest() throws ApiException {
        IoOpenshiftConfigV1Build body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1Build response = api.createConfigOpenshiftIoV1Build(body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a ClusterOperator
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createConfigOpenshiftIoV1ClusterOperatorTest() throws ApiException {
        IoOpenshiftConfigV1ClusterOperator body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1ClusterOperator response = api.createConfigOpenshiftIoV1ClusterOperator(body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a ClusterVersion
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createConfigOpenshiftIoV1ClusterVersionTest() throws ApiException {
        IoOpenshiftConfigV1ClusterVersion body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1ClusterVersion response = api.createConfigOpenshiftIoV1ClusterVersion(body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a Console
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createConfigOpenshiftIoV1ConsoleTest() throws ApiException {
        IoOpenshiftConfigV1Console body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1Console response = api.createConfigOpenshiftIoV1Console(body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a DNS
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createConfigOpenshiftIoV1DNSTest() throws ApiException {
        IoOpenshiftConfigV1DNS body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1DNS response = api.createConfigOpenshiftIoV1DNS(body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a FeatureGate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createConfigOpenshiftIoV1FeatureGateTest() throws ApiException {
        IoOpenshiftConfigV1FeatureGate body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1FeatureGate response = api.createConfigOpenshiftIoV1FeatureGate(body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create an Image
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createConfigOpenshiftIoV1ImageTest() throws ApiException {
        IoOpenshiftConfigV1Image body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1Image response = api.createConfigOpenshiftIoV1Image(body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create an Infrastructure
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createConfigOpenshiftIoV1InfrastructureTest() throws ApiException {
        IoOpenshiftConfigV1Infrastructure body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1Infrastructure response = api.createConfigOpenshiftIoV1Infrastructure(body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create an Ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createConfigOpenshiftIoV1IngressTest() throws ApiException {
        IoOpenshiftConfigV1Ingress body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1Ingress response = api.createConfigOpenshiftIoV1Ingress(body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a Network
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createConfigOpenshiftIoV1NetworkTest() throws ApiException {
        IoOpenshiftConfigV1Network body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1Network response = api.createConfigOpenshiftIoV1Network(body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create an OAuth
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createConfigOpenshiftIoV1OAuthTest() throws ApiException {
        IoOpenshiftConfigV1OAuth body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1OAuth response = api.createConfigOpenshiftIoV1OAuth(body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create an OperatorHub
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createConfigOpenshiftIoV1OperatorHubTest() throws ApiException {
        IoOpenshiftConfigV1OperatorHub body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1OperatorHub response = api.createConfigOpenshiftIoV1OperatorHub(body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a Project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createConfigOpenshiftIoV1ProjectTest() throws ApiException {
        IoOpenshiftConfigV1Project body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1Project response = api.createConfigOpenshiftIoV1Project(body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a Proxy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createConfigOpenshiftIoV1ProxyTest() throws ApiException {
        IoOpenshiftConfigV1Proxy body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1Proxy response = api.createConfigOpenshiftIoV1Proxy(body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a Scheduler
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createConfigOpenshiftIoV1SchedulerTest() throws ApiException {
        IoOpenshiftConfigV1Scheduler body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1Scheduler response = api.createConfigOpenshiftIoV1Scheduler(body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete an APIServer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteConfigOpenshiftIoV1APIServerTest() throws ApiException {
        String name = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteConfigOpenshiftIoV1APIServer(name, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete an Authentication
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteConfigOpenshiftIoV1AuthenticationTest() throws ApiException {
        String name = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteConfigOpenshiftIoV1Authentication(name, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a Build
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteConfigOpenshiftIoV1BuildTest() throws ApiException {
        String name = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteConfigOpenshiftIoV1Build(name, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a ClusterOperator
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteConfigOpenshiftIoV1ClusterOperatorTest() throws ApiException {
        String name = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteConfigOpenshiftIoV1ClusterOperator(name, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a ClusterVersion
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteConfigOpenshiftIoV1ClusterVersionTest() throws ApiException {
        String name = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteConfigOpenshiftIoV1ClusterVersion(name, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of APIServer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteConfigOpenshiftIoV1CollectionAPIServerTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteConfigOpenshiftIoV1CollectionAPIServer(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of Authentication
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteConfigOpenshiftIoV1CollectionAuthenticationTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteConfigOpenshiftIoV1CollectionAuthentication(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of Build
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteConfigOpenshiftIoV1CollectionBuildTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteConfigOpenshiftIoV1CollectionBuild(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of ClusterOperator
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteConfigOpenshiftIoV1CollectionClusterOperatorTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteConfigOpenshiftIoV1CollectionClusterOperator(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of ClusterVersion
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteConfigOpenshiftIoV1CollectionClusterVersionTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteConfigOpenshiftIoV1CollectionClusterVersion(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of Console
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteConfigOpenshiftIoV1CollectionConsoleTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteConfigOpenshiftIoV1CollectionConsole(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of DNS
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteConfigOpenshiftIoV1CollectionDNSTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteConfigOpenshiftIoV1CollectionDNS(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of FeatureGate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteConfigOpenshiftIoV1CollectionFeatureGateTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteConfigOpenshiftIoV1CollectionFeatureGate(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of Image
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteConfigOpenshiftIoV1CollectionImageTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteConfigOpenshiftIoV1CollectionImage(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of Infrastructure
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteConfigOpenshiftIoV1CollectionInfrastructureTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteConfigOpenshiftIoV1CollectionInfrastructure(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of Ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteConfigOpenshiftIoV1CollectionIngressTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteConfigOpenshiftIoV1CollectionIngress(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of Network
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteConfigOpenshiftIoV1CollectionNetworkTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteConfigOpenshiftIoV1CollectionNetwork(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of OAuth
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteConfigOpenshiftIoV1CollectionOAuthTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteConfigOpenshiftIoV1CollectionOAuth(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of OperatorHub
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteConfigOpenshiftIoV1CollectionOperatorHubTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteConfigOpenshiftIoV1CollectionOperatorHub(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of Project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteConfigOpenshiftIoV1CollectionProjectTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteConfigOpenshiftIoV1CollectionProject(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of Proxy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteConfigOpenshiftIoV1CollectionProxyTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteConfigOpenshiftIoV1CollectionProxy(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of Scheduler
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteConfigOpenshiftIoV1CollectionSchedulerTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteConfigOpenshiftIoV1CollectionScheduler(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a Console
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteConfigOpenshiftIoV1ConsoleTest() throws ApiException {
        String name = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteConfigOpenshiftIoV1Console(name, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a DNS
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteConfigOpenshiftIoV1DNSTest() throws ApiException {
        String name = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteConfigOpenshiftIoV1DNS(name, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a FeatureGate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteConfigOpenshiftIoV1FeatureGateTest() throws ApiException {
        String name = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteConfigOpenshiftIoV1FeatureGate(name, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete an Image
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteConfigOpenshiftIoV1ImageTest() throws ApiException {
        String name = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteConfigOpenshiftIoV1Image(name, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete an Infrastructure
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteConfigOpenshiftIoV1InfrastructureTest() throws ApiException {
        String name = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteConfigOpenshiftIoV1Infrastructure(name, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete an Ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteConfigOpenshiftIoV1IngressTest() throws ApiException {
        String name = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteConfigOpenshiftIoV1Ingress(name, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a Network
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteConfigOpenshiftIoV1NetworkTest() throws ApiException {
        String name = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteConfigOpenshiftIoV1Network(name, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete an OAuth
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteConfigOpenshiftIoV1OAuthTest() throws ApiException {
        String name = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteConfigOpenshiftIoV1OAuth(name, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete an OperatorHub
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteConfigOpenshiftIoV1OperatorHubTest() throws ApiException {
        String name = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteConfigOpenshiftIoV1OperatorHub(name, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a Project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteConfigOpenshiftIoV1ProjectTest() throws ApiException {
        String name = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteConfigOpenshiftIoV1Project(name, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a Proxy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteConfigOpenshiftIoV1ProxyTest() throws ApiException {
        String name = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteConfigOpenshiftIoV1Proxy(name, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a Scheduler
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteConfigOpenshiftIoV1SchedulerTest() throws ApiException {
        String name = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteConfigOpenshiftIoV1Scheduler(name, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind APIServer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listConfigOpenshiftIoV1APIServerTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftConfigV1APIServerList response = api.listConfigOpenshiftIoV1APIServer(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind Authentication
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listConfigOpenshiftIoV1AuthenticationTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftConfigV1AuthenticationList response = api.listConfigOpenshiftIoV1Authentication(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind Build
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listConfigOpenshiftIoV1BuildTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftConfigV1BuildList response = api.listConfigOpenshiftIoV1Build(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind ClusterOperator
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listConfigOpenshiftIoV1ClusterOperatorTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftConfigV1ClusterOperatorList response = api.listConfigOpenshiftIoV1ClusterOperator(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind ClusterVersion
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listConfigOpenshiftIoV1ClusterVersionTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftConfigV1ClusterVersionList response = api.listConfigOpenshiftIoV1ClusterVersion(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind Console
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listConfigOpenshiftIoV1ConsoleTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftConfigV1ConsoleList response = api.listConfigOpenshiftIoV1Console(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind DNS
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listConfigOpenshiftIoV1DNSTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftConfigV1DNSList response = api.listConfigOpenshiftIoV1DNS(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind FeatureGate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listConfigOpenshiftIoV1FeatureGateTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftConfigV1FeatureGateList response = api.listConfigOpenshiftIoV1FeatureGate(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind Image
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listConfigOpenshiftIoV1ImageTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftConfigV1ImageList response = api.listConfigOpenshiftIoV1Image(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind Infrastructure
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listConfigOpenshiftIoV1InfrastructureTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftConfigV1InfrastructureList response = api.listConfigOpenshiftIoV1Infrastructure(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind Ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listConfigOpenshiftIoV1IngressTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftConfigV1IngressList response = api.listConfigOpenshiftIoV1Ingress(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind Network
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listConfigOpenshiftIoV1NetworkTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftConfigV1NetworkList response = api.listConfigOpenshiftIoV1Network(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind OAuth
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listConfigOpenshiftIoV1OAuthTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftConfigV1OAuthList response = api.listConfigOpenshiftIoV1OAuth(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind OperatorHub
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listConfigOpenshiftIoV1OperatorHubTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftConfigV1OperatorHubList response = api.listConfigOpenshiftIoV1OperatorHub(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind Project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listConfigOpenshiftIoV1ProjectTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftConfigV1ProjectList response = api.listConfigOpenshiftIoV1Project(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind Proxy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listConfigOpenshiftIoV1ProxyTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftConfigV1ProxyList response = api.listConfigOpenshiftIoV1Proxy(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind Scheduler
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listConfigOpenshiftIoV1SchedulerTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftConfigV1SchedulerList response = api.listConfigOpenshiftIoV1Scheduler(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified APIServer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchConfigOpenshiftIoV1APIServerTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1APIServer response = api.patchConfigOpenshiftIoV1APIServer(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified APIServer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchConfigOpenshiftIoV1APIServerStatusTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1APIServer response = api.patchConfigOpenshiftIoV1APIServerStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified Authentication
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchConfigOpenshiftIoV1AuthenticationTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1Authentication response = api.patchConfigOpenshiftIoV1Authentication(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified Authentication
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchConfigOpenshiftIoV1AuthenticationStatusTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1Authentication response = api.patchConfigOpenshiftIoV1AuthenticationStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified Build
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchConfigOpenshiftIoV1BuildTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1Build response = api.patchConfigOpenshiftIoV1Build(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified Build
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchConfigOpenshiftIoV1BuildStatusTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1Build response = api.patchConfigOpenshiftIoV1BuildStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified ClusterOperator
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchConfigOpenshiftIoV1ClusterOperatorTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1ClusterOperator response = api.patchConfigOpenshiftIoV1ClusterOperator(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified ClusterOperator
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchConfigOpenshiftIoV1ClusterOperatorStatusTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1ClusterOperator response = api.patchConfigOpenshiftIoV1ClusterOperatorStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified ClusterVersion
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchConfigOpenshiftIoV1ClusterVersionTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1ClusterVersion response = api.patchConfigOpenshiftIoV1ClusterVersion(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified ClusterVersion
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchConfigOpenshiftIoV1ClusterVersionStatusTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1ClusterVersion response = api.patchConfigOpenshiftIoV1ClusterVersionStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified Console
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchConfigOpenshiftIoV1ConsoleTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1Console response = api.patchConfigOpenshiftIoV1Console(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified Console
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchConfigOpenshiftIoV1ConsoleStatusTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1Console response = api.patchConfigOpenshiftIoV1ConsoleStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified DNS
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchConfigOpenshiftIoV1DNSTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1DNS response = api.patchConfigOpenshiftIoV1DNS(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified DNS
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchConfigOpenshiftIoV1DNSStatusTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1DNS response = api.patchConfigOpenshiftIoV1DNSStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified FeatureGate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchConfigOpenshiftIoV1FeatureGateTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1FeatureGate response = api.patchConfigOpenshiftIoV1FeatureGate(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified FeatureGate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchConfigOpenshiftIoV1FeatureGateStatusTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1FeatureGate response = api.patchConfigOpenshiftIoV1FeatureGateStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified Image
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchConfigOpenshiftIoV1ImageTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1Image response = api.patchConfigOpenshiftIoV1Image(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified Image
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchConfigOpenshiftIoV1ImageStatusTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1Image response = api.patchConfigOpenshiftIoV1ImageStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified Infrastructure
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchConfigOpenshiftIoV1InfrastructureTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1Infrastructure response = api.patchConfigOpenshiftIoV1Infrastructure(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified Ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchConfigOpenshiftIoV1IngressTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1Ingress response = api.patchConfigOpenshiftIoV1Ingress(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified Ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchConfigOpenshiftIoV1IngressStatusTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1Ingress response = api.patchConfigOpenshiftIoV1IngressStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified Network
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchConfigOpenshiftIoV1NetworkTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1Network response = api.patchConfigOpenshiftIoV1Network(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified OAuth
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchConfigOpenshiftIoV1OAuthTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1OAuth response = api.patchConfigOpenshiftIoV1OAuth(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified OAuth
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchConfigOpenshiftIoV1OAuthStatusTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1OAuth response = api.patchConfigOpenshiftIoV1OAuthStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified OperatorHub
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchConfigOpenshiftIoV1OperatorHubTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1OperatorHub response = api.patchConfigOpenshiftIoV1OperatorHub(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified OperatorHub
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchConfigOpenshiftIoV1OperatorHubStatusTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1OperatorHub response = api.patchConfigOpenshiftIoV1OperatorHubStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified Project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchConfigOpenshiftIoV1ProjectTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1Project response = api.patchConfigOpenshiftIoV1Project(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified Project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchConfigOpenshiftIoV1ProjectStatusTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1Project response = api.patchConfigOpenshiftIoV1ProjectStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified Proxy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchConfigOpenshiftIoV1ProxyTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1Proxy response = api.patchConfigOpenshiftIoV1Proxy(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified Proxy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchConfigOpenshiftIoV1ProxyStatusTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1Proxy response = api.patchConfigOpenshiftIoV1ProxyStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified Scheduler
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchConfigOpenshiftIoV1SchedulerTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1Scheduler response = api.patchConfigOpenshiftIoV1Scheduler(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified Scheduler
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchConfigOpenshiftIoV1SchedulerStatusTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1Scheduler response = api.patchConfigOpenshiftIoV1SchedulerStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified APIServer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readConfigOpenshiftIoV1APIServerTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftConfigV1APIServer response = api.readConfigOpenshiftIoV1APIServer(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified APIServer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readConfigOpenshiftIoV1APIServerStatusTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftConfigV1APIServer response = api.readConfigOpenshiftIoV1APIServerStatus(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified Authentication
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readConfigOpenshiftIoV1AuthenticationTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftConfigV1Authentication response = api.readConfigOpenshiftIoV1Authentication(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified Authentication
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readConfigOpenshiftIoV1AuthenticationStatusTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftConfigV1Authentication response = api.readConfigOpenshiftIoV1AuthenticationStatus(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified Build
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readConfigOpenshiftIoV1BuildTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftConfigV1Build response = api.readConfigOpenshiftIoV1Build(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified Build
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readConfigOpenshiftIoV1BuildStatusTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftConfigV1Build response = api.readConfigOpenshiftIoV1BuildStatus(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified ClusterOperator
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readConfigOpenshiftIoV1ClusterOperatorTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftConfigV1ClusterOperator response = api.readConfigOpenshiftIoV1ClusterOperator(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified ClusterOperator
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readConfigOpenshiftIoV1ClusterOperatorStatusTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftConfigV1ClusterOperator response = api.readConfigOpenshiftIoV1ClusterOperatorStatus(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified ClusterVersion
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readConfigOpenshiftIoV1ClusterVersionTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftConfigV1ClusterVersion response = api.readConfigOpenshiftIoV1ClusterVersion(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified ClusterVersion
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readConfigOpenshiftIoV1ClusterVersionStatusTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftConfigV1ClusterVersion response = api.readConfigOpenshiftIoV1ClusterVersionStatus(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified Console
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readConfigOpenshiftIoV1ConsoleTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftConfigV1Console response = api.readConfigOpenshiftIoV1Console(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified Console
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readConfigOpenshiftIoV1ConsoleStatusTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftConfigV1Console response = api.readConfigOpenshiftIoV1ConsoleStatus(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified DNS
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readConfigOpenshiftIoV1DNSTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftConfigV1DNS response = api.readConfigOpenshiftIoV1DNS(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified DNS
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readConfigOpenshiftIoV1DNSStatusTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftConfigV1DNS response = api.readConfigOpenshiftIoV1DNSStatus(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified FeatureGate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readConfigOpenshiftIoV1FeatureGateTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftConfigV1FeatureGate response = api.readConfigOpenshiftIoV1FeatureGate(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified FeatureGate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readConfigOpenshiftIoV1FeatureGateStatusTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftConfigV1FeatureGate response = api.readConfigOpenshiftIoV1FeatureGateStatus(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified Image
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readConfigOpenshiftIoV1ImageTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftConfigV1Image response = api.readConfigOpenshiftIoV1Image(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified Image
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readConfigOpenshiftIoV1ImageStatusTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftConfigV1Image response = api.readConfigOpenshiftIoV1ImageStatus(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified Infrastructure
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readConfigOpenshiftIoV1InfrastructureTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftConfigV1Infrastructure response = api.readConfigOpenshiftIoV1Infrastructure(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified Ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readConfigOpenshiftIoV1IngressTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftConfigV1Ingress response = api.readConfigOpenshiftIoV1Ingress(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified Ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readConfigOpenshiftIoV1IngressStatusTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftConfigV1Ingress response = api.readConfigOpenshiftIoV1IngressStatus(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified Network
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readConfigOpenshiftIoV1NetworkTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftConfigV1Network response = api.readConfigOpenshiftIoV1Network(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified OAuth
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readConfigOpenshiftIoV1OAuthTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftConfigV1OAuth response = api.readConfigOpenshiftIoV1OAuth(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified OAuth
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readConfigOpenshiftIoV1OAuthStatusTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftConfigV1OAuth response = api.readConfigOpenshiftIoV1OAuthStatus(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified OperatorHub
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readConfigOpenshiftIoV1OperatorHubTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftConfigV1OperatorHub response = api.readConfigOpenshiftIoV1OperatorHub(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified OperatorHub
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readConfigOpenshiftIoV1OperatorHubStatusTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftConfigV1OperatorHub response = api.readConfigOpenshiftIoV1OperatorHubStatus(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified Project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readConfigOpenshiftIoV1ProjectTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftConfigV1Project response = api.readConfigOpenshiftIoV1Project(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified Project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readConfigOpenshiftIoV1ProjectStatusTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftConfigV1Project response = api.readConfigOpenshiftIoV1ProjectStatus(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified Proxy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readConfigOpenshiftIoV1ProxyTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftConfigV1Proxy response = api.readConfigOpenshiftIoV1Proxy(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified Proxy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readConfigOpenshiftIoV1ProxyStatusTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftConfigV1Proxy response = api.readConfigOpenshiftIoV1ProxyStatus(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified Scheduler
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readConfigOpenshiftIoV1SchedulerTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftConfigV1Scheduler response = api.readConfigOpenshiftIoV1Scheduler(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified Scheduler
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readConfigOpenshiftIoV1SchedulerStatusTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftConfigV1Scheduler response = api.readConfigOpenshiftIoV1SchedulerStatus(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified APIServer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceConfigOpenshiftIoV1APIServerTest() throws ApiException {
        String name = null;
        IoOpenshiftConfigV1APIServer body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1APIServer response = api.replaceConfigOpenshiftIoV1APIServer(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified APIServer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceConfigOpenshiftIoV1APIServerStatusTest() throws ApiException {
        String name = null;
        IoOpenshiftConfigV1APIServer body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1APIServer response = api.replaceConfigOpenshiftIoV1APIServerStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified Authentication
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceConfigOpenshiftIoV1AuthenticationTest() throws ApiException {
        String name = null;
        IoOpenshiftConfigV1Authentication body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1Authentication response = api.replaceConfigOpenshiftIoV1Authentication(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified Authentication
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceConfigOpenshiftIoV1AuthenticationStatusTest() throws ApiException {
        String name = null;
        IoOpenshiftConfigV1Authentication body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1Authentication response = api.replaceConfigOpenshiftIoV1AuthenticationStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified Build
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceConfigOpenshiftIoV1BuildTest() throws ApiException {
        String name = null;
        IoOpenshiftConfigV1Build body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1Build response = api.replaceConfigOpenshiftIoV1Build(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified Build
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceConfigOpenshiftIoV1BuildStatusTest() throws ApiException {
        String name = null;
        IoOpenshiftConfigV1Build body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1Build response = api.replaceConfigOpenshiftIoV1BuildStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified ClusterOperator
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceConfigOpenshiftIoV1ClusterOperatorTest() throws ApiException {
        String name = null;
        IoOpenshiftConfigV1ClusterOperator body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1ClusterOperator response = api.replaceConfigOpenshiftIoV1ClusterOperator(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified ClusterOperator
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceConfigOpenshiftIoV1ClusterOperatorStatusTest() throws ApiException {
        String name = null;
        IoOpenshiftConfigV1ClusterOperator body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1ClusterOperator response = api.replaceConfigOpenshiftIoV1ClusterOperatorStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified ClusterVersion
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceConfigOpenshiftIoV1ClusterVersionTest() throws ApiException {
        String name = null;
        IoOpenshiftConfigV1ClusterVersion body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1ClusterVersion response = api.replaceConfigOpenshiftIoV1ClusterVersion(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified ClusterVersion
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceConfigOpenshiftIoV1ClusterVersionStatusTest() throws ApiException {
        String name = null;
        IoOpenshiftConfigV1ClusterVersion body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1ClusterVersion response = api.replaceConfigOpenshiftIoV1ClusterVersionStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified Console
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceConfigOpenshiftIoV1ConsoleTest() throws ApiException {
        String name = null;
        IoOpenshiftConfigV1Console body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1Console response = api.replaceConfigOpenshiftIoV1Console(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified Console
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceConfigOpenshiftIoV1ConsoleStatusTest() throws ApiException {
        String name = null;
        IoOpenshiftConfigV1Console body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1Console response = api.replaceConfigOpenshiftIoV1ConsoleStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified DNS
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceConfigOpenshiftIoV1DNSTest() throws ApiException {
        String name = null;
        IoOpenshiftConfigV1DNS body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1DNS response = api.replaceConfigOpenshiftIoV1DNS(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified DNS
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceConfigOpenshiftIoV1DNSStatusTest() throws ApiException {
        String name = null;
        IoOpenshiftConfigV1DNS body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1DNS response = api.replaceConfigOpenshiftIoV1DNSStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified FeatureGate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceConfigOpenshiftIoV1FeatureGateTest() throws ApiException {
        String name = null;
        IoOpenshiftConfigV1FeatureGate body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1FeatureGate response = api.replaceConfigOpenshiftIoV1FeatureGate(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified FeatureGate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceConfigOpenshiftIoV1FeatureGateStatusTest() throws ApiException {
        String name = null;
        IoOpenshiftConfigV1FeatureGate body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1FeatureGate response = api.replaceConfigOpenshiftIoV1FeatureGateStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified Image
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceConfigOpenshiftIoV1ImageTest() throws ApiException {
        String name = null;
        IoOpenshiftConfigV1Image body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1Image response = api.replaceConfigOpenshiftIoV1Image(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified Image
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceConfigOpenshiftIoV1ImageStatusTest() throws ApiException {
        String name = null;
        IoOpenshiftConfigV1Image body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1Image response = api.replaceConfigOpenshiftIoV1ImageStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified Infrastructure
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceConfigOpenshiftIoV1InfrastructureTest() throws ApiException {
        String name = null;
        IoOpenshiftConfigV1Infrastructure body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1Infrastructure response = api.replaceConfigOpenshiftIoV1Infrastructure(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified Ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceConfigOpenshiftIoV1IngressTest() throws ApiException {
        String name = null;
        IoOpenshiftConfigV1Ingress body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1Ingress response = api.replaceConfigOpenshiftIoV1Ingress(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified Ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceConfigOpenshiftIoV1IngressStatusTest() throws ApiException {
        String name = null;
        IoOpenshiftConfigV1Ingress body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1Ingress response = api.replaceConfigOpenshiftIoV1IngressStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified Network
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceConfigOpenshiftIoV1NetworkTest() throws ApiException {
        String name = null;
        IoOpenshiftConfigV1Network body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1Network response = api.replaceConfigOpenshiftIoV1Network(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified OAuth
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceConfigOpenshiftIoV1OAuthTest() throws ApiException {
        String name = null;
        IoOpenshiftConfigV1OAuth body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1OAuth response = api.replaceConfigOpenshiftIoV1OAuth(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified OAuth
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceConfigOpenshiftIoV1OAuthStatusTest() throws ApiException {
        String name = null;
        IoOpenshiftConfigV1OAuth body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1OAuth response = api.replaceConfigOpenshiftIoV1OAuthStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified OperatorHub
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceConfigOpenshiftIoV1OperatorHubTest() throws ApiException {
        String name = null;
        IoOpenshiftConfigV1OperatorHub body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1OperatorHub response = api.replaceConfigOpenshiftIoV1OperatorHub(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified OperatorHub
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceConfigOpenshiftIoV1OperatorHubStatusTest() throws ApiException {
        String name = null;
        IoOpenshiftConfigV1OperatorHub body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1OperatorHub response = api.replaceConfigOpenshiftIoV1OperatorHubStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified Project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceConfigOpenshiftIoV1ProjectTest() throws ApiException {
        String name = null;
        IoOpenshiftConfigV1Project body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1Project response = api.replaceConfigOpenshiftIoV1Project(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified Project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceConfigOpenshiftIoV1ProjectStatusTest() throws ApiException {
        String name = null;
        IoOpenshiftConfigV1Project body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1Project response = api.replaceConfigOpenshiftIoV1ProjectStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified Proxy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceConfigOpenshiftIoV1ProxyTest() throws ApiException {
        String name = null;
        IoOpenshiftConfigV1Proxy body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1Proxy response = api.replaceConfigOpenshiftIoV1Proxy(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified Proxy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceConfigOpenshiftIoV1ProxyStatusTest() throws ApiException {
        String name = null;
        IoOpenshiftConfigV1Proxy body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1Proxy response = api.replaceConfigOpenshiftIoV1ProxyStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified Scheduler
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceConfigOpenshiftIoV1SchedulerTest() throws ApiException {
        String name = null;
        IoOpenshiftConfigV1Scheduler body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1Scheduler response = api.replaceConfigOpenshiftIoV1Scheduler(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified Scheduler
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceConfigOpenshiftIoV1SchedulerStatusTest() throws ApiException {
        String name = null;
        IoOpenshiftConfigV1Scheduler body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConfigV1Scheduler response = api.replaceConfigOpenshiftIoV1SchedulerStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
}
