/*
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package open_cluster_management.io;

import open_cluster_management.ApiException;
import open_cluster_management.io.ComGithubOpenshiftApiBuildV1Build;
import open_cluster_management.io.ComGithubOpenshiftApiBuildV1BuildConfig;
import open_cluster_management.io.ComGithubOpenshiftApiBuildV1BuildConfigList;
import open_cluster_management.io.ComGithubOpenshiftApiBuildV1BuildList;
import open_cluster_management.io.ComGithubOpenshiftApiBuildV1BuildLog;
import open_cluster_management.io.ComGithubOpenshiftApiBuildV1BuildRequest;
import open_cluster_management.io.IoK8sApimachineryPkgApisMetaV1APIResourceList;
import open_cluster_management.io.IoK8sApimachineryPkgApisMetaV1DeleteOptions;
import open_cluster_management.io.IoK8sApimachineryPkgApisMetaV1Patch;
import open_cluster_management.io.IoK8sApimachineryPkgApisMetaV1Status;
import open_cluster_management.io.IoK8sApimachineryPkgApisMetaV1WatchEvent;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BuildOpenshiftIoV1Api
 */
@Ignore
public class BuildOpenshiftIoV1ApiTest {

    private final BuildOpenshiftIoV1Api api = new BuildOpenshiftIoV1Api();

    
    /**
     * 
     *
     * connect POST requests to instantiatebinary of BuildConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectBuildOpenshiftIoV1PostNamespacedBuildConfigInstantiatebinaryTest() throws ApiException {
        String name = null;
        String namespace = null;
        String asFile = null;
        String revisionAuthorEmail = null;
        String revisionAuthorName = null;
        String revisionCommit = null;
        String revisionCommitterEmail = null;
        String revisionCommitterName = null;
        String revisionMessage = null;
        ComGithubOpenshiftApiBuildV1Build response = api.connectBuildOpenshiftIoV1PostNamespacedBuildConfigInstantiatebinary(name, namespace, asFile, revisionAuthorEmail, revisionAuthorName, revisionCommit, revisionCommitterEmail, revisionCommitterName, revisionMessage);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect POST requests to webhooks of BuildConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectBuildOpenshiftIoV1PostNamespacedBuildConfigWebhooksTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String response = api.connectBuildOpenshiftIoV1PostNamespacedBuildConfigWebhooks(name, namespace, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * connect POST requests to webhooks of BuildConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectBuildOpenshiftIoV1PostNamespacedBuildConfigWebhooksWithPathTest() throws ApiException {
        String name = null;
        String namespace = null;
        String path = null;
        String path2 = null;
        String response = api.connectBuildOpenshiftIoV1PostNamespacedBuildConfigWebhooksWithPath(name, namespace, path, path2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a Build
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createBuildOpenshiftIoV1NamespacedBuildTest() throws ApiException {
        String namespace = null;
        ComGithubOpenshiftApiBuildV1Build body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        ComGithubOpenshiftApiBuildV1Build response = api.createBuildOpenshiftIoV1NamespacedBuild(namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create clone of a Build
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createBuildOpenshiftIoV1NamespacedBuildCloneTest() throws ApiException {
        String name = null;
        String namespace = null;
        ComGithubOpenshiftApiBuildV1BuildRequest body = null;
        String dryRun = null;
        String fieldManager = null;
        String pretty = null;
        ComGithubOpenshiftApiBuildV1BuildRequest response = api.createBuildOpenshiftIoV1NamespacedBuildClone(name, namespace, body, dryRun, fieldManager, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a BuildConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createBuildOpenshiftIoV1NamespacedBuildConfigTest() throws ApiException {
        String namespace = null;
        ComGithubOpenshiftApiBuildV1BuildConfig body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        ComGithubOpenshiftApiBuildV1BuildConfig response = api.createBuildOpenshiftIoV1NamespacedBuildConfig(namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create instantiate of a BuildConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createBuildOpenshiftIoV1NamespacedBuildConfigInstantiateTest() throws ApiException {
        String name = null;
        String namespace = null;
        ComGithubOpenshiftApiBuildV1BuildRequest body = null;
        String dryRun = null;
        String fieldManager = null;
        String pretty = null;
        ComGithubOpenshiftApiBuildV1Build response = api.createBuildOpenshiftIoV1NamespacedBuildConfigInstantiate(name, namespace, body, dryRun, fieldManager, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of Build
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteBuildOpenshiftIoV1CollectionNamespacedBuildTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String _continue = null;
        String dryRun = null;
        String fieldSelector = null;
        Integer gracePeriodSeconds = null;
        String labelSelector = null;
        Integer limit = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteBuildOpenshiftIoV1CollectionNamespacedBuild(namespace, pretty, allowWatchBookmarks, body, _continue, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of BuildConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteBuildOpenshiftIoV1CollectionNamespacedBuildConfigTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String _continue = null;
        String dryRun = null;
        String fieldSelector = null;
        Integer gracePeriodSeconds = null;
        String labelSelector = null;
        Integer limit = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteBuildOpenshiftIoV1CollectionNamespacedBuildConfig(namespace, pretty, allowWatchBookmarks, body, _continue, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a Build
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteBuildOpenshiftIoV1NamespacedBuildTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteBuildOpenshiftIoV1NamespacedBuild(name, namespace, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a BuildConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteBuildOpenshiftIoV1NamespacedBuildConfigTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteBuildOpenshiftIoV1NamespacedBuildConfig(name, namespace, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * get available resources
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBuildOpenshiftIoV1APIResourcesTest() throws ApiException {
        IoK8sApimachineryPkgApisMetaV1APIResourceList response = api.getBuildOpenshiftIoV1APIResources();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind BuildConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listBuildOpenshiftIoV1BuildConfigForAllNamespacesTest() throws ApiException {
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        ComGithubOpenshiftApiBuildV1BuildConfigList response = api.listBuildOpenshiftIoV1BuildConfigForAllNamespaces(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Build
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listBuildOpenshiftIoV1BuildForAllNamespacesTest() throws ApiException {
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        ComGithubOpenshiftApiBuildV1BuildList response = api.listBuildOpenshiftIoV1BuildForAllNamespaces(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Build
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listBuildOpenshiftIoV1NamespacedBuildTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        ComGithubOpenshiftApiBuildV1BuildList response = api.listBuildOpenshiftIoV1NamespacedBuild(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind BuildConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listBuildOpenshiftIoV1NamespacedBuildConfigTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        ComGithubOpenshiftApiBuildV1BuildConfigList response = api.listBuildOpenshiftIoV1NamespacedBuildConfig(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified Build
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchBuildOpenshiftIoV1NamespacedBuildTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        Boolean force = null;
        ComGithubOpenshiftApiBuildV1Build response = api.patchBuildOpenshiftIoV1NamespacedBuild(name, namespace, body, pretty, dryRun, fieldManager, force);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified BuildConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchBuildOpenshiftIoV1NamespacedBuildConfigTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        Boolean force = null;
        ComGithubOpenshiftApiBuildV1BuildConfig response = api.patchBuildOpenshiftIoV1NamespacedBuildConfig(name, namespace, body, pretty, dryRun, fieldManager, force);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified Build
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readBuildOpenshiftIoV1NamespacedBuildTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        ComGithubOpenshiftApiBuildV1Build response = api.readBuildOpenshiftIoV1NamespacedBuild(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified BuildConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readBuildOpenshiftIoV1NamespacedBuildConfigTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        ComGithubOpenshiftApiBuildV1BuildConfig response = api.readBuildOpenshiftIoV1NamespacedBuildConfig(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read log of the specified Build
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readBuildOpenshiftIoV1NamespacedBuildLogTest() throws ApiException {
        String name = null;
        String namespace = null;
        String container = null;
        Boolean follow = null;
        Integer limitBytes = null;
        Boolean nowait = null;
        String pretty = null;
        Boolean previous = null;
        Integer sinceSeconds = null;
        Integer tailLines = null;
        Boolean timestamps = null;
        Integer version = null;
        ComGithubOpenshiftApiBuildV1BuildLog response = api.readBuildOpenshiftIoV1NamespacedBuildLog(name, namespace, container, follow, limitBytes, nowait, pretty, previous, sinceSeconds, tailLines, timestamps, version);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified Build
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceBuildOpenshiftIoV1NamespacedBuildTest() throws ApiException {
        String name = null;
        String namespace = null;
        ComGithubOpenshiftApiBuildV1Build body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        ComGithubOpenshiftApiBuildV1Build response = api.replaceBuildOpenshiftIoV1NamespacedBuild(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified BuildConfig
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceBuildOpenshiftIoV1NamespacedBuildConfigTest() throws ApiException {
        String name = null;
        String namespace = null;
        ComGithubOpenshiftApiBuildV1BuildConfig body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        ComGithubOpenshiftApiBuildV1BuildConfig response = api.replaceBuildOpenshiftIoV1NamespacedBuildConfig(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace details of the specified Build
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceBuildOpenshiftIoV1NamespacedBuildDetailsTest() throws ApiException {
        String name = null;
        String namespace = null;
        ComGithubOpenshiftApiBuildV1Build body = null;
        String dryRun = null;
        String fieldManager = null;
        String pretty = null;
        ComGithubOpenshiftApiBuildV1Build response = api.replaceBuildOpenshiftIoV1NamespacedBuildDetails(name, namespace, body, dryRun, fieldManager, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of BuildConfig. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchBuildOpenshiftIoV1BuildConfigListForAllNamespacesTest() throws ApiException {
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchBuildOpenshiftIoV1BuildConfigListForAllNamespaces(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of Build. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchBuildOpenshiftIoV1BuildListForAllNamespacesTest() throws ApiException {
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchBuildOpenshiftIoV1BuildListForAllNamespaces(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind Build. deprecated: use the &#39;watch&#39; parameter with a list operation instead, filtered to a single item with the &#39;fieldSelector&#39; parameter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchBuildOpenshiftIoV1NamespacedBuildTest() throws ApiException {
        String name = null;
        String namespace = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchBuildOpenshiftIoV1NamespacedBuild(name, namespace, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind BuildConfig. deprecated: use the &#39;watch&#39; parameter with a list operation instead, filtered to a single item with the &#39;fieldSelector&#39; parameter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchBuildOpenshiftIoV1NamespacedBuildConfigTest() throws ApiException {
        String name = null;
        String namespace = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchBuildOpenshiftIoV1NamespacedBuildConfig(name, namespace, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of BuildConfig. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchBuildOpenshiftIoV1NamespacedBuildConfigListTest() throws ApiException {
        String namespace = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchBuildOpenshiftIoV1NamespacedBuildConfigList(namespace, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of Build. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchBuildOpenshiftIoV1NamespacedBuildListTest() throws ApiException {
        String namespace = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchBuildOpenshiftIoV1NamespacedBuildList(namespace, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
}
