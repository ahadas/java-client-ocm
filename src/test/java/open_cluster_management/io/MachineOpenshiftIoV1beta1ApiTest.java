/*
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package open_cluster_management.io;

import open_cluster_management.ApiException;
import open_cluster_management.io.IoK8sApiAutoscalingV1Scale;
import open_cluster_management.io.IoK8sApimachineryPkgApisMetaV1DeleteOptions;
import open_cluster_management.io.IoK8sApimachineryPkgApisMetaV1Patch;
import open_cluster_management.io.IoK8sApimachineryPkgApisMetaV1Status;
import open_cluster_management.io.IoOpenshiftMachineV1beta1Machine;
import open_cluster_management.io.IoOpenshiftMachineV1beta1MachineHealthCheck;
import open_cluster_management.io.IoOpenshiftMachineV1beta1MachineHealthCheckList;
import open_cluster_management.io.IoOpenshiftMachineV1beta1MachineList;
import open_cluster_management.io.IoOpenshiftMachineV1beta1MachineSet;
import open_cluster_management.io.IoOpenshiftMachineV1beta1MachineSetList;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MachineOpenshiftIoV1beta1Api
 */
@Ignore
public class MachineOpenshiftIoV1beta1ApiTest {

    private final MachineOpenshiftIoV1beta1Api api = new MachineOpenshiftIoV1beta1Api();

    
    /**
     * 
     *
     * create a Machine
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createMachineOpenshiftIoV1beta1NamespacedMachineTest() throws ApiException {
        String namespace = null;
        IoOpenshiftMachineV1beta1Machine body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftMachineV1beta1Machine response = api.createMachineOpenshiftIoV1beta1NamespacedMachine(namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a MachineHealthCheck
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createMachineOpenshiftIoV1beta1NamespacedMachineHealthCheckTest() throws ApiException {
        String namespace = null;
        IoOpenshiftMachineV1beta1MachineHealthCheck body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftMachineV1beta1MachineHealthCheck response = api.createMachineOpenshiftIoV1beta1NamespacedMachineHealthCheck(namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a MachineSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createMachineOpenshiftIoV1beta1NamespacedMachineSetTest() throws ApiException {
        String namespace = null;
        IoOpenshiftMachineV1beta1MachineSet body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftMachineV1beta1MachineSet response = api.createMachineOpenshiftIoV1beta1NamespacedMachineSet(namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of Machine
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteMachineOpenshiftIoV1beta1CollectionNamespacedMachineTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteMachineOpenshiftIoV1beta1CollectionNamespacedMachine(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of MachineHealthCheck
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteMachineOpenshiftIoV1beta1CollectionNamespacedMachineHealthCheckTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteMachineOpenshiftIoV1beta1CollectionNamespacedMachineHealthCheck(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of MachineSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteMachineOpenshiftIoV1beta1CollectionNamespacedMachineSetTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteMachineOpenshiftIoV1beta1CollectionNamespacedMachineSet(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a Machine
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteMachineOpenshiftIoV1beta1NamespacedMachineTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteMachineOpenshiftIoV1beta1NamespacedMachine(name, namespace, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a MachineHealthCheck
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteMachineOpenshiftIoV1beta1NamespacedMachineHealthCheckTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteMachineOpenshiftIoV1beta1NamespacedMachineHealthCheck(name, namespace, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a MachineSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteMachineOpenshiftIoV1beta1NamespacedMachineSetTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteMachineOpenshiftIoV1beta1NamespacedMachineSet(name, namespace, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind Machine
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listMachineOpenshiftIoV1beta1MachineForAllNamespacesTest() throws ApiException {
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftMachineV1beta1MachineList response = api.listMachineOpenshiftIoV1beta1MachineForAllNamespaces(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind MachineHealthCheck
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listMachineOpenshiftIoV1beta1MachineHealthCheckForAllNamespacesTest() throws ApiException {
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftMachineV1beta1MachineHealthCheckList response = api.listMachineOpenshiftIoV1beta1MachineHealthCheckForAllNamespaces(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind MachineSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listMachineOpenshiftIoV1beta1MachineSetForAllNamespacesTest() throws ApiException {
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftMachineV1beta1MachineSetList response = api.listMachineOpenshiftIoV1beta1MachineSetForAllNamespaces(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind Machine
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listMachineOpenshiftIoV1beta1NamespacedMachineTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftMachineV1beta1MachineList response = api.listMachineOpenshiftIoV1beta1NamespacedMachine(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind MachineHealthCheck
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listMachineOpenshiftIoV1beta1NamespacedMachineHealthCheckTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftMachineV1beta1MachineHealthCheckList response = api.listMachineOpenshiftIoV1beta1NamespacedMachineHealthCheck(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind MachineSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listMachineOpenshiftIoV1beta1NamespacedMachineSetTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftMachineV1beta1MachineSetList response = api.listMachineOpenshiftIoV1beta1NamespacedMachineSet(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified Machine
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchMachineOpenshiftIoV1beta1NamespacedMachineTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftMachineV1beta1Machine response = api.patchMachineOpenshiftIoV1beta1NamespacedMachine(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified MachineHealthCheck
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchMachineOpenshiftIoV1beta1NamespacedMachineHealthCheckTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftMachineV1beta1MachineHealthCheck response = api.patchMachineOpenshiftIoV1beta1NamespacedMachineHealthCheck(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified MachineHealthCheck
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchMachineOpenshiftIoV1beta1NamespacedMachineHealthCheckStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftMachineV1beta1MachineHealthCheck response = api.patchMachineOpenshiftIoV1beta1NamespacedMachineHealthCheckStatus(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified MachineSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchMachineOpenshiftIoV1beta1NamespacedMachineSetTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftMachineV1beta1MachineSet response = api.patchMachineOpenshiftIoV1beta1NamespacedMachineSet(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update scale of the specified MachineSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchMachineOpenshiftIoV1beta1NamespacedMachineSetScaleTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoK8sApiAutoscalingV1Scale response = api.patchMachineOpenshiftIoV1beta1NamespacedMachineSetScale(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified MachineSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchMachineOpenshiftIoV1beta1NamespacedMachineSetStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftMachineV1beta1MachineSet response = api.patchMachineOpenshiftIoV1beta1NamespacedMachineSetStatus(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified Machine
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchMachineOpenshiftIoV1beta1NamespacedMachineStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftMachineV1beta1Machine response = api.patchMachineOpenshiftIoV1beta1NamespacedMachineStatus(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified Machine
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readMachineOpenshiftIoV1beta1NamespacedMachineTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftMachineV1beta1Machine response = api.readMachineOpenshiftIoV1beta1NamespacedMachine(name, namespace, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified MachineHealthCheck
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readMachineOpenshiftIoV1beta1NamespacedMachineHealthCheckTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftMachineV1beta1MachineHealthCheck response = api.readMachineOpenshiftIoV1beta1NamespacedMachineHealthCheck(name, namespace, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified MachineHealthCheck
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readMachineOpenshiftIoV1beta1NamespacedMachineHealthCheckStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftMachineV1beta1MachineHealthCheck response = api.readMachineOpenshiftIoV1beta1NamespacedMachineHealthCheckStatus(name, namespace, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified MachineSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readMachineOpenshiftIoV1beta1NamespacedMachineSetTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftMachineV1beta1MachineSet response = api.readMachineOpenshiftIoV1beta1NamespacedMachineSet(name, namespace, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read scale of the specified MachineSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readMachineOpenshiftIoV1beta1NamespacedMachineSetScaleTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        String resourceVersion = null;
        IoK8sApiAutoscalingV1Scale response = api.readMachineOpenshiftIoV1beta1NamespacedMachineSetScale(name, namespace, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified MachineSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readMachineOpenshiftIoV1beta1NamespacedMachineSetStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftMachineV1beta1MachineSet response = api.readMachineOpenshiftIoV1beta1NamespacedMachineSetStatus(name, namespace, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified Machine
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readMachineOpenshiftIoV1beta1NamespacedMachineStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftMachineV1beta1Machine response = api.readMachineOpenshiftIoV1beta1NamespacedMachineStatus(name, namespace, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified Machine
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceMachineOpenshiftIoV1beta1NamespacedMachineTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoOpenshiftMachineV1beta1Machine body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftMachineV1beta1Machine response = api.replaceMachineOpenshiftIoV1beta1NamespacedMachine(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified MachineHealthCheck
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceMachineOpenshiftIoV1beta1NamespacedMachineHealthCheckTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoOpenshiftMachineV1beta1MachineHealthCheck body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftMachineV1beta1MachineHealthCheck response = api.replaceMachineOpenshiftIoV1beta1NamespacedMachineHealthCheck(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified MachineHealthCheck
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceMachineOpenshiftIoV1beta1NamespacedMachineHealthCheckStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoOpenshiftMachineV1beta1MachineHealthCheck body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftMachineV1beta1MachineHealthCheck response = api.replaceMachineOpenshiftIoV1beta1NamespacedMachineHealthCheckStatus(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified MachineSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceMachineOpenshiftIoV1beta1NamespacedMachineSetTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoOpenshiftMachineV1beta1MachineSet body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftMachineV1beta1MachineSet response = api.replaceMachineOpenshiftIoV1beta1NamespacedMachineSet(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace scale of the specified MachineSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceMachineOpenshiftIoV1beta1NamespacedMachineSetScaleTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApiAutoscalingV1Scale body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoK8sApiAutoscalingV1Scale response = api.replaceMachineOpenshiftIoV1beta1NamespacedMachineSetScale(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified MachineSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceMachineOpenshiftIoV1beta1NamespacedMachineSetStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoOpenshiftMachineV1beta1MachineSet body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftMachineV1beta1MachineSet response = api.replaceMachineOpenshiftIoV1beta1NamespacedMachineSetStatus(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified Machine
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceMachineOpenshiftIoV1beta1NamespacedMachineStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoOpenshiftMachineV1beta1Machine body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftMachineV1beta1Machine response = api.replaceMachineOpenshiftIoV1beta1NamespacedMachineStatus(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
}
