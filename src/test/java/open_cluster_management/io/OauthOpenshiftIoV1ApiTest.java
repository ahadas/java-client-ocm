/*
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package open_cluster_management.io;

import open_cluster_management.ApiException;
import open_cluster_management.io.ComGithubOpenshiftApiOauthV1OAuthAccessToken;
import open_cluster_management.io.ComGithubOpenshiftApiOauthV1OAuthAccessTokenList;
import open_cluster_management.io.ComGithubOpenshiftApiOauthV1OAuthAuthorizeToken;
import open_cluster_management.io.ComGithubOpenshiftApiOauthV1OAuthAuthorizeTokenList;
import open_cluster_management.io.ComGithubOpenshiftApiOauthV1OAuthClient;
import open_cluster_management.io.ComGithubOpenshiftApiOauthV1OAuthClientAuthorization;
import open_cluster_management.io.ComGithubOpenshiftApiOauthV1OAuthClientAuthorizationList;
import open_cluster_management.io.ComGithubOpenshiftApiOauthV1OAuthClientList;
import open_cluster_management.io.IoK8sApimachineryPkgApisMetaV1APIResourceList;
import open_cluster_management.io.IoK8sApimachineryPkgApisMetaV1DeleteOptions;
import open_cluster_management.io.IoK8sApimachineryPkgApisMetaV1Patch;
import open_cluster_management.io.IoK8sApimachineryPkgApisMetaV1Status;
import open_cluster_management.io.IoK8sApimachineryPkgApisMetaV1WatchEvent;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OauthOpenshiftIoV1Api
 */
@Ignore
public class OauthOpenshiftIoV1ApiTest {

    private final OauthOpenshiftIoV1Api api = new OauthOpenshiftIoV1Api();

    
    /**
     * 
     *
     * create an OAuthAccessToken
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createOauthOpenshiftIoV1OAuthAccessTokenTest() throws ApiException {
        ComGithubOpenshiftApiOauthV1OAuthAccessToken body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        ComGithubOpenshiftApiOauthV1OAuthAccessToken response = api.createOauthOpenshiftIoV1OAuthAccessToken(body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create an OAuthAuthorizeToken
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createOauthOpenshiftIoV1OAuthAuthorizeTokenTest() throws ApiException {
        ComGithubOpenshiftApiOauthV1OAuthAuthorizeToken body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        ComGithubOpenshiftApiOauthV1OAuthAuthorizeToken response = api.createOauthOpenshiftIoV1OAuthAuthorizeToken(body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create an OAuthClient
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createOauthOpenshiftIoV1OAuthClientTest() throws ApiException {
        ComGithubOpenshiftApiOauthV1OAuthClient body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        ComGithubOpenshiftApiOauthV1OAuthClient response = api.createOauthOpenshiftIoV1OAuthClient(body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create an OAuthClientAuthorization
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createOauthOpenshiftIoV1OAuthClientAuthorizationTest() throws ApiException {
        ComGithubOpenshiftApiOauthV1OAuthClientAuthorization body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        ComGithubOpenshiftApiOauthV1OAuthClientAuthorization response = api.createOauthOpenshiftIoV1OAuthClientAuthorization(body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of OAuthAccessToken
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOauthOpenshiftIoV1CollectionOAuthAccessTokenTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String _continue = null;
        String dryRun = null;
        String fieldSelector = null;
        Integer gracePeriodSeconds = null;
        String labelSelector = null;
        Integer limit = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteOauthOpenshiftIoV1CollectionOAuthAccessToken(pretty, allowWatchBookmarks, body, _continue, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of OAuthAuthorizeToken
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOauthOpenshiftIoV1CollectionOAuthAuthorizeTokenTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String _continue = null;
        String dryRun = null;
        String fieldSelector = null;
        Integer gracePeriodSeconds = null;
        String labelSelector = null;
        Integer limit = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteOauthOpenshiftIoV1CollectionOAuthAuthorizeToken(pretty, allowWatchBookmarks, body, _continue, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of OAuthClient
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOauthOpenshiftIoV1CollectionOAuthClientTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String _continue = null;
        String dryRun = null;
        String fieldSelector = null;
        Integer gracePeriodSeconds = null;
        String labelSelector = null;
        Integer limit = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteOauthOpenshiftIoV1CollectionOAuthClient(pretty, allowWatchBookmarks, body, _continue, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of OAuthClientAuthorization
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOauthOpenshiftIoV1CollectionOAuthClientAuthorizationTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String _continue = null;
        String dryRun = null;
        String fieldSelector = null;
        Integer gracePeriodSeconds = null;
        String labelSelector = null;
        Integer limit = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteOauthOpenshiftIoV1CollectionOAuthClientAuthorization(pretty, allowWatchBookmarks, body, _continue, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete an OAuthAccessToken
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOauthOpenshiftIoV1OAuthAccessTokenTest() throws ApiException {
        String name = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteOauthOpenshiftIoV1OAuthAccessToken(name, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete an OAuthAuthorizeToken
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOauthOpenshiftIoV1OAuthAuthorizeTokenTest() throws ApiException {
        String name = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteOauthOpenshiftIoV1OAuthAuthorizeToken(name, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete an OAuthClient
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOauthOpenshiftIoV1OAuthClientTest() throws ApiException {
        String name = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteOauthOpenshiftIoV1OAuthClient(name, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete an OAuthClientAuthorization
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOauthOpenshiftIoV1OAuthClientAuthorizationTest() throws ApiException {
        String name = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteOauthOpenshiftIoV1OAuthClientAuthorization(name, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * get available resources
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOauthOpenshiftIoV1APIResourcesTest() throws ApiException {
        IoK8sApimachineryPkgApisMetaV1APIResourceList response = api.getOauthOpenshiftIoV1APIResources();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind OAuthAccessToken
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listOauthOpenshiftIoV1OAuthAccessTokenTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        ComGithubOpenshiftApiOauthV1OAuthAccessTokenList response = api.listOauthOpenshiftIoV1OAuthAccessToken(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind OAuthAuthorizeToken
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listOauthOpenshiftIoV1OAuthAuthorizeTokenTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        ComGithubOpenshiftApiOauthV1OAuthAuthorizeTokenList response = api.listOauthOpenshiftIoV1OAuthAuthorizeToken(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind OAuthClient
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listOauthOpenshiftIoV1OAuthClientTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        ComGithubOpenshiftApiOauthV1OAuthClientList response = api.listOauthOpenshiftIoV1OAuthClient(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind OAuthClientAuthorization
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listOauthOpenshiftIoV1OAuthClientAuthorizationTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        ComGithubOpenshiftApiOauthV1OAuthClientAuthorizationList response = api.listOauthOpenshiftIoV1OAuthClientAuthorization(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified OAuthAccessToken
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchOauthOpenshiftIoV1OAuthAccessTokenTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        Boolean force = null;
        ComGithubOpenshiftApiOauthV1OAuthAccessToken response = api.patchOauthOpenshiftIoV1OAuthAccessToken(name, body, pretty, dryRun, fieldManager, force);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified OAuthAuthorizeToken
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchOauthOpenshiftIoV1OAuthAuthorizeTokenTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        Boolean force = null;
        ComGithubOpenshiftApiOauthV1OAuthAuthorizeToken response = api.patchOauthOpenshiftIoV1OAuthAuthorizeToken(name, body, pretty, dryRun, fieldManager, force);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified OAuthClient
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchOauthOpenshiftIoV1OAuthClientTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        Boolean force = null;
        ComGithubOpenshiftApiOauthV1OAuthClient response = api.patchOauthOpenshiftIoV1OAuthClient(name, body, pretty, dryRun, fieldManager, force);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified OAuthClientAuthorization
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchOauthOpenshiftIoV1OAuthClientAuthorizationTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        Boolean force = null;
        ComGithubOpenshiftApiOauthV1OAuthClientAuthorization response = api.patchOauthOpenshiftIoV1OAuthClientAuthorization(name, body, pretty, dryRun, fieldManager, force);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified OAuthAccessToken
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readOauthOpenshiftIoV1OAuthAccessTokenTest() throws ApiException {
        String name = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        ComGithubOpenshiftApiOauthV1OAuthAccessToken response = api.readOauthOpenshiftIoV1OAuthAccessToken(name, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified OAuthAuthorizeToken
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readOauthOpenshiftIoV1OAuthAuthorizeTokenTest() throws ApiException {
        String name = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        ComGithubOpenshiftApiOauthV1OAuthAuthorizeToken response = api.readOauthOpenshiftIoV1OAuthAuthorizeToken(name, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified OAuthClient
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readOauthOpenshiftIoV1OAuthClientTest() throws ApiException {
        String name = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        ComGithubOpenshiftApiOauthV1OAuthClient response = api.readOauthOpenshiftIoV1OAuthClient(name, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified OAuthClientAuthorization
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readOauthOpenshiftIoV1OAuthClientAuthorizationTest() throws ApiException {
        String name = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        ComGithubOpenshiftApiOauthV1OAuthClientAuthorization response = api.readOauthOpenshiftIoV1OAuthClientAuthorization(name, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified OAuthAccessToken
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceOauthOpenshiftIoV1OAuthAccessTokenTest() throws ApiException {
        String name = null;
        ComGithubOpenshiftApiOauthV1OAuthAccessToken body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        ComGithubOpenshiftApiOauthV1OAuthAccessToken response = api.replaceOauthOpenshiftIoV1OAuthAccessToken(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified OAuthAuthorizeToken
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceOauthOpenshiftIoV1OAuthAuthorizeTokenTest() throws ApiException {
        String name = null;
        ComGithubOpenshiftApiOauthV1OAuthAuthorizeToken body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        ComGithubOpenshiftApiOauthV1OAuthAuthorizeToken response = api.replaceOauthOpenshiftIoV1OAuthAuthorizeToken(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified OAuthClient
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceOauthOpenshiftIoV1OAuthClientTest() throws ApiException {
        String name = null;
        ComGithubOpenshiftApiOauthV1OAuthClient body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        ComGithubOpenshiftApiOauthV1OAuthClient response = api.replaceOauthOpenshiftIoV1OAuthClient(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified OAuthClientAuthorization
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceOauthOpenshiftIoV1OAuthClientAuthorizationTest() throws ApiException {
        String name = null;
        ComGithubOpenshiftApiOauthV1OAuthClientAuthorization body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        ComGithubOpenshiftApiOauthV1OAuthClientAuthorization response = api.replaceOauthOpenshiftIoV1OAuthClientAuthorization(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind OAuthAccessToken. deprecated: use the &#39;watch&#39; parameter with a list operation instead, filtered to a single item with the &#39;fieldSelector&#39; parameter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchOauthOpenshiftIoV1OAuthAccessTokenTest() throws ApiException {
        String name = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchOauthOpenshiftIoV1OAuthAccessToken(name, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of OAuthAccessToken. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchOauthOpenshiftIoV1OAuthAccessTokenListTest() throws ApiException {
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchOauthOpenshiftIoV1OAuthAccessTokenList(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind OAuthAuthorizeToken. deprecated: use the &#39;watch&#39; parameter with a list operation instead, filtered to a single item with the &#39;fieldSelector&#39; parameter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchOauthOpenshiftIoV1OAuthAuthorizeTokenTest() throws ApiException {
        String name = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchOauthOpenshiftIoV1OAuthAuthorizeToken(name, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of OAuthAuthorizeToken. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchOauthOpenshiftIoV1OAuthAuthorizeTokenListTest() throws ApiException {
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchOauthOpenshiftIoV1OAuthAuthorizeTokenList(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind OAuthClient. deprecated: use the &#39;watch&#39; parameter with a list operation instead, filtered to a single item with the &#39;fieldSelector&#39; parameter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchOauthOpenshiftIoV1OAuthClientTest() throws ApiException {
        String name = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchOauthOpenshiftIoV1OAuthClient(name, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind OAuthClientAuthorization. deprecated: use the &#39;watch&#39; parameter with a list operation instead, filtered to a single item with the &#39;fieldSelector&#39; parameter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchOauthOpenshiftIoV1OAuthClientAuthorizationTest() throws ApiException {
        String name = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchOauthOpenshiftIoV1OAuthClientAuthorization(name, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of OAuthClientAuthorization. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchOauthOpenshiftIoV1OAuthClientAuthorizationListTest() throws ApiException {
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchOauthOpenshiftIoV1OAuthClientAuthorizationList(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of OAuthClient. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchOauthOpenshiftIoV1OAuthClientListTest() throws ApiException {
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchOauthOpenshiftIoV1OAuthClientList(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
}
