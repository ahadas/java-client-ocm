/*
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package open_cluster_management.io;

import open_cluster_management.ApiException;
import open_cluster_management.io.ComGithubOpenshiftApiUserV1Group;
import open_cluster_management.io.ComGithubOpenshiftApiUserV1GroupList;
import open_cluster_management.io.ComGithubOpenshiftApiUserV1Identity;
import open_cluster_management.io.ComGithubOpenshiftApiUserV1IdentityList;
import open_cluster_management.io.ComGithubOpenshiftApiUserV1User;
import open_cluster_management.io.ComGithubOpenshiftApiUserV1UserIdentityMapping;
import open_cluster_management.io.ComGithubOpenshiftApiUserV1UserList;
import open_cluster_management.io.IoK8sApimachineryPkgApisMetaV1APIResourceList;
import open_cluster_management.io.IoK8sApimachineryPkgApisMetaV1DeleteOptions;
import open_cluster_management.io.IoK8sApimachineryPkgApisMetaV1Patch;
import open_cluster_management.io.IoK8sApimachineryPkgApisMetaV1Status;
import open_cluster_management.io.IoK8sApimachineryPkgApisMetaV1WatchEvent;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserOpenshiftIoV1Api
 */
@Ignore
public class UserOpenshiftIoV1ApiTest {

    private final UserOpenshiftIoV1Api api = new UserOpenshiftIoV1Api();

    
    /**
     * 
     *
     * create a Group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUserOpenshiftIoV1GroupTest() throws ApiException {
        ComGithubOpenshiftApiUserV1Group body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        ComGithubOpenshiftApiUserV1Group response = api.createUserOpenshiftIoV1Group(body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create an Identity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUserOpenshiftIoV1IdentityTest() throws ApiException {
        ComGithubOpenshiftApiUserV1Identity body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        ComGithubOpenshiftApiUserV1Identity response = api.createUserOpenshiftIoV1Identity(body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create an User
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUserOpenshiftIoV1UserTest() throws ApiException {
        ComGithubOpenshiftApiUserV1User body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        ComGithubOpenshiftApiUserV1User response = api.createUserOpenshiftIoV1User(body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create an UserIdentityMapping
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUserOpenshiftIoV1UserIdentityMappingTest() throws ApiException {
        ComGithubOpenshiftApiUserV1UserIdentityMapping body = null;
        String dryRun = null;
        String fieldManager = null;
        String pretty = null;
        ComGithubOpenshiftApiUserV1UserIdentityMapping response = api.createUserOpenshiftIoV1UserIdentityMapping(body, dryRun, fieldManager, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of Group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserOpenshiftIoV1CollectionGroupTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String _continue = null;
        String dryRun = null;
        String fieldSelector = null;
        Integer gracePeriodSeconds = null;
        String labelSelector = null;
        Integer limit = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteUserOpenshiftIoV1CollectionGroup(pretty, allowWatchBookmarks, body, _continue, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of Identity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserOpenshiftIoV1CollectionIdentityTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String _continue = null;
        String dryRun = null;
        String fieldSelector = null;
        Integer gracePeriodSeconds = null;
        String labelSelector = null;
        Integer limit = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteUserOpenshiftIoV1CollectionIdentity(pretty, allowWatchBookmarks, body, _continue, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of User
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserOpenshiftIoV1CollectionUserTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String _continue = null;
        String dryRun = null;
        String fieldSelector = null;
        Integer gracePeriodSeconds = null;
        String labelSelector = null;
        Integer limit = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteUserOpenshiftIoV1CollectionUser(pretty, allowWatchBookmarks, body, _continue, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a Group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserOpenshiftIoV1GroupTest() throws ApiException {
        String name = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteUserOpenshiftIoV1Group(name, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete an Identity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserOpenshiftIoV1IdentityTest() throws ApiException {
        String name = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteUserOpenshiftIoV1Identity(name, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete an User
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserOpenshiftIoV1UserTest() throws ApiException {
        String name = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteUserOpenshiftIoV1User(name, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete an UserIdentityMapping
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserOpenshiftIoV1UserIdentityMappingTest() throws ApiException {
        String name = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteUserOpenshiftIoV1UserIdentityMapping(name, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * get available resources
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserOpenshiftIoV1APIResourcesTest() throws ApiException {
        IoK8sApimachineryPkgApisMetaV1APIResourceList response = api.getUserOpenshiftIoV1APIResources();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listUserOpenshiftIoV1GroupTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        ComGithubOpenshiftApiUserV1GroupList response = api.listUserOpenshiftIoV1Group(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Identity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listUserOpenshiftIoV1IdentityTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        ComGithubOpenshiftApiUserV1IdentityList response = api.listUserOpenshiftIoV1Identity(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind User
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listUserOpenshiftIoV1UserTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        ComGithubOpenshiftApiUserV1UserList response = api.listUserOpenshiftIoV1User(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified Group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchUserOpenshiftIoV1GroupTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        Boolean force = null;
        ComGithubOpenshiftApiUserV1Group response = api.patchUserOpenshiftIoV1Group(name, body, pretty, dryRun, fieldManager, force);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified Identity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchUserOpenshiftIoV1IdentityTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        Boolean force = null;
        ComGithubOpenshiftApiUserV1Identity response = api.patchUserOpenshiftIoV1Identity(name, body, pretty, dryRun, fieldManager, force);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified User
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchUserOpenshiftIoV1UserTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        Boolean force = null;
        ComGithubOpenshiftApiUserV1User response = api.patchUserOpenshiftIoV1User(name, body, pretty, dryRun, fieldManager, force);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified UserIdentityMapping
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchUserOpenshiftIoV1UserIdentityMappingTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        Boolean force = null;
        ComGithubOpenshiftApiUserV1UserIdentityMapping response = api.patchUserOpenshiftIoV1UserIdentityMapping(name, body, pretty, dryRun, fieldManager, force);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified Group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readUserOpenshiftIoV1GroupTest() throws ApiException {
        String name = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        ComGithubOpenshiftApiUserV1Group response = api.readUserOpenshiftIoV1Group(name, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified Identity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readUserOpenshiftIoV1IdentityTest() throws ApiException {
        String name = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        ComGithubOpenshiftApiUserV1Identity response = api.readUserOpenshiftIoV1Identity(name, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified User
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readUserOpenshiftIoV1UserTest() throws ApiException {
        String name = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        ComGithubOpenshiftApiUserV1User response = api.readUserOpenshiftIoV1User(name, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified UserIdentityMapping
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readUserOpenshiftIoV1UserIdentityMappingTest() throws ApiException {
        String name = null;
        String pretty = null;
        ComGithubOpenshiftApiUserV1UserIdentityMapping response = api.readUserOpenshiftIoV1UserIdentityMapping(name, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified Group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceUserOpenshiftIoV1GroupTest() throws ApiException {
        String name = null;
        ComGithubOpenshiftApiUserV1Group body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        ComGithubOpenshiftApiUserV1Group response = api.replaceUserOpenshiftIoV1Group(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified Identity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceUserOpenshiftIoV1IdentityTest() throws ApiException {
        String name = null;
        ComGithubOpenshiftApiUserV1Identity body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        ComGithubOpenshiftApiUserV1Identity response = api.replaceUserOpenshiftIoV1Identity(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified User
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceUserOpenshiftIoV1UserTest() throws ApiException {
        String name = null;
        ComGithubOpenshiftApiUserV1User body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        ComGithubOpenshiftApiUserV1User response = api.replaceUserOpenshiftIoV1User(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified UserIdentityMapping
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceUserOpenshiftIoV1UserIdentityMappingTest() throws ApiException {
        String name = null;
        ComGithubOpenshiftApiUserV1UserIdentityMapping body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        ComGithubOpenshiftApiUserV1UserIdentityMapping response = api.replaceUserOpenshiftIoV1UserIdentityMapping(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind Group. deprecated: use the &#39;watch&#39; parameter with a list operation instead, filtered to a single item with the &#39;fieldSelector&#39; parameter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchUserOpenshiftIoV1GroupTest() throws ApiException {
        String name = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchUserOpenshiftIoV1Group(name, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of Group. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchUserOpenshiftIoV1GroupListTest() throws ApiException {
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchUserOpenshiftIoV1GroupList(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind Identity. deprecated: use the &#39;watch&#39; parameter with a list operation instead, filtered to a single item with the &#39;fieldSelector&#39; parameter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchUserOpenshiftIoV1IdentityTest() throws ApiException {
        String name = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchUserOpenshiftIoV1Identity(name, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of Identity. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchUserOpenshiftIoV1IdentityListTest() throws ApiException {
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchUserOpenshiftIoV1IdentityList(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind User. deprecated: use the &#39;watch&#39; parameter with a list operation instead, filtered to a single item with the &#39;fieldSelector&#39; parameter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchUserOpenshiftIoV1UserTest() throws ApiException {
        String name = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchUserOpenshiftIoV1User(name, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of User. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchUserOpenshiftIoV1UserListTest() throws ApiException {
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchUserOpenshiftIoV1UserList(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
}
