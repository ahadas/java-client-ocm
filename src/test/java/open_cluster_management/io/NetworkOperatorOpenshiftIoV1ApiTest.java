/*
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package open_cluster_management.io;

import open_cluster_management.ApiException;
import open_cluster_management.io.IoK8sApimachineryPkgApisMetaV1DeleteOptions;
import open_cluster_management.io.IoK8sApimachineryPkgApisMetaV1Patch;
import open_cluster_management.io.IoK8sApimachineryPkgApisMetaV1Status;
import open_cluster_management.io.IoOpenshiftOperatorNetworkV1OperatorPKI;
import open_cluster_management.io.IoOpenshiftOperatorNetworkV1OperatorPKIList;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for NetworkOperatorOpenshiftIoV1Api
 */
@Ignore
public class NetworkOperatorOpenshiftIoV1ApiTest {

    private final NetworkOperatorOpenshiftIoV1Api api = new NetworkOperatorOpenshiftIoV1Api();

    
    /**
     * 
     *
     * create an OperatorPKI
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNetworkOperatorOpenshiftIoV1NamespacedOperatorPKITest() throws ApiException {
        String namespace = null;
        IoOpenshiftOperatorNetworkV1OperatorPKI body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftOperatorNetworkV1OperatorPKI response = api.createNetworkOperatorOpenshiftIoV1NamespacedOperatorPKI(namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of OperatorPKI
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNetworkOperatorOpenshiftIoV1CollectionNamespacedOperatorPKITest() throws ApiException {
        String namespace = null;
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteNetworkOperatorOpenshiftIoV1CollectionNamespacedOperatorPKI(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete an OperatorPKI
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNetworkOperatorOpenshiftIoV1NamespacedOperatorPKITest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteNetworkOperatorOpenshiftIoV1NamespacedOperatorPKI(name, namespace, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind OperatorPKI
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNetworkOperatorOpenshiftIoV1NamespacedOperatorPKITest() throws ApiException {
        String namespace = null;
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftOperatorNetworkV1OperatorPKIList response = api.listNetworkOperatorOpenshiftIoV1NamespacedOperatorPKI(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind OperatorPKI
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNetworkOperatorOpenshiftIoV1OperatorPKIForAllNamespacesTest() throws ApiException {
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftOperatorNetworkV1OperatorPKIList response = api.listNetworkOperatorOpenshiftIoV1OperatorPKIForAllNamespaces(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified OperatorPKI
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNetworkOperatorOpenshiftIoV1NamespacedOperatorPKITest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftOperatorNetworkV1OperatorPKI response = api.patchNetworkOperatorOpenshiftIoV1NamespacedOperatorPKI(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified OperatorPKI
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNetworkOperatorOpenshiftIoV1NamespacedOperatorPKITest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftOperatorNetworkV1OperatorPKI response = api.readNetworkOperatorOpenshiftIoV1NamespacedOperatorPKI(name, namespace, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified OperatorPKI
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNetworkOperatorOpenshiftIoV1NamespacedOperatorPKITest() throws ApiException {
        String name = null;
        String namespace = null;
        IoOpenshiftOperatorNetworkV1OperatorPKI body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftOperatorNetworkV1OperatorPKI response = api.replaceNetworkOperatorOpenshiftIoV1NamespacedOperatorPKI(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
}
