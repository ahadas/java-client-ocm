/*
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package open_cluster_management.io;

import open_cluster_management.ApiException;
import open_cluster_management.io.ComGithubOpenshiftApiSecurityV1PodSecurityPolicyReview;
import open_cluster_management.io.ComGithubOpenshiftApiSecurityV1PodSecurityPolicySelfSubjectReview;
import open_cluster_management.io.ComGithubOpenshiftApiSecurityV1PodSecurityPolicySubjectReview;
import open_cluster_management.io.ComGithubOpenshiftApiSecurityV1RangeAllocation;
import open_cluster_management.io.ComGithubOpenshiftApiSecurityV1RangeAllocationList;
import open_cluster_management.io.IoK8sApimachineryPkgApisMetaV1APIResourceList;
import open_cluster_management.io.IoK8sApimachineryPkgApisMetaV1DeleteOptions;
import open_cluster_management.io.IoK8sApimachineryPkgApisMetaV1Patch;
import open_cluster_management.io.IoK8sApimachineryPkgApisMetaV1Status;
import open_cluster_management.io.IoK8sApimachineryPkgApisMetaV1WatchEvent;
import open_cluster_management.io.IoOpenshiftSecurityV1SecurityContextConstraints;
import open_cluster_management.io.IoOpenshiftSecurityV1SecurityContextConstraintsList;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SecurityOpenshiftIoV1Api
 */
@Ignore
public class SecurityOpenshiftIoV1ApiTest {

    private final SecurityOpenshiftIoV1Api api = new SecurityOpenshiftIoV1Api();

    
    /**
     * 
     *
     * create a PodSecurityPolicyReview
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSecurityOpenshiftIoV1NamespacedPodSecurityPolicyReviewTest() throws ApiException {
        String namespace = null;
        ComGithubOpenshiftApiSecurityV1PodSecurityPolicyReview body = null;
        String dryRun = null;
        String fieldManager = null;
        String pretty = null;
        ComGithubOpenshiftApiSecurityV1PodSecurityPolicyReview response = api.createSecurityOpenshiftIoV1NamespacedPodSecurityPolicyReview(namespace, body, dryRun, fieldManager, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a PodSecurityPolicySelfSubjectReview
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSecurityOpenshiftIoV1NamespacedPodSecurityPolicySelfSubjectReviewTest() throws ApiException {
        String namespace = null;
        ComGithubOpenshiftApiSecurityV1PodSecurityPolicySelfSubjectReview body = null;
        String dryRun = null;
        String fieldManager = null;
        String pretty = null;
        ComGithubOpenshiftApiSecurityV1PodSecurityPolicySelfSubjectReview response = api.createSecurityOpenshiftIoV1NamespacedPodSecurityPolicySelfSubjectReview(namespace, body, dryRun, fieldManager, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a PodSecurityPolicySubjectReview
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSecurityOpenshiftIoV1NamespacedPodSecurityPolicySubjectReviewTest() throws ApiException {
        String namespace = null;
        ComGithubOpenshiftApiSecurityV1PodSecurityPolicySubjectReview body = null;
        String dryRun = null;
        String fieldManager = null;
        String pretty = null;
        ComGithubOpenshiftApiSecurityV1PodSecurityPolicySubjectReview response = api.createSecurityOpenshiftIoV1NamespacedPodSecurityPolicySubjectReview(namespace, body, dryRun, fieldManager, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a RangeAllocation
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSecurityOpenshiftIoV1RangeAllocationTest() throws ApiException {
        ComGithubOpenshiftApiSecurityV1RangeAllocation body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        ComGithubOpenshiftApiSecurityV1RangeAllocation response = api.createSecurityOpenshiftIoV1RangeAllocation(body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create SecurityContextConstraints
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSecurityOpenshiftIoV1SecurityContextConstraintsTest() throws ApiException {
        IoOpenshiftSecurityV1SecurityContextConstraints body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftSecurityV1SecurityContextConstraints response = api.createSecurityOpenshiftIoV1SecurityContextConstraints(body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of RangeAllocation
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSecurityOpenshiftIoV1CollectionRangeAllocationTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String _continue = null;
        String dryRun = null;
        String fieldSelector = null;
        Integer gracePeriodSeconds = null;
        String labelSelector = null;
        Integer limit = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteSecurityOpenshiftIoV1CollectionRangeAllocation(pretty, allowWatchBookmarks, body, _continue, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of SecurityContextConstraints
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSecurityOpenshiftIoV1CollectionSecurityContextConstraintsTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteSecurityOpenshiftIoV1CollectionSecurityContextConstraints(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a RangeAllocation
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSecurityOpenshiftIoV1RangeAllocationTest() throws ApiException {
        String name = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteSecurityOpenshiftIoV1RangeAllocation(name, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete SecurityContextConstraints
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSecurityOpenshiftIoV1SecurityContextConstraintsTest() throws ApiException {
        String name = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteSecurityOpenshiftIoV1SecurityContextConstraints(name, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * get available resources
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSecurityOpenshiftIoV1APIResourcesTest() throws ApiException {
        IoK8sApimachineryPkgApisMetaV1APIResourceList response = api.getSecurityOpenshiftIoV1APIResources();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind RangeAllocation
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listSecurityOpenshiftIoV1RangeAllocationTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        ComGithubOpenshiftApiSecurityV1RangeAllocationList response = api.listSecurityOpenshiftIoV1RangeAllocation(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind SecurityContextConstraints
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listSecurityOpenshiftIoV1SecurityContextConstraintsTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftSecurityV1SecurityContextConstraintsList response = api.listSecurityOpenshiftIoV1SecurityContextConstraints(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified RangeAllocation
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchSecurityOpenshiftIoV1RangeAllocationTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        Boolean force = null;
        ComGithubOpenshiftApiSecurityV1RangeAllocation response = api.patchSecurityOpenshiftIoV1RangeAllocation(name, body, pretty, dryRun, fieldManager, force);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified SecurityContextConstraints
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchSecurityOpenshiftIoV1SecurityContextConstraintsTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftSecurityV1SecurityContextConstraints response = api.patchSecurityOpenshiftIoV1SecurityContextConstraints(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified RangeAllocation
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readSecurityOpenshiftIoV1RangeAllocationTest() throws ApiException {
        String name = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        ComGithubOpenshiftApiSecurityV1RangeAllocation response = api.readSecurityOpenshiftIoV1RangeAllocation(name, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified SecurityContextConstraints
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readSecurityOpenshiftIoV1SecurityContextConstraintsTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftSecurityV1SecurityContextConstraints response = api.readSecurityOpenshiftIoV1SecurityContextConstraints(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified RangeAllocation
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceSecurityOpenshiftIoV1RangeAllocationTest() throws ApiException {
        String name = null;
        ComGithubOpenshiftApiSecurityV1RangeAllocation body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        ComGithubOpenshiftApiSecurityV1RangeAllocation response = api.replaceSecurityOpenshiftIoV1RangeAllocation(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified SecurityContextConstraints
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceSecurityOpenshiftIoV1SecurityContextConstraintsTest() throws ApiException {
        String name = null;
        IoOpenshiftSecurityV1SecurityContextConstraints body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftSecurityV1SecurityContextConstraints response = api.replaceSecurityOpenshiftIoV1SecurityContextConstraints(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind RangeAllocation. deprecated: use the &#39;watch&#39; parameter with a list operation instead, filtered to a single item with the &#39;fieldSelector&#39; parameter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchSecurityOpenshiftIoV1RangeAllocationTest() throws ApiException {
        String name = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchSecurityOpenshiftIoV1RangeAllocation(name, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of RangeAllocation. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchSecurityOpenshiftIoV1RangeAllocationListTest() throws ApiException {
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchSecurityOpenshiftIoV1RangeAllocationList(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind SecurityContextConstraints. deprecated: use the &#39;watch&#39; parameter with a list operation instead, filtered to a single item with the &#39;fieldSelector&#39; parameter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchSecurityOpenshiftIoV1SecurityContextConstraintsTest() throws ApiException {
        String name = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchSecurityOpenshiftIoV1SecurityContextConstraints(name, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of SecurityContextConstraints. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchSecurityOpenshiftIoV1SecurityContextConstraintsListTest() throws ApiException {
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchSecurityOpenshiftIoV1SecurityContextConstraintsList(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
}
