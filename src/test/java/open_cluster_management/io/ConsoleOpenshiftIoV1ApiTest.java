/*
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package open_cluster_management.io;

import open_cluster_management.ApiException;
import open_cluster_management.io.IoK8sApimachineryPkgApisMetaV1DeleteOptions;
import open_cluster_management.io.IoK8sApimachineryPkgApisMetaV1Patch;
import open_cluster_management.io.IoK8sApimachineryPkgApisMetaV1Status;
import open_cluster_management.io.IoOpenshiftConsoleV1ConsoleCLIDownload;
import open_cluster_management.io.IoOpenshiftConsoleV1ConsoleCLIDownloadList;
import open_cluster_management.io.IoOpenshiftConsoleV1ConsoleExternalLogLink;
import open_cluster_management.io.IoOpenshiftConsoleV1ConsoleExternalLogLinkList;
import open_cluster_management.io.IoOpenshiftConsoleV1ConsoleLink;
import open_cluster_management.io.IoOpenshiftConsoleV1ConsoleLinkList;
import open_cluster_management.io.IoOpenshiftConsoleV1ConsoleNotification;
import open_cluster_management.io.IoOpenshiftConsoleV1ConsoleNotificationList;
import open_cluster_management.io.IoOpenshiftConsoleV1ConsoleYAMLSample;
import open_cluster_management.io.IoOpenshiftConsoleV1ConsoleYAMLSampleList;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ConsoleOpenshiftIoV1Api
 */
@Ignore
public class ConsoleOpenshiftIoV1ApiTest {

    private final ConsoleOpenshiftIoV1Api api = new ConsoleOpenshiftIoV1Api();

    
    /**
     * 
     *
     * create a ConsoleCLIDownload
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createConsoleOpenshiftIoV1ConsoleCLIDownloadTest() throws ApiException {
        IoOpenshiftConsoleV1ConsoleCLIDownload body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConsoleV1ConsoleCLIDownload response = api.createConsoleOpenshiftIoV1ConsoleCLIDownload(body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a ConsoleExternalLogLink
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createConsoleOpenshiftIoV1ConsoleExternalLogLinkTest() throws ApiException {
        IoOpenshiftConsoleV1ConsoleExternalLogLink body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConsoleV1ConsoleExternalLogLink response = api.createConsoleOpenshiftIoV1ConsoleExternalLogLink(body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a ConsoleLink
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createConsoleOpenshiftIoV1ConsoleLinkTest() throws ApiException {
        IoOpenshiftConsoleV1ConsoleLink body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConsoleV1ConsoleLink response = api.createConsoleOpenshiftIoV1ConsoleLink(body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a ConsoleNotification
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createConsoleOpenshiftIoV1ConsoleNotificationTest() throws ApiException {
        IoOpenshiftConsoleV1ConsoleNotification body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConsoleV1ConsoleNotification response = api.createConsoleOpenshiftIoV1ConsoleNotification(body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a ConsoleYAMLSample
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createConsoleOpenshiftIoV1ConsoleYAMLSampleTest() throws ApiException {
        IoOpenshiftConsoleV1ConsoleYAMLSample body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConsoleV1ConsoleYAMLSample response = api.createConsoleOpenshiftIoV1ConsoleYAMLSample(body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of ConsoleCLIDownload
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteConsoleOpenshiftIoV1CollectionConsoleCLIDownloadTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteConsoleOpenshiftIoV1CollectionConsoleCLIDownload(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of ConsoleExternalLogLink
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteConsoleOpenshiftIoV1CollectionConsoleExternalLogLinkTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteConsoleOpenshiftIoV1CollectionConsoleExternalLogLink(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of ConsoleLink
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteConsoleOpenshiftIoV1CollectionConsoleLinkTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteConsoleOpenshiftIoV1CollectionConsoleLink(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of ConsoleNotification
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteConsoleOpenshiftIoV1CollectionConsoleNotificationTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteConsoleOpenshiftIoV1CollectionConsoleNotification(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of ConsoleYAMLSample
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteConsoleOpenshiftIoV1CollectionConsoleYAMLSampleTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteConsoleOpenshiftIoV1CollectionConsoleYAMLSample(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a ConsoleCLIDownload
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteConsoleOpenshiftIoV1ConsoleCLIDownloadTest() throws ApiException {
        String name = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteConsoleOpenshiftIoV1ConsoleCLIDownload(name, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a ConsoleExternalLogLink
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteConsoleOpenshiftIoV1ConsoleExternalLogLinkTest() throws ApiException {
        String name = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteConsoleOpenshiftIoV1ConsoleExternalLogLink(name, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a ConsoleLink
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteConsoleOpenshiftIoV1ConsoleLinkTest() throws ApiException {
        String name = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteConsoleOpenshiftIoV1ConsoleLink(name, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a ConsoleNotification
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteConsoleOpenshiftIoV1ConsoleNotificationTest() throws ApiException {
        String name = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteConsoleOpenshiftIoV1ConsoleNotification(name, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a ConsoleYAMLSample
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteConsoleOpenshiftIoV1ConsoleYAMLSampleTest() throws ApiException {
        String name = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteConsoleOpenshiftIoV1ConsoleYAMLSample(name, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind ConsoleCLIDownload
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listConsoleOpenshiftIoV1ConsoleCLIDownloadTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftConsoleV1ConsoleCLIDownloadList response = api.listConsoleOpenshiftIoV1ConsoleCLIDownload(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind ConsoleExternalLogLink
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listConsoleOpenshiftIoV1ConsoleExternalLogLinkTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftConsoleV1ConsoleExternalLogLinkList response = api.listConsoleOpenshiftIoV1ConsoleExternalLogLink(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind ConsoleLink
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listConsoleOpenshiftIoV1ConsoleLinkTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftConsoleV1ConsoleLinkList response = api.listConsoleOpenshiftIoV1ConsoleLink(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind ConsoleNotification
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listConsoleOpenshiftIoV1ConsoleNotificationTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftConsoleV1ConsoleNotificationList response = api.listConsoleOpenshiftIoV1ConsoleNotification(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind ConsoleYAMLSample
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listConsoleOpenshiftIoV1ConsoleYAMLSampleTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftConsoleV1ConsoleYAMLSampleList response = api.listConsoleOpenshiftIoV1ConsoleYAMLSample(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified ConsoleCLIDownload
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchConsoleOpenshiftIoV1ConsoleCLIDownloadTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConsoleV1ConsoleCLIDownload response = api.patchConsoleOpenshiftIoV1ConsoleCLIDownload(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified ConsoleCLIDownload
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchConsoleOpenshiftIoV1ConsoleCLIDownloadStatusTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConsoleV1ConsoleCLIDownload response = api.patchConsoleOpenshiftIoV1ConsoleCLIDownloadStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified ConsoleExternalLogLink
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchConsoleOpenshiftIoV1ConsoleExternalLogLinkTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConsoleV1ConsoleExternalLogLink response = api.patchConsoleOpenshiftIoV1ConsoleExternalLogLink(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified ConsoleExternalLogLink
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchConsoleOpenshiftIoV1ConsoleExternalLogLinkStatusTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConsoleV1ConsoleExternalLogLink response = api.patchConsoleOpenshiftIoV1ConsoleExternalLogLinkStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified ConsoleLink
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchConsoleOpenshiftIoV1ConsoleLinkTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConsoleV1ConsoleLink response = api.patchConsoleOpenshiftIoV1ConsoleLink(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified ConsoleLink
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchConsoleOpenshiftIoV1ConsoleLinkStatusTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConsoleV1ConsoleLink response = api.patchConsoleOpenshiftIoV1ConsoleLinkStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified ConsoleNotification
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchConsoleOpenshiftIoV1ConsoleNotificationTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConsoleV1ConsoleNotification response = api.patchConsoleOpenshiftIoV1ConsoleNotification(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified ConsoleNotification
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchConsoleOpenshiftIoV1ConsoleNotificationStatusTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConsoleV1ConsoleNotification response = api.patchConsoleOpenshiftIoV1ConsoleNotificationStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified ConsoleYAMLSample
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchConsoleOpenshiftIoV1ConsoleYAMLSampleTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConsoleV1ConsoleYAMLSample response = api.patchConsoleOpenshiftIoV1ConsoleYAMLSample(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified ConsoleCLIDownload
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readConsoleOpenshiftIoV1ConsoleCLIDownloadTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftConsoleV1ConsoleCLIDownload response = api.readConsoleOpenshiftIoV1ConsoleCLIDownload(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified ConsoleCLIDownload
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readConsoleOpenshiftIoV1ConsoleCLIDownloadStatusTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftConsoleV1ConsoleCLIDownload response = api.readConsoleOpenshiftIoV1ConsoleCLIDownloadStatus(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified ConsoleExternalLogLink
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readConsoleOpenshiftIoV1ConsoleExternalLogLinkTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftConsoleV1ConsoleExternalLogLink response = api.readConsoleOpenshiftIoV1ConsoleExternalLogLink(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified ConsoleExternalLogLink
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readConsoleOpenshiftIoV1ConsoleExternalLogLinkStatusTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftConsoleV1ConsoleExternalLogLink response = api.readConsoleOpenshiftIoV1ConsoleExternalLogLinkStatus(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified ConsoleLink
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readConsoleOpenshiftIoV1ConsoleLinkTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftConsoleV1ConsoleLink response = api.readConsoleOpenshiftIoV1ConsoleLink(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified ConsoleLink
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readConsoleOpenshiftIoV1ConsoleLinkStatusTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftConsoleV1ConsoleLink response = api.readConsoleOpenshiftIoV1ConsoleLinkStatus(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified ConsoleNotification
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readConsoleOpenshiftIoV1ConsoleNotificationTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftConsoleV1ConsoleNotification response = api.readConsoleOpenshiftIoV1ConsoleNotification(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified ConsoleNotification
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readConsoleOpenshiftIoV1ConsoleNotificationStatusTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftConsoleV1ConsoleNotification response = api.readConsoleOpenshiftIoV1ConsoleNotificationStatus(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified ConsoleYAMLSample
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readConsoleOpenshiftIoV1ConsoleYAMLSampleTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftConsoleV1ConsoleYAMLSample response = api.readConsoleOpenshiftIoV1ConsoleYAMLSample(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified ConsoleCLIDownload
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceConsoleOpenshiftIoV1ConsoleCLIDownloadTest() throws ApiException {
        String name = null;
        IoOpenshiftConsoleV1ConsoleCLIDownload body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConsoleV1ConsoleCLIDownload response = api.replaceConsoleOpenshiftIoV1ConsoleCLIDownload(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified ConsoleCLIDownload
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceConsoleOpenshiftIoV1ConsoleCLIDownloadStatusTest() throws ApiException {
        String name = null;
        IoOpenshiftConsoleV1ConsoleCLIDownload body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConsoleV1ConsoleCLIDownload response = api.replaceConsoleOpenshiftIoV1ConsoleCLIDownloadStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified ConsoleExternalLogLink
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceConsoleOpenshiftIoV1ConsoleExternalLogLinkTest() throws ApiException {
        String name = null;
        IoOpenshiftConsoleV1ConsoleExternalLogLink body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConsoleV1ConsoleExternalLogLink response = api.replaceConsoleOpenshiftIoV1ConsoleExternalLogLink(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified ConsoleExternalLogLink
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceConsoleOpenshiftIoV1ConsoleExternalLogLinkStatusTest() throws ApiException {
        String name = null;
        IoOpenshiftConsoleV1ConsoleExternalLogLink body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConsoleV1ConsoleExternalLogLink response = api.replaceConsoleOpenshiftIoV1ConsoleExternalLogLinkStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified ConsoleLink
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceConsoleOpenshiftIoV1ConsoleLinkTest() throws ApiException {
        String name = null;
        IoOpenshiftConsoleV1ConsoleLink body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConsoleV1ConsoleLink response = api.replaceConsoleOpenshiftIoV1ConsoleLink(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified ConsoleLink
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceConsoleOpenshiftIoV1ConsoleLinkStatusTest() throws ApiException {
        String name = null;
        IoOpenshiftConsoleV1ConsoleLink body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConsoleV1ConsoleLink response = api.replaceConsoleOpenshiftIoV1ConsoleLinkStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified ConsoleNotification
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceConsoleOpenshiftIoV1ConsoleNotificationTest() throws ApiException {
        String name = null;
        IoOpenshiftConsoleV1ConsoleNotification body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConsoleV1ConsoleNotification response = api.replaceConsoleOpenshiftIoV1ConsoleNotification(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified ConsoleNotification
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceConsoleOpenshiftIoV1ConsoleNotificationStatusTest() throws ApiException {
        String name = null;
        IoOpenshiftConsoleV1ConsoleNotification body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConsoleV1ConsoleNotification response = api.replaceConsoleOpenshiftIoV1ConsoleNotificationStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified ConsoleYAMLSample
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceConsoleOpenshiftIoV1ConsoleYAMLSampleTest() throws ApiException {
        String name = null;
        IoOpenshiftConsoleV1ConsoleYAMLSample body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftConsoleV1ConsoleYAMLSample response = api.replaceConsoleOpenshiftIoV1ConsoleYAMLSample(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
}
