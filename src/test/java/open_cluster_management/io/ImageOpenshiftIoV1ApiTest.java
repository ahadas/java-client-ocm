/*
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package open_cluster_management.io;

import open_cluster_management.ApiException;
import open_cluster_management.io.ComGithubOpenshiftApiImageV1Image;
import open_cluster_management.io.ComGithubOpenshiftApiImageV1ImageList;
import open_cluster_management.io.ComGithubOpenshiftApiImageV1ImageSignature;
import open_cluster_management.io.ComGithubOpenshiftApiImageV1ImageStream;
import open_cluster_management.io.ComGithubOpenshiftApiImageV1ImageStreamImage;
import open_cluster_management.io.ComGithubOpenshiftApiImageV1ImageStreamImport;
import open_cluster_management.io.ComGithubOpenshiftApiImageV1ImageStreamLayers;
import open_cluster_management.io.ComGithubOpenshiftApiImageV1ImageStreamList;
import open_cluster_management.io.ComGithubOpenshiftApiImageV1ImageStreamMapping;
import open_cluster_management.io.ComGithubOpenshiftApiImageV1ImageStreamTag;
import open_cluster_management.io.ComGithubOpenshiftApiImageV1ImageStreamTagList;
import open_cluster_management.io.IoK8sApiCoreV1SecretList;
import open_cluster_management.io.IoK8sApimachineryPkgApisMetaV1APIResourceList;
import open_cluster_management.io.IoK8sApimachineryPkgApisMetaV1DeleteOptions;
import open_cluster_management.io.IoK8sApimachineryPkgApisMetaV1Patch;
import open_cluster_management.io.IoK8sApimachineryPkgApisMetaV1Status;
import open_cluster_management.io.IoK8sApimachineryPkgApisMetaV1WatchEvent;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ImageOpenshiftIoV1Api
 */
@Ignore
public class ImageOpenshiftIoV1ApiTest {

    private final ImageOpenshiftIoV1Api api = new ImageOpenshiftIoV1Api();

    
    /**
     * 
     *
     * create an Image
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createImageOpenshiftIoV1ImageTest() throws ApiException {
        ComGithubOpenshiftApiImageV1Image body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        ComGithubOpenshiftApiImageV1Image response = api.createImageOpenshiftIoV1Image(body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create an ImageSignature
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createImageOpenshiftIoV1ImageSignatureTest() throws ApiException {
        ComGithubOpenshiftApiImageV1ImageSignature body = null;
        String dryRun = null;
        String fieldManager = null;
        String pretty = null;
        ComGithubOpenshiftApiImageV1ImageSignature response = api.createImageOpenshiftIoV1ImageSignature(body, dryRun, fieldManager, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create an ImageStream
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createImageOpenshiftIoV1NamespacedImageStreamTest() throws ApiException {
        String namespace = null;
        ComGithubOpenshiftApiImageV1ImageStream body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        ComGithubOpenshiftApiImageV1ImageStream response = api.createImageOpenshiftIoV1NamespacedImageStream(namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create an ImageStreamImport
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createImageOpenshiftIoV1NamespacedImageStreamImportTest() throws ApiException {
        String namespace = null;
        ComGithubOpenshiftApiImageV1ImageStreamImport body = null;
        String dryRun = null;
        String fieldManager = null;
        String pretty = null;
        ComGithubOpenshiftApiImageV1ImageStreamImport response = api.createImageOpenshiftIoV1NamespacedImageStreamImport(namespace, body, dryRun, fieldManager, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create an ImageStreamMapping
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createImageOpenshiftIoV1NamespacedImageStreamMappingTest() throws ApiException {
        String namespace = null;
        ComGithubOpenshiftApiImageV1ImageStreamMapping body = null;
        String dryRun = null;
        String fieldManager = null;
        String pretty = null;
        ComGithubOpenshiftApiImageV1ImageStreamMapping response = api.createImageOpenshiftIoV1NamespacedImageStreamMapping(namespace, body, dryRun, fieldManager, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create an ImageStreamTag
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createImageOpenshiftIoV1NamespacedImageStreamTagTest() throws ApiException {
        String namespace = null;
        ComGithubOpenshiftApiImageV1ImageStreamTag body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        ComGithubOpenshiftApiImageV1ImageStreamTag response = api.createImageOpenshiftIoV1NamespacedImageStreamTag(namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of Image
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteImageOpenshiftIoV1CollectionImageTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String _continue = null;
        String dryRun = null;
        String fieldSelector = null;
        Integer gracePeriodSeconds = null;
        String labelSelector = null;
        Integer limit = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteImageOpenshiftIoV1CollectionImage(pretty, allowWatchBookmarks, body, _continue, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of ImageStream
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteImageOpenshiftIoV1CollectionNamespacedImageStreamTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String _continue = null;
        String dryRun = null;
        String fieldSelector = null;
        Integer gracePeriodSeconds = null;
        String labelSelector = null;
        Integer limit = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteImageOpenshiftIoV1CollectionNamespacedImageStream(namespace, pretty, allowWatchBookmarks, body, _continue, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete an Image
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteImageOpenshiftIoV1ImageTest() throws ApiException {
        String name = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteImageOpenshiftIoV1Image(name, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete an ImageSignature
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteImageOpenshiftIoV1ImageSignatureTest() throws ApiException {
        String name = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String pretty = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteImageOpenshiftIoV1ImageSignature(name, dryRun, gracePeriodSeconds, orphanDependents, pretty, propagationPolicy, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete an ImageStream
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteImageOpenshiftIoV1NamespacedImageStreamTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteImageOpenshiftIoV1NamespacedImageStream(name, namespace, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete an ImageStreamTag
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteImageOpenshiftIoV1NamespacedImageStreamTagTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteImageOpenshiftIoV1NamespacedImageStreamTag(name, namespace, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * get available resources
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getImageOpenshiftIoV1APIResourcesTest() throws ApiException {
        IoK8sApimachineryPkgApisMetaV1APIResourceList response = api.getImageOpenshiftIoV1APIResources();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Image
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listImageOpenshiftIoV1ImageTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        ComGithubOpenshiftApiImageV1ImageList response = api.listImageOpenshiftIoV1Image(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind ImageStream
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listImageOpenshiftIoV1ImageStreamForAllNamespacesTest() throws ApiException {
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        ComGithubOpenshiftApiImageV1ImageStreamList response = api.listImageOpenshiftIoV1ImageStreamForAllNamespaces(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind ImageStreamTag
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listImageOpenshiftIoV1ImageStreamTagForAllNamespacesTest() throws ApiException {
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        ComGithubOpenshiftApiImageV1ImageStreamTagList response = api.listImageOpenshiftIoV1ImageStreamTagForAllNamespaces(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind ImageStream
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listImageOpenshiftIoV1NamespacedImageStreamTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        ComGithubOpenshiftApiImageV1ImageStreamList response = api.listImageOpenshiftIoV1NamespacedImageStream(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind ImageStreamTag
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listImageOpenshiftIoV1NamespacedImageStreamTagTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        ComGithubOpenshiftApiImageV1ImageStreamTagList response = api.listImageOpenshiftIoV1NamespacedImageStreamTag(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified Image
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchImageOpenshiftIoV1ImageTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        Boolean force = null;
        ComGithubOpenshiftApiImageV1Image response = api.patchImageOpenshiftIoV1Image(name, body, pretty, dryRun, fieldManager, force);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified ImageStream
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchImageOpenshiftIoV1NamespacedImageStreamTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        Boolean force = null;
        ComGithubOpenshiftApiImageV1ImageStream response = api.patchImageOpenshiftIoV1NamespacedImageStream(name, namespace, body, pretty, dryRun, fieldManager, force);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified ImageStream
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchImageOpenshiftIoV1NamespacedImageStreamStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        Boolean force = null;
        ComGithubOpenshiftApiImageV1ImageStream response = api.patchImageOpenshiftIoV1NamespacedImageStreamStatus(name, namespace, body, pretty, dryRun, fieldManager, force);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified ImageStreamTag
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchImageOpenshiftIoV1NamespacedImageStreamTagTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        Boolean force = null;
        ComGithubOpenshiftApiImageV1ImageStreamTag response = api.patchImageOpenshiftIoV1NamespacedImageStreamTag(name, namespace, body, pretty, dryRun, fieldManager, force);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified Image
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readImageOpenshiftIoV1ImageTest() throws ApiException {
        String name = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        ComGithubOpenshiftApiImageV1Image response = api.readImageOpenshiftIoV1Image(name, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified ImageStream
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readImageOpenshiftIoV1NamespacedImageStreamTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        ComGithubOpenshiftApiImageV1ImageStream response = api.readImageOpenshiftIoV1NamespacedImageStream(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified ImageStreamImage
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readImageOpenshiftIoV1NamespacedImageStreamImageTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        ComGithubOpenshiftApiImageV1ImageStreamImage response = api.readImageOpenshiftIoV1NamespacedImageStreamImage(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read layers of the specified ImageStream
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readImageOpenshiftIoV1NamespacedImageStreamLayersTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        ComGithubOpenshiftApiImageV1ImageStreamLayers response = api.readImageOpenshiftIoV1NamespacedImageStreamLayers(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read secrets of the specified ImageStream
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readImageOpenshiftIoV1NamespacedImageStreamSecretsTest() throws ApiException {
        String name = null;
        String namespace = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApiCoreV1SecretList response = api.readImageOpenshiftIoV1NamespacedImageStreamSecrets(name, namespace, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified ImageStream
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readImageOpenshiftIoV1NamespacedImageStreamStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        ComGithubOpenshiftApiImageV1ImageStream response = api.readImageOpenshiftIoV1NamespacedImageStreamStatus(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified ImageStreamTag
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readImageOpenshiftIoV1NamespacedImageStreamTagTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        ComGithubOpenshiftApiImageV1ImageStreamTag response = api.readImageOpenshiftIoV1NamespacedImageStreamTag(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified Image
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceImageOpenshiftIoV1ImageTest() throws ApiException {
        String name = null;
        ComGithubOpenshiftApiImageV1Image body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        ComGithubOpenshiftApiImageV1Image response = api.replaceImageOpenshiftIoV1Image(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified ImageStream
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceImageOpenshiftIoV1NamespacedImageStreamTest() throws ApiException {
        String name = null;
        String namespace = null;
        ComGithubOpenshiftApiImageV1ImageStream body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        ComGithubOpenshiftApiImageV1ImageStream response = api.replaceImageOpenshiftIoV1NamespacedImageStream(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified ImageStream
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceImageOpenshiftIoV1NamespacedImageStreamStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        ComGithubOpenshiftApiImageV1ImageStream body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        ComGithubOpenshiftApiImageV1ImageStream response = api.replaceImageOpenshiftIoV1NamespacedImageStreamStatus(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified ImageStreamTag
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceImageOpenshiftIoV1NamespacedImageStreamTagTest() throws ApiException {
        String name = null;
        String namespace = null;
        ComGithubOpenshiftApiImageV1ImageStreamTag body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        ComGithubOpenshiftApiImageV1ImageStreamTag response = api.replaceImageOpenshiftIoV1NamespacedImageStreamTag(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind Image. deprecated: use the &#39;watch&#39; parameter with a list operation instead, filtered to a single item with the &#39;fieldSelector&#39; parameter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchImageOpenshiftIoV1ImageTest() throws ApiException {
        String name = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchImageOpenshiftIoV1Image(name, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of Image. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchImageOpenshiftIoV1ImageListTest() throws ApiException {
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchImageOpenshiftIoV1ImageList(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of ImageStream. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchImageOpenshiftIoV1ImageStreamListForAllNamespacesTest() throws ApiException {
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchImageOpenshiftIoV1ImageStreamListForAllNamespaces(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind ImageStream. deprecated: use the &#39;watch&#39; parameter with a list operation instead, filtered to a single item with the &#39;fieldSelector&#39; parameter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchImageOpenshiftIoV1NamespacedImageStreamTest() throws ApiException {
        String name = null;
        String namespace = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchImageOpenshiftIoV1NamespacedImageStream(name, namespace, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of ImageStream. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchImageOpenshiftIoV1NamespacedImageStreamListTest() throws ApiException {
        String namespace = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchImageOpenshiftIoV1NamespacedImageStreamList(namespace, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
}
