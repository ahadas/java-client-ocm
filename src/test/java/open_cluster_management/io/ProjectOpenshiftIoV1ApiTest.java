/*
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package open_cluster_management.io;

import open_cluster_management.ApiException;
import open_cluster_management.io.ComGithubOpenshiftApiProjectV1Project;
import open_cluster_management.io.ComGithubOpenshiftApiProjectV1ProjectList;
import open_cluster_management.io.ComGithubOpenshiftApiProjectV1ProjectRequest;
import open_cluster_management.io.IoK8sApimachineryPkgApisMetaV1APIResourceList;
import open_cluster_management.io.IoK8sApimachineryPkgApisMetaV1DeleteOptions;
import open_cluster_management.io.IoK8sApimachineryPkgApisMetaV1Patch;
import open_cluster_management.io.IoK8sApimachineryPkgApisMetaV1Status;
import open_cluster_management.io.IoK8sApimachineryPkgApisMetaV1WatchEvent;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectOpenshiftIoV1Api
 */
@Ignore
public class ProjectOpenshiftIoV1ApiTest {

    private final ProjectOpenshiftIoV1Api api = new ProjectOpenshiftIoV1Api();

    
    /**
     * 
     *
     * create a Project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createProjectOpenshiftIoV1ProjectTest() throws ApiException {
        ComGithubOpenshiftApiProjectV1Project body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        ComGithubOpenshiftApiProjectV1Project response = api.createProjectOpenshiftIoV1Project(body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a ProjectRequest
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createProjectOpenshiftIoV1ProjectRequestTest() throws ApiException {
        ComGithubOpenshiftApiProjectV1ProjectRequest body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        ComGithubOpenshiftApiProjectV1ProjectRequest response = api.createProjectOpenshiftIoV1ProjectRequest(body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a Project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteProjectOpenshiftIoV1ProjectTest() throws ApiException {
        String name = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteProjectOpenshiftIoV1Project(name, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * get available resources
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProjectOpenshiftIoV1APIResourcesTest() throws ApiException {
        IoK8sApimachineryPkgApisMetaV1APIResourceList response = api.getProjectOpenshiftIoV1APIResources();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listProjectOpenshiftIoV1ProjectTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        ComGithubOpenshiftApiProjectV1ProjectList response = api.listProjectOpenshiftIoV1Project(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind ProjectRequest
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listProjectOpenshiftIoV1ProjectRequestTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.listProjectOpenshiftIoV1ProjectRequest(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified Project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchProjectOpenshiftIoV1ProjectTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        Boolean force = null;
        ComGithubOpenshiftApiProjectV1Project response = api.patchProjectOpenshiftIoV1Project(name, body, pretty, dryRun, fieldManager, force);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified Project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readProjectOpenshiftIoV1ProjectTest() throws ApiException {
        String name = null;
        String pretty = null;
        ComGithubOpenshiftApiProjectV1Project response = api.readProjectOpenshiftIoV1Project(name, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified Project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceProjectOpenshiftIoV1ProjectTest() throws ApiException {
        String name = null;
        ComGithubOpenshiftApiProjectV1Project body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        ComGithubOpenshiftApiProjectV1Project response = api.replaceProjectOpenshiftIoV1Project(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind Project. deprecated: use the &#39;watch&#39; parameter with a list operation instead, filtered to a single item with the &#39;fieldSelector&#39; parameter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchProjectOpenshiftIoV1ProjectTest() throws ApiException {
        String name = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchProjectOpenshiftIoV1Project(name, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of Project. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchProjectOpenshiftIoV1ProjectListTest() throws ApiException {
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchProjectOpenshiftIoV1ProjectList(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
}
