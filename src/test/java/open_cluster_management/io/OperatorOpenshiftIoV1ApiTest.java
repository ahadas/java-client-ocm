/*
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package open_cluster_management.io;

import open_cluster_management.ApiException;
import open_cluster_management.io.IoK8sApiAutoscalingV1Scale;
import open_cluster_management.io.IoK8sApimachineryPkgApisMetaV1DeleteOptions;
import open_cluster_management.io.IoK8sApimachineryPkgApisMetaV1Patch;
import open_cluster_management.io.IoK8sApimachineryPkgApisMetaV1Status;
import open_cluster_management.io.IoOpenshiftOperatorV1Authentication;
import open_cluster_management.io.IoOpenshiftOperatorV1AuthenticationList;
import open_cluster_management.io.IoOpenshiftOperatorV1Console;
import open_cluster_management.io.IoOpenshiftOperatorV1ConsoleList;
import open_cluster_management.io.IoOpenshiftOperatorV1DNS;
import open_cluster_management.io.IoOpenshiftOperatorV1DNSList;
import open_cluster_management.io.IoOpenshiftOperatorV1IngressController;
import open_cluster_management.io.IoOpenshiftOperatorV1IngressControllerList;
import open_cluster_management.io.IoOpenshiftOperatorV1KubeAPIServer;
import open_cluster_management.io.IoOpenshiftOperatorV1KubeAPIServerList;
import open_cluster_management.io.IoOpenshiftOperatorV1KubeControllerManager;
import open_cluster_management.io.IoOpenshiftOperatorV1KubeControllerManagerList;
import open_cluster_management.io.IoOpenshiftOperatorV1KubeScheduler;
import open_cluster_management.io.IoOpenshiftOperatorV1KubeSchedulerList;
import open_cluster_management.io.IoOpenshiftOperatorV1Network;
import open_cluster_management.io.IoOpenshiftOperatorV1NetworkList;
import open_cluster_management.io.IoOpenshiftOperatorV1OpenShiftAPIServer;
import open_cluster_management.io.IoOpenshiftOperatorV1OpenShiftAPIServerList;
import open_cluster_management.io.IoOpenshiftOperatorV1OpenShiftControllerManager;
import open_cluster_management.io.IoOpenshiftOperatorV1OpenShiftControllerManagerList;
import open_cluster_management.io.IoOpenshiftOperatorV1ServiceCA;
import open_cluster_management.io.IoOpenshiftOperatorV1ServiceCAList;
import open_cluster_management.io.IoOpenshiftOperatorV1ServiceCatalogAPIServer;
import open_cluster_management.io.IoOpenshiftOperatorV1ServiceCatalogAPIServerList;
import open_cluster_management.io.IoOpenshiftOperatorV1ServiceCatalogControllerManager;
import open_cluster_management.io.IoOpenshiftOperatorV1ServiceCatalogControllerManagerList;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OperatorOpenshiftIoV1Api
 */
@Ignore
public class OperatorOpenshiftIoV1ApiTest {

    private final OperatorOpenshiftIoV1Api api = new OperatorOpenshiftIoV1Api();

    
    /**
     * 
     *
     * create an Authentication
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createOperatorOpenshiftIoV1AuthenticationTest() throws ApiException {
        IoOpenshiftOperatorV1Authentication body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftOperatorV1Authentication response = api.createOperatorOpenshiftIoV1Authentication(body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a Console
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createOperatorOpenshiftIoV1ConsoleTest() throws ApiException {
        IoOpenshiftOperatorV1Console body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftOperatorV1Console response = api.createOperatorOpenshiftIoV1Console(body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a DNS
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createOperatorOpenshiftIoV1DNSTest() throws ApiException {
        IoOpenshiftOperatorV1DNS body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftOperatorV1DNS response = api.createOperatorOpenshiftIoV1DNS(body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a KubeAPIServer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createOperatorOpenshiftIoV1KubeAPIServerTest() throws ApiException {
        IoOpenshiftOperatorV1KubeAPIServer body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftOperatorV1KubeAPIServer response = api.createOperatorOpenshiftIoV1KubeAPIServer(body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a KubeControllerManager
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createOperatorOpenshiftIoV1KubeControllerManagerTest() throws ApiException {
        IoOpenshiftOperatorV1KubeControllerManager body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftOperatorV1KubeControllerManager response = api.createOperatorOpenshiftIoV1KubeControllerManager(body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a KubeScheduler
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createOperatorOpenshiftIoV1KubeSchedulerTest() throws ApiException {
        IoOpenshiftOperatorV1KubeScheduler body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftOperatorV1KubeScheduler response = api.createOperatorOpenshiftIoV1KubeScheduler(body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create an IngressController
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createOperatorOpenshiftIoV1NamespacedIngressControllerTest() throws ApiException {
        String namespace = null;
        IoOpenshiftOperatorV1IngressController body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftOperatorV1IngressController response = api.createOperatorOpenshiftIoV1NamespacedIngressController(namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a Network
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createOperatorOpenshiftIoV1NetworkTest() throws ApiException {
        IoOpenshiftOperatorV1Network body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftOperatorV1Network response = api.createOperatorOpenshiftIoV1Network(body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create an OpenShiftAPIServer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createOperatorOpenshiftIoV1OpenShiftAPIServerTest() throws ApiException {
        IoOpenshiftOperatorV1OpenShiftAPIServer body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftOperatorV1OpenShiftAPIServer response = api.createOperatorOpenshiftIoV1OpenShiftAPIServer(body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create an OpenShiftControllerManager
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createOperatorOpenshiftIoV1OpenShiftControllerManagerTest() throws ApiException {
        IoOpenshiftOperatorV1OpenShiftControllerManager body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftOperatorV1OpenShiftControllerManager response = api.createOperatorOpenshiftIoV1OpenShiftControllerManager(body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a ServiceCA
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createOperatorOpenshiftIoV1ServiceCATest() throws ApiException {
        IoOpenshiftOperatorV1ServiceCA body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftOperatorV1ServiceCA response = api.createOperatorOpenshiftIoV1ServiceCA(body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a ServiceCatalogAPIServer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createOperatorOpenshiftIoV1ServiceCatalogAPIServerTest() throws ApiException {
        IoOpenshiftOperatorV1ServiceCatalogAPIServer body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftOperatorV1ServiceCatalogAPIServer response = api.createOperatorOpenshiftIoV1ServiceCatalogAPIServer(body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a ServiceCatalogControllerManager
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createOperatorOpenshiftIoV1ServiceCatalogControllerManagerTest() throws ApiException {
        IoOpenshiftOperatorV1ServiceCatalogControllerManager body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftOperatorV1ServiceCatalogControllerManager response = api.createOperatorOpenshiftIoV1ServiceCatalogControllerManager(body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete an Authentication
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOperatorOpenshiftIoV1AuthenticationTest() throws ApiException {
        String name = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteOperatorOpenshiftIoV1Authentication(name, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of Authentication
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOperatorOpenshiftIoV1CollectionAuthenticationTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteOperatorOpenshiftIoV1CollectionAuthentication(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of Console
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOperatorOpenshiftIoV1CollectionConsoleTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteOperatorOpenshiftIoV1CollectionConsole(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of DNS
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOperatorOpenshiftIoV1CollectionDNSTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteOperatorOpenshiftIoV1CollectionDNS(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of KubeAPIServer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOperatorOpenshiftIoV1CollectionKubeAPIServerTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteOperatorOpenshiftIoV1CollectionKubeAPIServer(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of KubeControllerManager
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOperatorOpenshiftIoV1CollectionKubeControllerManagerTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteOperatorOpenshiftIoV1CollectionKubeControllerManager(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of KubeScheduler
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOperatorOpenshiftIoV1CollectionKubeSchedulerTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteOperatorOpenshiftIoV1CollectionKubeScheduler(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of IngressController
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOperatorOpenshiftIoV1CollectionNamespacedIngressControllerTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteOperatorOpenshiftIoV1CollectionNamespacedIngressController(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of Network
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOperatorOpenshiftIoV1CollectionNetworkTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteOperatorOpenshiftIoV1CollectionNetwork(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of OpenShiftAPIServer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOperatorOpenshiftIoV1CollectionOpenShiftAPIServerTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteOperatorOpenshiftIoV1CollectionOpenShiftAPIServer(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of OpenShiftControllerManager
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOperatorOpenshiftIoV1CollectionOpenShiftControllerManagerTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteOperatorOpenshiftIoV1CollectionOpenShiftControllerManager(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of ServiceCA
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOperatorOpenshiftIoV1CollectionServiceCATest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteOperatorOpenshiftIoV1CollectionServiceCA(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of ServiceCatalogAPIServer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOperatorOpenshiftIoV1CollectionServiceCatalogAPIServerTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteOperatorOpenshiftIoV1CollectionServiceCatalogAPIServer(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of ServiceCatalogControllerManager
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOperatorOpenshiftIoV1CollectionServiceCatalogControllerManagerTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteOperatorOpenshiftIoV1CollectionServiceCatalogControllerManager(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a Console
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOperatorOpenshiftIoV1ConsoleTest() throws ApiException {
        String name = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteOperatorOpenshiftIoV1Console(name, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a DNS
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOperatorOpenshiftIoV1DNSTest() throws ApiException {
        String name = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteOperatorOpenshiftIoV1DNS(name, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a KubeAPIServer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOperatorOpenshiftIoV1KubeAPIServerTest() throws ApiException {
        String name = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteOperatorOpenshiftIoV1KubeAPIServer(name, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a KubeControllerManager
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOperatorOpenshiftIoV1KubeControllerManagerTest() throws ApiException {
        String name = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteOperatorOpenshiftIoV1KubeControllerManager(name, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a KubeScheduler
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOperatorOpenshiftIoV1KubeSchedulerTest() throws ApiException {
        String name = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteOperatorOpenshiftIoV1KubeScheduler(name, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete an IngressController
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOperatorOpenshiftIoV1NamespacedIngressControllerTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteOperatorOpenshiftIoV1NamespacedIngressController(name, namespace, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a Network
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOperatorOpenshiftIoV1NetworkTest() throws ApiException {
        String name = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteOperatorOpenshiftIoV1Network(name, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete an OpenShiftAPIServer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOperatorOpenshiftIoV1OpenShiftAPIServerTest() throws ApiException {
        String name = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteOperatorOpenshiftIoV1OpenShiftAPIServer(name, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete an OpenShiftControllerManager
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOperatorOpenshiftIoV1OpenShiftControllerManagerTest() throws ApiException {
        String name = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteOperatorOpenshiftIoV1OpenShiftControllerManager(name, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a ServiceCA
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOperatorOpenshiftIoV1ServiceCATest() throws ApiException {
        String name = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteOperatorOpenshiftIoV1ServiceCA(name, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a ServiceCatalogAPIServer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOperatorOpenshiftIoV1ServiceCatalogAPIServerTest() throws ApiException {
        String name = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteOperatorOpenshiftIoV1ServiceCatalogAPIServer(name, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a ServiceCatalogControllerManager
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOperatorOpenshiftIoV1ServiceCatalogControllerManagerTest() throws ApiException {
        String name = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteOperatorOpenshiftIoV1ServiceCatalogControllerManager(name, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind Authentication
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listOperatorOpenshiftIoV1AuthenticationTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftOperatorV1AuthenticationList response = api.listOperatorOpenshiftIoV1Authentication(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind Console
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listOperatorOpenshiftIoV1ConsoleTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftOperatorV1ConsoleList response = api.listOperatorOpenshiftIoV1Console(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind DNS
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listOperatorOpenshiftIoV1DNSTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftOperatorV1DNSList response = api.listOperatorOpenshiftIoV1DNS(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind IngressController
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listOperatorOpenshiftIoV1IngressControllerForAllNamespacesTest() throws ApiException {
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftOperatorV1IngressControllerList response = api.listOperatorOpenshiftIoV1IngressControllerForAllNamespaces(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind KubeAPIServer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listOperatorOpenshiftIoV1KubeAPIServerTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftOperatorV1KubeAPIServerList response = api.listOperatorOpenshiftIoV1KubeAPIServer(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind KubeControllerManager
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listOperatorOpenshiftIoV1KubeControllerManagerTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftOperatorV1KubeControllerManagerList response = api.listOperatorOpenshiftIoV1KubeControllerManager(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind KubeScheduler
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listOperatorOpenshiftIoV1KubeSchedulerTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftOperatorV1KubeSchedulerList response = api.listOperatorOpenshiftIoV1KubeScheduler(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind IngressController
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listOperatorOpenshiftIoV1NamespacedIngressControllerTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftOperatorV1IngressControllerList response = api.listOperatorOpenshiftIoV1NamespacedIngressController(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind Network
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listOperatorOpenshiftIoV1NetworkTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftOperatorV1NetworkList response = api.listOperatorOpenshiftIoV1Network(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind OpenShiftAPIServer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listOperatorOpenshiftIoV1OpenShiftAPIServerTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftOperatorV1OpenShiftAPIServerList response = api.listOperatorOpenshiftIoV1OpenShiftAPIServer(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind OpenShiftControllerManager
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listOperatorOpenshiftIoV1OpenShiftControllerManagerTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftOperatorV1OpenShiftControllerManagerList response = api.listOperatorOpenshiftIoV1OpenShiftControllerManager(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind ServiceCA
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listOperatorOpenshiftIoV1ServiceCATest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftOperatorV1ServiceCAList response = api.listOperatorOpenshiftIoV1ServiceCA(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind ServiceCatalogAPIServer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listOperatorOpenshiftIoV1ServiceCatalogAPIServerTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftOperatorV1ServiceCatalogAPIServerList response = api.listOperatorOpenshiftIoV1ServiceCatalogAPIServer(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind ServiceCatalogControllerManager
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listOperatorOpenshiftIoV1ServiceCatalogControllerManagerTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoOpenshiftOperatorV1ServiceCatalogControllerManagerList response = api.listOperatorOpenshiftIoV1ServiceCatalogControllerManager(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified Authentication
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchOperatorOpenshiftIoV1AuthenticationTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftOperatorV1Authentication response = api.patchOperatorOpenshiftIoV1Authentication(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified Authentication
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchOperatorOpenshiftIoV1AuthenticationStatusTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftOperatorV1Authentication response = api.patchOperatorOpenshiftIoV1AuthenticationStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified Console
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchOperatorOpenshiftIoV1ConsoleTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftOperatorV1Console response = api.patchOperatorOpenshiftIoV1Console(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified Console
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchOperatorOpenshiftIoV1ConsoleStatusTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftOperatorV1Console response = api.patchOperatorOpenshiftIoV1ConsoleStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified DNS
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchOperatorOpenshiftIoV1DNSTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftOperatorV1DNS response = api.patchOperatorOpenshiftIoV1DNS(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified DNS
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchOperatorOpenshiftIoV1DNSStatusTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftOperatorV1DNS response = api.patchOperatorOpenshiftIoV1DNSStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified KubeAPIServer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchOperatorOpenshiftIoV1KubeAPIServerTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftOperatorV1KubeAPIServer response = api.patchOperatorOpenshiftIoV1KubeAPIServer(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified KubeAPIServer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchOperatorOpenshiftIoV1KubeAPIServerStatusTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftOperatorV1KubeAPIServer response = api.patchOperatorOpenshiftIoV1KubeAPIServerStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified KubeControllerManager
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchOperatorOpenshiftIoV1KubeControllerManagerTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftOperatorV1KubeControllerManager response = api.patchOperatorOpenshiftIoV1KubeControllerManager(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified KubeControllerManager
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchOperatorOpenshiftIoV1KubeControllerManagerStatusTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftOperatorV1KubeControllerManager response = api.patchOperatorOpenshiftIoV1KubeControllerManagerStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified KubeScheduler
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchOperatorOpenshiftIoV1KubeSchedulerTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftOperatorV1KubeScheduler response = api.patchOperatorOpenshiftIoV1KubeScheduler(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified KubeScheduler
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchOperatorOpenshiftIoV1KubeSchedulerStatusTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftOperatorV1KubeScheduler response = api.patchOperatorOpenshiftIoV1KubeSchedulerStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified IngressController
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchOperatorOpenshiftIoV1NamespacedIngressControllerTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftOperatorV1IngressController response = api.patchOperatorOpenshiftIoV1NamespacedIngressController(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update scale of the specified IngressController
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchOperatorOpenshiftIoV1NamespacedIngressControllerScaleTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoK8sApiAutoscalingV1Scale response = api.patchOperatorOpenshiftIoV1NamespacedIngressControllerScale(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified IngressController
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchOperatorOpenshiftIoV1NamespacedIngressControllerStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftOperatorV1IngressController response = api.patchOperatorOpenshiftIoV1NamespacedIngressControllerStatus(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified Network
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchOperatorOpenshiftIoV1NetworkTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftOperatorV1Network response = api.patchOperatorOpenshiftIoV1Network(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified OpenShiftAPIServer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchOperatorOpenshiftIoV1OpenShiftAPIServerTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftOperatorV1OpenShiftAPIServer response = api.patchOperatorOpenshiftIoV1OpenShiftAPIServer(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified OpenShiftAPIServer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchOperatorOpenshiftIoV1OpenShiftAPIServerStatusTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftOperatorV1OpenShiftAPIServer response = api.patchOperatorOpenshiftIoV1OpenShiftAPIServerStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified OpenShiftControllerManager
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchOperatorOpenshiftIoV1OpenShiftControllerManagerTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftOperatorV1OpenShiftControllerManager response = api.patchOperatorOpenshiftIoV1OpenShiftControllerManager(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified OpenShiftControllerManager
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchOperatorOpenshiftIoV1OpenShiftControllerManagerStatusTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftOperatorV1OpenShiftControllerManager response = api.patchOperatorOpenshiftIoV1OpenShiftControllerManagerStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified ServiceCA
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchOperatorOpenshiftIoV1ServiceCATest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftOperatorV1ServiceCA response = api.patchOperatorOpenshiftIoV1ServiceCA(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified ServiceCA
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchOperatorOpenshiftIoV1ServiceCAStatusTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftOperatorV1ServiceCA response = api.patchOperatorOpenshiftIoV1ServiceCAStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified ServiceCatalogAPIServer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchOperatorOpenshiftIoV1ServiceCatalogAPIServerTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftOperatorV1ServiceCatalogAPIServer response = api.patchOperatorOpenshiftIoV1ServiceCatalogAPIServer(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified ServiceCatalogAPIServer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchOperatorOpenshiftIoV1ServiceCatalogAPIServerStatusTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftOperatorV1ServiceCatalogAPIServer response = api.patchOperatorOpenshiftIoV1ServiceCatalogAPIServerStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified ServiceCatalogControllerManager
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchOperatorOpenshiftIoV1ServiceCatalogControllerManagerTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftOperatorV1ServiceCatalogControllerManager response = api.patchOperatorOpenshiftIoV1ServiceCatalogControllerManager(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified ServiceCatalogControllerManager
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchOperatorOpenshiftIoV1ServiceCatalogControllerManagerStatusTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftOperatorV1ServiceCatalogControllerManager response = api.patchOperatorOpenshiftIoV1ServiceCatalogControllerManagerStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified Authentication
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readOperatorOpenshiftIoV1AuthenticationTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftOperatorV1Authentication response = api.readOperatorOpenshiftIoV1Authentication(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified Authentication
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readOperatorOpenshiftIoV1AuthenticationStatusTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftOperatorV1Authentication response = api.readOperatorOpenshiftIoV1AuthenticationStatus(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified Console
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readOperatorOpenshiftIoV1ConsoleTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftOperatorV1Console response = api.readOperatorOpenshiftIoV1Console(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified Console
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readOperatorOpenshiftIoV1ConsoleStatusTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftOperatorV1Console response = api.readOperatorOpenshiftIoV1ConsoleStatus(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified DNS
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readOperatorOpenshiftIoV1DNSTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftOperatorV1DNS response = api.readOperatorOpenshiftIoV1DNS(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified DNS
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readOperatorOpenshiftIoV1DNSStatusTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftOperatorV1DNS response = api.readOperatorOpenshiftIoV1DNSStatus(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified KubeAPIServer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readOperatorOpenshiftIoV1KubeAPIServerTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftOperatorV1KubeAPIServer response = api.readOperatorOpenshiftIoV1KubeAPIServer(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified KubeAPIServer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readOperatorOpenshiftIoV1KubeAPIServerStatusTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftOperatorV1KubeAPIServer response = api.readOperatorOpenshiftIoV1KubeAPIServerStatus(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified KubeControllerManager
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readOperatorOpenshiftIoV1KubeControllerManagerTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftOperatorV1KubeControllerManager response = api.readOperatorOpenshiftIoV1KubeControllerManager(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified KubeControllerManager
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readOperatorOpenshiftIoV1KubeControllerManagerStatusTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftOperatorV1KubeControllerManager response = api.readOperatorOpenshiftIoV1KubeControllerManagerStatus(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified KubeScheduler
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readOperatorOpenshiftIoV1KubeSchedulerTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftOperatorV1KubeScheduler response = api.readOperatorOpenshiftIoV1KubeScheduler(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified KubeScheduler
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readOperatorOpenshiftIoV1KubeSchedulerStatusTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftOperatorV1KubeScheduler response = api.readOperatorOpenshiftIoV1KubeSchedulerStatus(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified IngressController
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readOperatorOpenshiftIoV1NamespacedIngressControllerTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftOperatorV1IngressController response = api.readOperatorOpenshiftIoV1NamespacedIngressController(name, namespace, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read scale of the specified IngressController
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readOperatorOpenshiftIoV1NamespacedIngressControllerScaleTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        String resourceVersion = null;
        IoK8sApiAutoscalingV1Scale response = api.readOperatorOpenshiftIoV1NamespacedIngressControllerScale(name, namespace, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified IngressController
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readOperatorOpenshiftIoV1NamespacedIngressControllerStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftOperatorV1IngressController response = api.readOperatorOpenshiftIoV1NamespacedIngressControllerStatus(name, namespace, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified Network
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readOperatorOpenshiftIoV1NetworkTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftOperatorV1Network response = api.readOperatorOpenshiftIoV1Network(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified OpenShiftAPIServer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readOperatorOpenshiftIoV1OpenShiftAPIServerTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftOperatorV1OpenShiftAPIServer response = api.readOperatorOpenshiftIoV1OpenShiftAPIServer(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified OpenShiftAPIServer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readOperatorOpenshiftIoV1OpenShiftAPIServerStatusTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftOperatorV1OpenShiftAPIServer response = api.readOperatorOpenshiftIoV1OpenShiftAPIServerStatus(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified OpenShiftControllerManager
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readOperatorOpenshiftIoV1OpenShiftControllerManagerTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftOperatorV1OpenShiftControllerManager response = api.readOperatorOpenshiftIoV1OpenShiftControllerManager(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified OpenShiftControllerManager
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readOperatorOpenshiftIoV1OpenShiftControllerManagerStatusTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftOperatorV1OpenShiftControllerManager response = api.readOperatorOpenshiftIoV1OpenShiftControllerManagerStatus(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified ServiceCA
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readOperatorOpenshiftIoV1ServiceCATest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftOperatorV1ServiceCA response = api.readOperatorOpenshiftIoV1ServiceCA(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified ServiceCA
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readOperatorOpenshiftIoV1ServiceCAStatusTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftOperatorV1ServiceCA response = api.readOperatorOpenshiftIoV1ServiceCAStatus(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified ServiceCatalogAPIServer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readOperatorOpenshiftIoV1ServiceCatalogAPIServerTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftOperatorV1ServiceCatalogAPIServer response = api.readOperatorOpenshiftIoV1ServiceCatalogAPIServer(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified ServiceCatalogAPIServer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readOperatorOpenshiftIoV1ServiceCatalogAPIServerStatusTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftOperatorV1ServiceCatalogAPIServer response = api.readOperatorOpenshiftIoV1ServiceCatalogAPIServerStatus(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified ServiceCatalogControllerManager
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readOperatorOpenshiftIoV1ServiceCatalogControllerManagerTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftOperatorV1ServiceCatalogControllerManager response = api.readOperatorOpenshiftIoV1ServiceCatalogControllerManager(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified ServiceCatalogControllerManager
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readOperatorOpenshiftIoV1ServiceCatalogControllerManagerStatusTest() throws ApiException {
        String name = null;
        String pretty = null;
        String resourceVersion = null;
        IoOpenshiftOperatorV1ServiceCatalogControllerManager response = api.readOperatorOpenshiftIoV1ServiceCatalogControllerManagerStatus(name, pretty, resourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified Authentication
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceOperatorOpenshiftIoV1AuthenticationTest() throws ApiException {
        String name = null;
        IoOpenshiftOperatorV1Authentication body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftOperatorV1Authentication response = api.replaceOperatorOpenshiftIoV1Authentication(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified Authentication
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceOperatorOpenshiftIoV1AuthenticationStatusTest() throws ApiException {
        String name = null;
        IoOpenshiftOperatorV1Authentication body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftOperatorV1Authentication response = api.replaceOperatorOpenshiftIoV1AuthenticationStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified Console
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceOperatorOpenshiftIoV1ConsoleTest() throws ApiException {
        String name = null;
        IoOpenshiftOperatorV1Console body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftOperatorV1Console response = api.replaceOperatorOpenshiftIoV1Console(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified Console
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceOperatorOpenshiftIoV1ConsoleStatusTest() throws ApiException {
        String name = null;
        IoOpenshiftOperatorV1Console body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftOperatorV1Console response = api.replaceOperatorOpenshiftIoV1ConsoleStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified DNS
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceOperatorOpenshiftIoV1DNSTest() throws ApiException {
        String name = null;
        IoOpenshiftOperatorV1DNS body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftOperatorV1DNS response = api.replaceOperatorOpenshiftIoV1DNS(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified DNS
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceOperatorOpenshiftIoV1DNSStatusTest() throws ApiException {
        String name = null;
        IoOpenshiftOperatorV1DNS body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftOperatorV1DNS response = api.replaceOperatorOpenshiftIoV1DNSStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified KubeAPIServer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceOperatorOpenshiftIoV1KubeAPIServerTest() throws ApiException {
        String name = null;
        IoOpenshiftOperatorV1KubeAPIServer body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftOperatorV1KubeAPIServer response = api.replaceOperatorOpenshiftIoV1KubeAPIServer(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified KubeAPIServer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceOperatorOpenshiftIoV1KubeAPIServerStatusTest() throws ApiException {
        String name = null;
        IoOpenshiftOperatorV1KubeAPIServer body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftOperatorV1KubeAPIServer response = api.replaceOperatorOpenshiftIoV1KubeAPIServerStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified KubeControllerManager
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceOperatorOpenshiftIoV1KubeControllerManagerTest() throws ApiException {
        String name = null;
        IoOpenshiftOperatorV1KubeControllerManager body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftOperatorV1KubeControllerManager response = api.replaceOperatorOpenshiftIoV1KubeControllerManager(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified KubeControllerManager
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceOperatorOpenshiftIoV1KubeControllerManagerStatusTest() throws ApiException {
        String name = null;
        IoOpenshiftOperatorV1KubeControllerManager body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftOperatorV1KubeControllerManager response = api.replaceOperatorOpenshiftIoV1KubeControllerManagerStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified KubeScheduler
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceOperatorOpenshiftIoV1KubeSchedulerTest() throws ApiException {
        String name = null;
        IoOpenshiftOperatorV1KubeScheduler body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftOperatorV1KubeScheduler response = api.replaceOperatorOpenshiftIoV1KubeScheduler(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified KubeScheduler
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceOperatorOpenshiftIoV1KubeSchedulerStatusTest() throws ApiException {
        String name = null;
        IoOpenshiftOperatorV1KubeScheduler body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftOperatorV1KubeScheduler response = api.replaceOperatorOpenshiftIoV1KubeSchedulerStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified IngressController
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceOperatorOpenshiftIoV1NamespacedIngressControllerTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoOpenshiftOperatorV1IngressController body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftOperatorV1IngressController response = api.replaceOperatorOpenshiftIoV1NamespacedIngressController(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace scale of the specified IngressController
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceOperatorOpenshiftIoV1NamespacedIngressControllerScaleTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApiAutoscalingV1Scale body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoK8sApiAutoscalingV1Scale response = api.replaceOperatorOpenshiftIoV1NamespacedIngressControllerScale(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified IngressController
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceOperatorOpenshiftIoV1NamespacedIngressControllerStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoOpenshiftOperatorV1IngressController body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftOperatorV1IngressController response = api.replaceOperatorOpenshiftIoV1NamespacedIngressControllerStatus(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified Network
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceOperatorOpenshiftIoV1NetworkTest() throws ApiException {
        String name = null;
        IoOpenshiftOperatorV1Network body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftOperatorV1Network response = api.replaceOperatorOpenshiftIoV1Network(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified OpenShiftAPIServer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceOperatorOpenshiftIoV1OpenShiftAPIServerTest() throws ApiException {
        String name = null;
        IoOpenshiftOperatorV1OpenShiftAPIServer body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftOperatorV1OpenShiftAPIServer response = api.replaceOperatorOpenshiftIoV1OpenShiftAPIServer(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified OpenShiftAPIServer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceOperatorOpenshiftIoV1OpenShiftAPIServerStatusTest() throws ApiException {
        String name = null;
        IoOpenshiftOperatorV1OpenShiftAPIServer body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftOperatorV1OpenShiftAPIServer response = api.replaceOperatorOpenshiftIoV1OpenShiftAPIServerStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified OpenShiftControllerManager
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceOperatorOpenshiftIoV1OpenShiftControllerManagerTest() throws ApiException {
        String name = null;
        IoOpenshiftOperatorV1OpenShiftControllerManager body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftOperatorV1OpenShiftControllerManager response = api.replaceOperatorOpenshiftIoV1OpenShiftControllerManager(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified OpenShiftControllerManager
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceOperatorOpenshiftIoV1OpenShiftControllerManagerStatusTest() throws ApiException {
        String name = null;
        IoOpenshiftOperatorV1OpenShiftControllerManager body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftOperatorV1OpenShiftControllerManager response = api.replaceOperatorOpenshiftIoV1OpenShiftControllerManagerStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified ServiceCA
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceOperatorOpenshiftIoV1ServiceCATest() throws ApiException {
        String name = null;
        IoOpenshiftOperatorV1ServiceCA body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftOperatorV1ServiceCA response = api.replaceOperatorOpenshiftIoV1ServiceCA(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified ServiceCA
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceOperatorOpenshiftIoV1ServiceCAStatusTest() throws ApiException {
        String name = null;
        IoOpenshiftOperatorV1ServiceCA body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftOperatorV1ServiceCA response = api.replaceOperatorOpenshiftIoV1ServiceCAStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified ServiceCatalogAPIServer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceOperatorOpenshiftIoV1ServiceCatalogAPIServerTest() throws ApiException {
        String name = null;
        IoOpenshiftOperatorV1ServiceCatalogAPIServer body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftOperatorV1ServiceCatalogAPIServer response = api.replaceOperatorOpenshiftIoV1ServiceCatalogAPIServer(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified ServiceCatalogAPIServer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceOperatorOpenshiftIoV1ServiceCatalogAPIServerStatusTest() throws ApiException {
        String name = null;
        IoOpenshiftOperatorV1ServiceCatalogAPIServer body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftOperatorV1ServiceCatalogAPIServer response = api.replaceOperatorOpenshiftIoV1ServiceCatalogAPIServerStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified ServiceCatalogControllerManager
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceOperatorOpenshiftIoV1ServiceCatalogControllerManagerTest() throws ApiException {
        String name = null;
        IoOpenshiftOperatorV1ServiceCatalogControllerManager body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftOperatorV1ServiceCatalogControllerManager response = api.replaceOperatorOpenshiftIoV1ServiceCatalogControllerManager(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified ServiceCatalogControllerManager
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceOperatorOpenshiftIoV1ServiceCatalogControllerManagerStatusTest() throws ApiException {
        String name = null;
        IoOpenshiftOperatorV1ServiceCatalogControllerManager body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        IoOpenshiftOperatorV1ServiceCatalogControllerManager response = api.replaceOperatorOpenshiftIoV1ServiceCatalogControllerManagerStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
}
