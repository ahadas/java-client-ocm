/*
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package open_cluster_management.io;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import open_cluster_management.io.ComCoreosOperatorsV1alpha1SubscriptionStatusCatalogHealth;
import open_cluster_management.io.ComCoreosOperatorsV1alpha1SubscriptionStatusConditions;
import open_cluster_management.io.ComCoreosOperatorsV1alpha1SubscriptionStatusInstallPlanRef;
import open_cluster_management.io.ComCoreosOperatorsV1alpha1SubscriptionStatusInstallplan;

/**
 * ComCoreosOperatorsV1alpha1SubscriptionStatus
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-05-18T17:27:50.678+03:00")
public class ComCoreosOperatorsV1alpha1SubscriptionStatus {
  @SerializedName("catalogHealth")
  private List<ComCoreosOperatorsV1alpha1SubscriptionStatusCatalogHealth> catalogHealth = null;

  @SerializedName("conditions")
  private List<ComCoreosOperatorsV1alpha1SubscriptionStatusConditions> conditions = null;

  @SerializedName("currentCSV")
  private String currentCSV = null;

  @SerializedName("installPlanRef")
  private ComCoreosOperatorsV1alpha1SubscriptionStatusInstallPlanRef installPlanRef = null;

  @SerializedName("installedCSV")
  private String installedCSV = null;

  @SerializedName("installplan")
  private ComCoreosOperatorsV1alpha1SubscriptionStatusInstallplan installplan = null;

  @SerializedName("lastUpdated")
  private OffsetDateTime lastUpdated = null;

  @SerializedName("reason")
  private String reason = null;

  @SerializedName("state")
  private String state = null;

  public ComCoreosOperatorsV1alpha1SubscriptionStatus catalogHealth(List<ComCoreosOperatorsV1alpha1SubscriptionStatusCatalogHealth> catalogHealth) {
    this.catalogHealth = catalogHealth;
    return this;
  }

  public ComCoreosOperatorsV1alpha1SubscriptionStatus addCatalogHealthItem(ComCoreosOperatorsV1alpha1SubscriptionStatusCatalogHealth catalogHealthItem) {
    if (this.catalogHealth == null) {
      this.catalogHealth = new ArrayList<>();
    }
    this.catalogHealth.add(catalogHealthItem);
    return this;
  }

   /**
   * CatalogHealth contains the Subscription&#39;s view of its relevant CatalogSources&#39; status. It is used to determine SubscriptionStatusConditions related to CatalogSources.
   * @return catalogHealth
  **/
  @ApiModelProperty(value = "CatalogHealth contains the Subscription's view of its relevant CatalogSources' status. It is used to determine SubscriptionStatusConditions related to CatalogSources.")
  public List<ComCoreosOperatorsV1alpha1SubscriptionStatusCatalogHealth> getCatalogHealth() {
    return catalogHealth;
  }

  public void setCatalogHealth(List<ComCoreosOperatorsV1alpha1SubscriptionStatusCatalogHealth> catalogHealth) {
    this.catalogHealth = catalogHealth;
  }

  public ComCoreosOperatorsV1alpha1SubscriptionStatus conditions(List<ComCoreosOperatorsV1alpha1SubscriptionStatusConditions> conditions) {
    this.conditions = conditions;
    return this;
  }

  public ComCoreosOperatorsV1alpha1SubscriptionStatus addConditionsItem(ComCoreosOperatorsV1alpha1SubscriptionStatusConditions conditionsItem) {
    if (this.conditions == null) {
      this.conditions = new ArrayList<>();
    }
    this.conditions.add(conditionsItem);
    return this;
  }

   /**
   * Conditions is a list of the latest available observations about a Subscription&#39;s current state.
   * @return conditions
  **/
  @ApiModelProperty(value = "Conditions is a list of the latest available observations about a Subscription's current state.")
  public List<ComCoreosOperatorsV1alpha1SubscriptionStatusConditions> getConditions() {
    return conditions;
  }

  public void setConditions(List<ComCoreosOperatorsV1alpha1SubscriptionStatusConditions> conditions) {
    this.conditions = conditions;
  }

  public ComCoreosOperatorsV1alpha1SubscriptionStatus currentCSV(String currentCSV) {
    this.currentCSV = currentCSV;
    return this;
  }

   /**
   * CurrentCSV is the CSV the Subscription is progressing to.
   * @return currentCSV
  **/
  @ApiModelProperty(value = "CurrentCSV is the CSV the Subscription is progressing to.")
  public String getCurrentCSV() {
    return currentCSV;
  }

  public void setCurrentCSV(String currentCSV) {
    this.currentCSV = currentCSV;
  }

  public ComCoreosOperatorsV1alpha1SubscriptionStatus installPlanRef(ComCoreosOperatorsV1alpha1SubscriptionStatusInstallPlanRef installPlanRef) {
    this.installPlanRef = installPlanRef;
    return this;
  }

   /**
   * Get installPlanRef
   * @return installPlanRef
  **/
  @ApiModelProperty(value = "")
  public ComCoreosOperatorsV1alpha1SubscriptionStatusInstallPlanRef getInstallPlanRef() {
    return installPlanRef;
  }

  public void setInstallPlanRef(ComCoreosOperatorsV1alpha1SubscriptionStatusInstallPlanRef installPlanRef) {
    this.installPlanRef = installPlanRef;
  }

  public ComCoreosOperatorsV1alpha1SubscriptionStatus installedCSV(String installedCSV) {
    this.installedCSV = installedCSV;
    return this;
  }

   /**
   * InstalledCSV is the CSV currently installed by the Subscription.
   * @return installedCSV
  **/
  @ApiModelProperty(value = "InstalledCSV is the CSV currently installed by the Subscription.")
  public String getInstalledCSV() {
    return installedCSV;
  }

  public void setInstalledCSV(String installedCSV) {
    this.installedCSV = installedCSV;
  }

  public ComCoreosOperatorsV1alpha1SubscriptionStatus installplan(ComCoreosOperatorsV1alpha1SubscriptionStatusInstallplan installplan) {
    this.installplan = installplan;
    return this;
  }

   /**
   * Get installplan
   * @return installplan
  **/
  @ApiModelProperty(value = "")
  public ComCoreosOperatorsV1alpha1SubscriptionStatusInstallplan getInstallplan() {
    return installplan;
  }

  public void setInstallplan(ComCoreosOperatorsV1alpha1SubscriptionStatusInstallplan installplan) {
    this.installplan = installplan;
  }

  public ComCoreosOperatorsV1alpha1SubscriptionStatus lastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
    return this;
  }

   /**
   * LastUpdated represents the last time that the Subscription status was updated.
   * @return lastUpdated
  **/
  @ApiModelProperty(required = true, value = "LastUpdated represents the last time that the Subscription status was updated.")
  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }

  public void setLastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
  }

  public ComCoreosOperatorsV1alpha1SubscriptionStatus reason(String reason) {
    this.reason = reason;
    return this;
  }

   /**
   * Reason is the reason the Subscription was transitioned to its current state.
   * @return reason
  **/
  @ApiModelProperty(value = "Reason is the reason the Subscription was transitioned to its current state.")
  public String getReason() {
    return reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }

  public ComCoreosOperatorsV1alpha1SubscriptionStatus state(String state) {
    this.state = state;
    return this;
  }

   /**
   * State represents the current state of the Subscription
   * @return state
  **/
  @ApiModelProperty(value = "State represents the current state of the Subscription")
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComCoreosOperatorsV1alpha1SubscriptionStatus comCoreosOperatorsV1alpha1SubscriptionStatus = (ComCoreosOperatorsV1alpha1SubscriptionStatus) o;
    return Objects.equals(this.catalogHealth, comCoreosOperatorsV1alpha1SubscriptionStatus.catalogHealth) &&
        Objects.equals(this.conditions, comCoreosOperatorsV1alpha1SubscriptionStatus.conditions) &&
        Objects.equals(this.currentCSV, comCoreosOperatorsV1alpha1SubscriptionStatus.currentCSV) &&
        Objects.equals(this.installPlanRef, comCoreosOperatorsV1alpha1SubscriptionStatus.installPlanRef) &&
        Objects.equals(this.installedCSV, comCoreosOperatorsV1alpha1SubscriptionStatus.installedCSV) &&
        Objects.equals(this.installplan, comCoreosOperatorsV1alpha1SubscriptionStatus.installplan) &&
        Objects.equals(this.lastUpdated, comCoreosOperatorsV1alpha1SubscriptionStatus.lastUpdated) &&
        Objects.equals(this.reason, comCoreosOperatorsV1alpha1SubscriptionStatus.reason) &&
        Objects.equals(this.state, comCoreosOperatorsV1alpha1SubscriptionStatus.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(catalogHealth, conditions, currentCSV, installPlanRef, installedCSV, installplan, lastUpdated, reason, state);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComCoreosOperatorsV1alpha1SubscriptionStatus {\n");
    
    sb.append("    catalogHealth: ").append(toIndentedString(catalogHealth)).append("\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    currentCSV: ").append(toIndentedString(currentCSV)).append("\n");
    sb.append("    installPlanRef: ").append(toIndentedString(installPlanRef)).append("\n");
    sb.append("    installedCSV: ").append(toIndentedString(installedCSV)).append("\n");
    sb.append("    installplan: ").append(toIndentedString(installplan)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

