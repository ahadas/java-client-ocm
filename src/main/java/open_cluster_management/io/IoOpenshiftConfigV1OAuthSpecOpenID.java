/*
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package open_cluster_management.io;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import open_cluster_management.io.IoOpenshiftConfigV1OAuthSpecBasicAuthCa;
import open_cluster_management.io.IoOpenshiftConfigV1OAuthSpecGithubClientSecret;
import open_cluster_management.io.IoOpenshiftConfigV1OAuthSpecOpenIDClaims;

/**
 * openID enables user authentication using OpenID credentials
 */
@ApiModel(description = "openID enables user authentication using OpenID credentials")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-05-18T17:27:50.678+03:00")
public class IoOpenshiftConfigV1OAuthSpecOpenID {
  @SerializedName("ca")
  private IoOpenshiftConfigV1OAuthSpecBasicAuthCa ca = null;

  @SerializedName("claims")
  private IoOpenshiftConfigV1OAuthSpecOpenIDClaims claims = null;

  @SerializedName("clientID")
  private String clientID = null;

  @SerializedName("clientSecret")
  private IoOpenshiftConfigV1OAuthSpecGithubClientSecret clientSecret = null;

  @SerializedName("extraAuthorizeParameters")
  private Map<String, String> extraAuthorizeParameters = null;

  @SerializedName("extraScopes")
  private List<String> extraScopes = null;

  @SerializedName("issuer")
  private String issuer = null;

  public IoOpenshiftConfigV1OAuthSpecOpenID ca(IoOpenshiftConfigV1OAuthSpecBasicAuthCa ca) {
    this.ca = ca;
    return this;
  }

   /**
   * Get ca
   * @return ca
  **/
  @ApiModelProperty(value = "")
  public IoOpenshiftConfigV1OAuthSpecBasicAuthCa getCa() {
    return ca;
  }

  public void setCa(IoOpenshiftConfigV1OAuthSpecBasicAuthCa ca) {
    this.ca = ca;
  }

  public IoOpenshiftConfigV1OAuthSpecOpenID claims(IoOpenshiftConfigV1OAuthSpecOpenIDClaims claims) {
    this.claims = claims;
    return this;
  }

   /**
   * Get claims
   * @return claims
  **/
  @ApiModelProperty(value = "")
  public IoOpenshiftConfigV1OAuthSpecOpenIDClaims getClaims() {
    return claims;
  }

  public void setClaims(IoOpenshiftConfigV1OAuthSpecOpenIDClaims claims) {
    this.claims = claims;
  }

  public IoOpenshiftConfigV1OAuthSpecOpenID clientID(String clientID) {
    this.clientID = clientID;
    return this;
  }

   /**
   * clientID is the oauth client ID
   * @return clientID
  **/
  @ApiModelProperty(value = "clientID is the oauth client ID")
  public String getClientID() {
    return clientID;
  }

  public void setClientID(String clientID) {
    this.clientID = clientID;
  }

  public IoOpenshiftConfigV1OAuthSpecOpenID clientSecret(IoOpenshiftConfigV1OAuthSpecGithubClientSecret clientSecret) {
    this.clientSecret = clientSecret;
    return this;
  }

   /**
   * Get clientSecret
   * @return clientSecret
  **/
  @ApiModelProperty(value = "")
  public IoOpenshiftConfigV1OAuthSpecGithubClientSecret getClientSecret() {
    return clientSecret;
  }

  public void setClientSecret(IoOpenshiftConfigV1OAuthSpecGithubClientSecret clientSecret) {
    this.clientSecret = clientSecret;
  }

  public IoOpenshiftConfigV1OAuthSpecOpenID extraAuthorizeParameters(Map<String, String> extraAuthorizeParameters) {
    this.extraAuthorizeParameters = extraAuthorizeParameters;
    return this;
  }

  public IoOpenshiftConfigV1OAuthSpecOpenID putExtraAuthorizeParametersItem(String key, String extraAuthorizeParametersItem) {
    if (this.extraAuthorizeParameters == null) {
      this.extraAuthorizeParameters = new HashMap<>();
    }
    this.extraAuthorizeParameters.put(key, extraAuthorizeParametersItem);
    return this;
  }

   /**
   * extraAuthorizeParameters are any custom parameters to add to the authorize request.
   * @return extraAuthorizeParameters
  **/
  @ApiModelProperty(value = "extraAuthorizeParameters are any custom parameters to add to the authorize request.")
  public Map<String, String> getExtraAuthorizeParameters() {
    return extraAuthorizeParameters;
  }

  public void setExtraAuthorizeParameters(Map<String, String> extraAuthorizeParameters) {
    this.extraAuthorizeParameters = extraAuthorizeParameters;
  }

  public IoOpenshiftConfigV1OAuthSpecOpenID extraScopes(List<String> extraScopes) {
    this.extraScopes = extraScopes;
    return this;
  }

  public IoOpenshiftConfigV1OAuthSpecOpenID addExtraScopesItem(String extraScopesItem) {
    if (this.extraScopes == null) {
      this.extraScopes = new ArrayList<>();
    }
    this.extraScopes.add(extraScopesItem);
    return this;
  }

   /**
   * extraScopes are any scopes to request in addition to the standard \&quot;openid\&quot; scope.
   * @return extraScopes
  **/
  @ApiModelProperty(value = "extraScopes are any scopes to request in addition to the standard \"openid\" scope.")
  public List<String> getExtraScopes() {
    return extraScopes;
  }

  public void setExtraScopes(List<String> extraScopes) {
    this.extraScopes = extraScopes;
  }

  public IoOpenshiftConfigV1OAuthSpecOpenID issuer(String issuer) {
    this.issuer = issuer;
    return this;
  }

   /**
   * issuer is the URL that the OpenID Provider asserts as its Issuer Identifier. It must use the https scheme with no query or fragment component.
   * @return issuer
  **/
  @ApiModelProperty(value = "issuer is the URL that the OpenID Provider asserts as its Issuer Identifier. It must use the https scheme with no query or fragment component.")
  public String getIssuer() {
    return issuer;
  }

  public void setIssuer(String issuer) {
    this.issuer = issuer;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IoOpenshiftConfigV1OAuthSpecOpenID ioOpenshiftConfigV1OAuthSpecOpenID = (IoOpenshiftConfigV1OAuthSpecOpenID) o;
    return Objects.equals(this.ca, ioOpenshiftConfigV1OAuthSpecOpenID.ca) &&
        Objects.equals(this.claims, ioOpenshiftConfigV1OAuthSpecOpenID.claims) &&
        Objects.equals(this.clientID, ioOpenshiftConfigV1OAuthSpecOpenID.clientID) &&
        Objects.equals(this.clientSecret, ioOpenshiftConfigV1OAuthSpecOpenID.clientSecret) &&
        Objects.equals(this.extraAuthorizeParameters, ioOpenshiftConfigV1OAuthSpecOpenID.extraAuthorizeParameters) &&
        Objects.equals(this.extraScopes, ioOpenshiftConfigV1OAuthSpecOpenID.extraScopes) &&
        Objects.equals(this.issuer, ioOpenshiftConfigV1OAuthSpecOpenID.issuer);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ca, claims, clientID, clientSecret, extraAuthorizeParameters, extraScopes, issuer);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IoOpenshiftConfigV1OAuthSpecOpenID {\n");
    
    sb.append("    ca: ").append(toIndentedString(ca)).append("\n");
    sb.append("    claims: ").append(toIndentedString(claims)).append("\n");
    sb.append("    clientID: ").append(toIndentedString(clientID)).append("\n");
    sb.append("    clientSecret: ").append(toIndentedString(clientSecret)).append("\n");
    sb.append("    extraAuthorizeParameters: ").append(toIndentedString(extraAuthorizeParameters)).append("\n");
    sb.append("    extraScopes: ").append(toIndentedString(extraScopes)).append("\n");
    sb.append("    issuer: ").append(toIndentedString(issuer)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

