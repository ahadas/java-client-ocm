/*
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package open_cluster_management.io;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import open_cluster_management.io.IoK8sApimachineryPkgApisMetaV1LabelSelector;

/**
 * ClusterResourceQuotaSelector is used to select projects.  At least one of LabelSelector or AnnotationSelector must present.  If only one is present, it is the only selection criteria.  If both are specified, the project must match both restrictions.
 */
@ApiModel(description = "ClusterResourceQuotaSelector is used to select projects.  At least one of LabelSelector or AnnotationSelector must present.  If only one is present, it is the only selection criteria.  If both are specified, the project must match both restrictions.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-05-18T17:27:50.678+03:00")
public class ComGithubOpenshiftApiQuotaV1ClusterResourceQuotaSelector {
  @SerializedName("annotations")
  private Map<String, String> annotations = null;

  @SerializedName("labels")
  private IoK8sApimachineryPkgApisMetaV1LabelSelector labels = null;

  public ComGithubOpenshiftApiQuotaV1ClusterResourceQuotaSelector annotations(Map<String, String> annotations) {
    this.annotations = annotations;
    return this;
  }

  public ComGithubOpenshiftApiQuotaV1ClusterResourceQuotaSelector putAnnotationsItem(String key, String annotationsItem) {
    if (this.annotations == null) {
      this.annotations = new HashMap<>();
    }
    this.annotations.put(key, annotationsItem);
    return this;
  }

   /**
   * AnnotationSelector is used to select projects by annotation.
   * @return annotations
  **/
  @ApiModelProperty(value = "AnnotationSelector is used to select projects by annotation.")
  public Map<String, String> getAnnotations() {
    return annotations;
  }

  public void setAnnotations(Map<String, String> annotations) {
    this.annotations = annotations;
  }

  public ComGithubOpenshiftApiQuotaV1ClusterResourceQuotaSelector labels(IoK8sApimachineryPkgApisMetaV1LabelSelector labels) {
    this.labels = labels;
    return this;
  }

   /**
   * LabelSelector is used to select projects by label.
   * @return labels
  **/
  @ApiModelProperty(value = "LabelSelector is used to select projects by label.")
  public IoK8sApimachineryPkgApisMetaV1LabelSelector getLabels() {
    return labels;
  }

  public void setLabels(IoK8sApimachineryPkgApisMetaV1LabelSelector labels) {
    this.labels = labels;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComGithubOpenshiftApiQuotaV1ClusterResourceQuotaSelector comGithubOpenshiftApiQuotaV1ClusterResourceQuotaSelector = (ComGithubOpenshiftApiQuotaV1ClusterResourceQuotaSelector) o;
    return Objects.equals(this.annotations, comGithubOpenshiftApiQuotaV1ClusterResourceQuotaSelector.annotations) &&
        Objects.equals(this.labels, comGithubOpenshiftApiQuotaV1ClusterResourceQuotaSelector.labels);
  }

  @Override
  public int hashCode() {
    return Objects.hash(annotations, labels);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComGithubOpenshiftApiQuotaV1ClusterResourceQuotaSelector {\n");
    
    sb.append("    annotations: ").append(toIndentedString(annotations)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

