/*
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package open_cluster_management.io;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * proxy defines the proxy to be used when calling master api, upstream registries, etc.
 */
@ApiModel(description = "proxy defines the proxy to be used when calling master api, upstream registries, etc.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-05-18T17:27:50.678+03:00")
public class IoOpenshiftOperatorImageregistryV1ConfigSpecProxy {
  @SerializedName("http")
  private String http = null;

  @SerializedName("https")
  private String https = null;

  @SerializedName("noProxy")
  private String noProxy = null;

  public IoOpenshiftOperatorImageregistryV1ConfigSpecProxy http(String http) {
    this.http = http;
    return this;
  }

   /**
   * http defines the proxy to be used by the image registry when accessing HTTP endpoints.
   * @return http
  **/
  @ApiModelProperty(value = "http defines the proxy to be used by the image registry when accessing HTTP endpoints.")
  public String getHttp() {
    return http;
  }

  public void setHttp(String http) {
    this.http = http;
  }

  public IoOpenshiftOperatorImageregistryV1ConfigSpecProxy https(String https) {
    this.https = https;
    return this;
  }

   /**
   * https defines the proxy to be used by the image registry when accessing HTTPS endpoints.
   * @return https
  **/
  @ApiModelProperty(value = "https defines the proxy to be used by the image registry when accessing HTTPS endpoints.")
  public String getHttps() {
    return https;
  }

  public void setHttps(String https) {
    this.https = https;
  }

  public IoOpenshiftOperatorImageregistryV1ConfigSpecProxy noProxy(String noProxy) {
    this.noProxy = noProxy;
    return this;
  }

   /**
   * noProxy defines a comma-separated list of host names that shouldn&#39;t go through any proxy.
   * @return noProxy
  **/
  @ApiModelProperty(value = "noProxy defines a comma-separated list of host names that shouldn't go through any proxy.")
  public String getNoProxy() {
    return noProxy;
  }

  public void setNoProxy(String noProxy) {
    this.noProxy = noProxy;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IoOpenshiftOperatorImageregistryV1ConfigSpecProxy ioOpenshiftOperatorImageregistryV1ConfigSpecProxy = (IoOpenshiftOperatorImageregistryV1ConfigSpecProxy) o;
    return Objects.equals(this.http, ioOpenshiftOperatorImageregistryV1ConfigSpecProxy.http) &&
        Objects.equals(this.https, ioOpenshiftOperatorImageregistryV1ConfigSpecProxy.https) &&
        Objects.equals(this.noProxy, ioOpenshiftOperatorImageregistryV1ConfigSpecProxy.noProxy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(http, https, noProxy);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IoOpenshiftOperatorImageregistryV1ConfigSpecProxy {\n");
    
    sb.append("    http: ").append(toIndentedString(http)).append("\n");
    sb.append("    https: ").append(toIndentedString(https)).append("\n");
    sb.append("    noProxy: ").append(toIndentedString(noProxy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

