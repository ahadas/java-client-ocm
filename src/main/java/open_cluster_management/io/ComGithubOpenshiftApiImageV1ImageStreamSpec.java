/*
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package open_cluster_management.io;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import open_cluster_management.io.ComGithubOpenshiftApiImageV1ImageLookupPolicy;
import open_cluster_management.io.ComGithubOpenshiftApiImageV1TagReference;

/**
 * ImageStreamSpec represents options for ImageStreams.
 */
@ApiModel(description = "ImageStreamSpec represents options for ImageStreams.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-05-18T17:27:50.678+03:00")
public class ComGithubOpenshiftApiImageV1ImageStreamSpec {
  @SerializedName("dockerImageRepository")
  private String dockerImageRepository = null;

  @SerializedName("lookupPolicy")
  private ComGithubOpenshiftApiImageV1ImageLookupPolicy lookupPolicy = null;

  @SerializedName("tags")
  private List<ComGithubOpenshiftApiImageV1TagReference> tags = null;

  public ComGithubOpenshiftApiImageV1ImageStreamSpec dockerImageRepository(String dockerImageRepository) {
    this.dockerImageRepository = dockerImageRepository;
    return this;
  }

   /**
   * dockerImageRepository is optional, if specified this stream is backed by a container repository on this server Deprecated: This field is deprecated as of v3.7 and will be removed in a future release. Specify the source for the tags to be imported in each tag via the spec.tags.from reference instead.
   * @return dockerImageRepository
  **/
  @ApiModelProperty(value = "dockerImageRepository is optional, if specified this stream is backed by a container repository on this server Deprecated: This field is deprecated as of v3.7 and will be removed in a future release. Specify the source for the tags to be imported in each tag via the spec.tags.from reference instead.")
  public String getDockerImageRepository() {
    return dockerImageRepository;
  }

  public void setDockerImageRepository(String dockerImageRepository) {
    this.dockerImageRepository = dockerImageRepository;
  }

  public ComGithubOpenshiftApiImageV1ImageStreamSpec lookupPolicy(ComGithubOpenshiftApiImageV1ImageLookupPolicy lookupPolicy) {
    this.lookupPolicy = lookupPolicy;
    return this;
  }

   /**
   * lookupPolicy controls how other resources reference images within this namespace.
   * @return lookupPolicy
  **/
  @ApiModelProperty(value = "lookupPolicy controls how other resources reference images within this namespace.")
  public ComGithubOpenshiftApiImageV1ImageLookupPolicy getLookupPolicy() {
    return lookupPolicy;
  }

  public void setLookupPolicy(ComGithubOpenshiftApiImageV1ImageLookupPolicy lookupPolicy) {
    this.lookupPolicy = lookupPolicy;
  }

  public ComGithubOpenshiftApiImageV1ImageStreamSpec tags(List<ComGithubOpenshiftApiImageV1TagReference> tags) {
    this.tags = tags;
    return this;
  }

  public ComGithubOpenshiftApiImageV1ImageStreamSpec addTagsItem(ComGithubOpenshiftApiImageV1TagReference tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * tags map arbitrary string values to specific image locators
   * @return tags
  **/
  @ApiModelProperty(value = "tags map arbitrary string values to specific image locators")
  public List<ComGithubOpenshiftApiImageV1TagReference> getTags() {
    return tags;
  }

  public void setTags(List<ComGithubOpenshiftApiImageV1TagReference> tags) {
    this.tags = tags;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComGithubOpenshiftApiImageV1ImageStreamSpec comGithubOpenshiftApiImageV1ImageStreamSpec = (ComGithubOpenshiftApiImageV1ImageStreamSpec) o;
    return Objects.equals(this.dockerImageRepository, comGithubOpenshiftApiImageV1ImageStreamSpec.dockerImageRepository) &&
        Objects.equals(this.lookupPolicy, comGithubOpenshiftApiImageV1ImageStreamSpec.lookupPolicy) &&
        Objects.equals(this.tags, comGithubOpenshiftApiImageV1ImageStreamSpec.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dockerImageRepository, lookupPolicy, tags);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComGithubOpenshiftApiImageV1ImageStreamSpec {\n");
    
    sb.append("    dockerImageRepository: ").append(toIndentedString(dockerImageRepository)).append("\n");
    sb.append("    lookupPolicy: ").append(toIndentedString(lookupPolicy)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

