/*
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package open_cluster_management.io;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Total defines the actual enforced quota and its current usage across all projects
 */
@ApiModel(description = "Total defines the actual enforced quota and its current usage across all projects")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-05-18T17:27:50.678+03:00")
public class IoOpenshiftQuotaV1ClusterResourceQuotaStatusTotal {
  @SerializedName("hard")
  private Map<String, String> hard = null;

  @SerializedName("used")
  private Map<String, String> used = null;

  public IoOpenshiftQuotaV1ClusterResourceQuotaStatusTotal hard(Map<String, String> hard) {
    this.hard = hard;
    return this;
  }

  public IoOpenshiftQuotaV1ClusterResourceQuotaStatusTotal putHardItem(String key, String hardItem) {
    if (this.hard == null) {
      this.hard = new HashMap<>();
    }
    this.hard.put(key, hardItem);
    return this;
  }

   /**
   * Hard is the set of enforced hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
   * @return hard
  **/
  @ApiModelProperty(value = "Hard is the set of enforced hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/")
  public Map<String, String> getHard() {
    return hard;
  }

  public void setHard(Map<String, String> hard) {
    this.hard = hard;
  }

  public IoOpenshiftQuotaV1ClusterResourceQuotaStatusTotal used(Map<String, String> used) {
    this.used = used;
    return this;
  }

  public IoOpenshiftQuotaV1ClusterResourceQuotaStatusTotal putUsedItem(String key, String usedItem) {
    if (this.used == null) {
      this.used = new HashMap<>();
    }
    this.used.put(key, usedItem);
    return this;
  }

   /**
   * Used is the current observed total usage of the resource in the namespace.
   * @return used
  **/
  @ApiModelProperty(value = "Used is the current observed total usage of the resource in the namespace.")
  public Map<String, String> getUsed() {
    return used;
  }

  public void setUsed(Map<String, String> used) {
    this.used = used;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IoOpenshiftQuotaV1ClusterResourceQuotaStatusTotal ioOpenshiftQuotaV1ClusterResourceQuotaStatusTotal = (IoOpenshiftQuotaV1ClusterResourceQuotaStatusTotal) o;
    return Objects.equals(this.hard, ioOpenshiftQuotaV1ClusterResourceQuotaStatusTotal.hard) &&
        Objects.equals(this.used, ioOpenshiftQuotaV1ClusterResourceQuotaStatusTotal.used);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hard, used);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IoOpenshiftQuotaV1ClusterResourceQuotaStatusTotal {\n");
    
    sb.append("    hard: ").append(toIndentedString(hard)).append("\n");
    sb.append("    used: ").append(toIndentedString(used)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

