/*
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package open_cluster_management.io;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import open_cluster_management.io.IoK8sApimachineryPkgApisMetaV1LabelSelector;

/**
 * GroupRestriction matches a group either by a string match on the group name or a label selector applied to group labels.
 */
@ApiModel(description = "GroupRestriction matches a group either by a string match on the group name or a label selector applied to group labels.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-05-18T17:27:50.678+03:00")
public class ComGithubOpenshiftApiAuthorizationV1GroupRestriction {
  @SerializedName("groups")
  private List<String> groups = new ArrayList<>();

  @SerializedName("labels")
  private List<IoK8sApimachineryPkgApisMetaV1LabelSelector> labels = new ArrayList<>();

  public ComGithubOpenshiftApiAuthorizationV1GroupRestriction groups(List<String> groups) {
    this.groups = groups;
    return this;
  }

  public ComGithubOpenshiftApiAuthorizationV1GroupRestriction addGroupsItem(String groupsItem) {
    this.groups.add(groupsItem);
    return this;
  }

   /**
   * Groups is a list of groups used to match against an individual user&#39;s groups. If the user is a member of one of the whitelisted groups, the user is allowed to be bound to a role.
   * @return groups
  **/
  @ApiModelProperty(required = true, value = "Groups is a list of groups used to match against an individual user's groups. If the user is a member of one of the whitelisted groups, the user is allowed to be bound to a role.")
  public List<String> getGroups() {
    return groups;
  }

  public void setGroups(List<String> groups) {
    this.groups = groups;
  }

  public ComGithubOpenshiftApiAuthorizationV1GroupRestriction labels(List<IoK8sApimachineryPkgApisMetaV1LabelSelector> labels) {
    this.labels = labels;
    return this;
  }

  public ComGithubOpenshiftApiAuthorizationV1GroupRestriction addLabelsItem(IoK8sApimachineryPkgApisMetaV1LabelSelector labelsItem) {
    this.labels.add(labelsItem);
    return this;
  }

   /**
   * Selectors specifies a list of label selectors over group labels.
   * @return labels
  **/
  @ApiModelProperty(required = true, value = "Selectors specifies a list of label selectors over group labels.")
  public List<IoK8sApimachineryPkgApisMetaV1LabelSelector> getLabels() {
    return labels;
  }

  public void setLabels(List<IoK8sApimachineryPkgApisMetaV1LabelSelector> labels) {
    this.labels = labels;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComGithubOpenshiftApiAuthorizationV1GroupRestriction comGithubOpenshiftApiAuthorizationV1GroupRestriction = (ComGithubOpenshiftApiAuthorizationV1GroupRestriction) o;
    return Objects.equals(this.groups, comGithubOpenshiftApiAuthorizationV1GroupRestriction.groups) &&
        Objects.equals(this.labels, comGithubOpenshiftApiAuthorizationV1GroupRestriction.labels);
  }

  @Override
  public int hashCode() {
    return Objects.hash(groups, labels);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComGithubOpenshiftApiAuthorizationV1GroupRestriction {\n");
    
    sb.append("    groups: ").append(toIndentedString(groups)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

