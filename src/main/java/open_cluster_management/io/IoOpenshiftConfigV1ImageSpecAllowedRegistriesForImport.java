/*
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package open_cluster_management.io;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * RegistryLocation contains a location of the registry specified by the registry domain name. The domain name might include wildcards, like &#39;*&#39; or &#39;??&#39;.
 */
@ApiModel(description = "RegistryLocation contains a location of the registry specified by the registry domain name. The domain name might include wildcards, like '*' or '??'.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-05-18T17:27:50.678+03:00")
public class IoOpenshiftConfigV1ImageSpecAllowedRegistriesForImport {
  @SerializedName("domainName")
  private String domainName = null;

  @SerializedName("insecure")
  private Boolean insecure = null;

  public IoOpenshiftConfigV1ImageSpecAllowedRegistriesForImport domainName(String domainName) {
    this.domainName = domainName;
    return this;
  }

   /**
   * domainName specifies a domain name for the registry In case the registry use non-standard (80 or 443) port, the port should be included in the domain name as well.
   * @return domainName
  **/
  @ApiModelProperty(value = "domainName specifies a domain name for the registry In case the registry use non-standard (80 or 443) port, the port should be included in the domain name as well.")
  public String getDomainName() {
    return domainName;
  }

  public void setDomainName(String domainName) {
    this.domainName = domainName;
  }

  public IoOpenshiftConfigV1ImageSpecAllowedRegistriesForImport insecure(Boolean insecure) {
    this.insecure = insecure;
    return this;
  }

   /**
   * insecure indicates whether the registry is secure (https) or insecure (http) By default (if not specified) the registry is assumed as secure.
   * @return insecure
  **/
  @ApiModelProperty(value = "insecure indicates whether the registry is secure (https) or insecure (http) By default (if not specified) the registry is assumed as secure.")
  public Boolean isInsecure() {
    return insecure;
  }

  public void setInsecure(Boolean insecure) {
    this.insecure = insecure;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IoOpenshiftConfigV1ImageSpecAllowedRegistriesForImport ioOpenshiftConfigV1ImageSpecAllowedRegistriesForImport = (IoOpenshiftConfigV1ImageSpecAllowedRegistriesForImport) o;
    return Objects.equals(this.domainName, ioOpenshiftConfigV1ImageSpecAllowedRegistriesForImport.domainName) &&
        Objects.equals(this.insecure, ioOpenshiftConfigV1ImageSpecAllowedRegistriesForImport.insecure);
  }

  @Override
  public int hashCode() {
    return Objects.hash(domainName, insecure);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IoOpenshiftConfigV1ImageSpecAllowedRegistriesForImport {\n");
    
    sb.append("    domainName: ").append(toIndentedString(domainName)).append("\n");
    sb.append("    insecure: ").append(toIndentedString(insecure)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

