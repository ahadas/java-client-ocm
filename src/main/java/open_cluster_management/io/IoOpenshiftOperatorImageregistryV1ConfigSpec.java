/*
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package open_cluster_management.io;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import open_cluster_management.io.ComCoreosOperatorsV1alpha1ClusterServiceVersionSpecInstallSpecSpecTemplateSpecTolerations;
import open_cluster_management.io.IoOpenshiftOperatorImageregistryV1ConfigSpecProxy;
import open_cluster_management.io.IoOpenshiftOperatorImageregistryV1ConfigSpecRequests;
import open_cluster_management.io.IoOpenshiftOperatorImageregistryV1ConfigSpecResources;
import open_cluster_management.io.IoOpenshiftOperatorImageregistryV1ConfigSpecRoutes;
import open_cluster_management.io.IoOpenshiftOperatorImageregistryV1ConfigSpecStorage;

/**
 * ImageRegistrySpec defines the specs for the running registry.
 */
@ApiModel(description = "ImageRegistrySpec defines the specs for the running registry.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-05-18T17:27:50.678+03:00")
public class IoOpenshiftOperatorImageregistryV1ConfigSpec {
  @SerializedName("defaultRoute")
  private Boolean defaultRoute = null;

  @SerializedName("disableRedirect")
  private Boolean disableRedirect = null;

  @SerializedName("httpSecret")
  private String httpSecret = null;

  @SerializedName("logging")
  private Long logging = null;

  @SerializedName("managementState")
  private String managementState = null;

  @SerializedName("nodeSelector")
  private Map<String, String> nodeSelector = null;

  @SerializedName("proxy")
  private IoOpenshiftOperatorImageregistryV1ConfigSpecProxy proxy = null;

  @SerializedName("readOnly")
  private Boolean readOnly = null;

  @SerializedName("replicas")
  private Integer replicas = null;

  @SerializedName("requests")
  private IoOpenshiftOperatorImageregistryV1ConfigSpecRequests requests = null;

  @SerializedName("resources")
  private IoOpenshiftOperatorImageregistryV1ConfigSpecResources resources = null;

  @SerializedName("routes")
  private List<IoOpenshiftOperatorImageregistryV1ConfigSpecRoutes> routes = null;

  @SerializedName("storage")
  private IoOpenshiftOperatorImageregistryV1ConfigSpecStorage storage = null;

  @SerializedName("tolerations")
  private List<ComCoreosOperatorsV1alpha1ClusterServiceVersionSpecInstallSpecSpecTemplateSpecTolerations> tolerations = null;

  public IoOpenshiftOperatorImageregistryV1ConfigSpec defaultRoute(Boolean defaultRoute) {
    this.defaultRoute = defaultRoute;
    return this;
  }

   /**
   * defaultRoute indicates whether an external facing route for the registry should be created using the default generated hostname.
   * @return defaultRoute
  **/
  @ApiModelProperty(value = "defaultRoute indicates whether an external facing route for the registry should be created using the default generated hostname.")
  public Boolean isDefaultRoute() {
    return defaultRoute;
  }

  public void setDefaultRoute(Boolean defaultRoute) {
    this.defaultRoute = defaultRoute;
  }

  public IoOpenshiftOperatorImageregistryV1ConfigSpec disableRedirect(Boolean disableRedirect) {
    this.disableRedirect = disableRedirect;
    return this;
  }

   /**
   * disableRedirect controls whether to route all data through the Registry, rather than redirecting to the backend.
   * @return disableRedirect
  **/
  @ApiModelProperty(value = "disableRedirect controls whether to route all data through the Registry, rather than redirecting to the backend.")
  public Boolean isDisableRedirect() {
    return disableRedirect;
  }

  public void setDisableRedirect(Boolean disableRedirect) {
    this.disableRedirect = disableRedirect;
  }

  public IoOpenshiftOperatorImageregistryV1ConfigSpec httpSecret(String httpSecret) {
    this.httpSecret = httpSecret;
    return this;
  }

   /**
   * httpSecret is the value needed by the registry to secure uploads, generated by default.
   * @return httpSecret
  **/
  @ApiModelProperty(value = "httpSecret is the value needed by the registry to secure uploads, generated by default.")
  public String getHttpSecret() {
    return httpSecret;
  }

  public void setHttpSecret(String httpSecret) {
    this.httpSecret = httpSecret;
  }

  public IoOpenshiftOperatorImageregistryV1ConfigSpec logging(Long logging) {
    this.logging = logging;
    return this;
  }

   /**
   * logging determines the level of logging enabled in the registry.
   * @return logging
  **/
  @ApiModelProperty(required = true, value = "logging determines the level of logging enabled in the registry.")
  public Long getLogging() {
    return logging;
  }

  public void setLogging(Long logging) {
    this.logging = logging;
  }

  public IoOpenshiftOperatorImageregistryV1ConfigSpec managementState(String managementState) {
    this.managementState = managementState;
    return this;
  }

   /**
   * managementState indicates whether the registry instance represented by this config instance is under operator management or not.  Valid values are Managed, Unmanaged, and Removed.
   * @return managementState
  **/
  @ApiModelProperty(required = true, value = "managementState indicates whether the registry instance represented by this config instance is under operator management or not.  Valid values are Managed, Unmanaged, and Removed.")
  public String getManagementState() {
    return managementState;
  }

  public void setManagementState(String managementState) {
    this.managementState = managementState;
  }

  public IoOpenshiftOperatorImageregistryV1ConfigSpec nodeSelector(Map<String, String> nodeSelector) {
    this.nodeSelector = nodeSelector;
    return this;
  }

  public IoOpenshiftOperatorImageregistryV1ConfigSpec putNodeSelectorItem(String key, String nodeSelectorItem) {
    if (this.nodeSelector == null) {
      this.nodeSelector = new HashMap<>();
    }
    this.nodeSelector.put(key, nodeSelectorItem);
    return this;
  }

   /**
   * nodeSelector defines the node selection constraints for the registry pod.
   * @return nodeSelector
  **/
  @ApiModelProperty(value = "nodeSelector defines the node selection constraints for the registry pod.")
  public Map<String, String> getNodeSelector() {
    return nodeSelector;
  }

  public void setNodeSelector(Map<String, String> nodeSelector) {
    this.nodeSelector = nodeSelector;
  }

  public IoOpenshiftOperatorImageregistryV1ConfigSpec proxy(IoOpenshiftOperatorImageregistryV1ConfigSpecProxy proxy) {
    this.proxy = proxy;
    return this;
  }

   /**
   * Get proxy
   * @return proxy
  **/
  @ApiModelProperty(value = "")
  public IoOpenshiftOperatorImageregistryV1ConfigSpecProxy getProxy() {
    return proxy;
  }

  public void setProxy(IoOpenshiftOperatorImageregistryV1ConfigSpecProxy proxy) {
    this.proxy = proxy;
  }

  public IoOpenshiftOperatorImageregistryV1ConfigSpec readOnly(Boolean readOnly) {
    this.readOnly = readOnly;
    return this;
  }

   /**
   * readOnly indicates whether the registry instance should reject attempts to push new images or delete existing ones.
   * @return readOnly
  **/
  @ApiModelProperty(value = "readOnly indicates whether the registry instance should reject attempts to push new images or delete existing ones.")
  public Boolean isReadOnly() {
    return readOnly;
  }

  public void setReadOnly(Boolean readOnly) {
    this.readOnly = readOnly;
  }

  public IoOpenshiftOperatorImageregistryV1ConfigSpec replicas(Integer replicas) {
    this.replicas = replicas;
    return this;
  }

   /**
   * replicas determines the number of registry instances to run.
   * @return replicas
  **/
  @ApiModelProperty(required = true, value = "replicas determines the number of registry instances to run.")
  public Integer getReplicas() {
    return replicas;
  }

  public void setReplicas(Integer replicas) {
    this.replicas = replicas;
  }

  public IoOpenshiftOperatorImageregistryV1ConfigSpec requests(IoOpenshiftOperatorImageregistryV1ConfigSpecRequests requests) {
    this.requests = requests;
    return this;
  }

   /**
   * Get requests
   * @return requests
  **/
  @ApiModelProperty(value = "")
  public IoOpenshiftOperatorImageregistryV1ConfigSpecRequests getRequests() {
    return requests;
  }

  public void setRequests(IoOpenshiftOperatorImageregistryV1ConfigSpecRequests requests) {
    this.requests = requests;
  }

  public IoOpenshiftOperatorImageregistryV1ConfigSpec resources(IoOpenshiftOperatorImageregistryV1ConfigSpecResources resources) {
    this.resources = resources;
    return this;
  }

   /**
   * Get resources
   * @return resources
  **/
  @ApiModelProperty(value = "")
  public IoOpenshiftOperatorImageregistryV1ConfigSpecResources getResources() {
    return resources;
  }

  public void setResources(IoOpenshiftOperatorImageregistryV1ConfigSpecResources resources) {
    this.resources = resources;
  }

  public IoOpenshiftOperatorImageregistryV1ConfigSpec routes(List<IoOpenshiftOperatorImageregistryV1ConfigSpecRoutes> routes) {
    this.routes = routes;
    return this;
  }

  public IoOpenshiftOperatorImageregistryV1ConfigSpec addRoutesItem(IoOpenshiftOperatorImageregistryV1ConfigSpecRoutes routesItem) {
    if (this.routes == null) {
      this.routes = new ArrayList<>();
    }
    this.routes.add(routesItem);
    return this;
  }

   /**
   * routes defines additional external facing routes which should be created for the registry.
   * @return routes
  **/
  @ApiModelProperty(value = "routes defines additional external facing routes which should be created for the registry.")
  public List<IoOpenshiftOperatorImageregistryV1ConfigSpecRoutes> getRoutes() {
    return routes;
  }

  public void setRoutes(List<IoOpenshiftOperatorImageregistryV1ConfigSpecRoutes> routes) {
    this.routes = routes;
  }

  public IoOpenshiftOperatorImageregistryV1ConfigSpec storage(IoOpenshiftOperatorImageregistryV1ConfigSpecStorage storage) {
    this.storage = storage;
    return this;
  }

   /**
   * Get storage
   * @return storage
  **/
  @ApiModelProperty(value = "")
  public IoOpenshiftOperatorImageregistryV1ConfigSpecStorage getStorage() {
    return storage;
  }

  public void setStorage(IoOpenshiftOperatorImageregistryV1ConfigSpecStorage storage) {
    this.storage = storage;
  }

  public IoOpenshiftOperatorImageregistryV1ConfigSpec tolerations(List<ComCoreosOperatorsV1alpha1ClusterServiceVersionSpecInstallSpecSpecTemplateSpecTolerations> tolerations) {
    this.tolerations = tolerations;
    return this;
  }

  public IoOpenshiftOperatorImageregistryV1ConfigSpec addTolerationsItem(ComCoreosOperatorsV1alpha1ClusterServiceVersionSpecInstallSpecSpecTemplateSpecTolerations tolerationsItem) {
    if (this.tolerations == null) {
      this.tolerations = new ArrayList<>();
    }
    this.tolerations.add(tolerationsItem);
    return this;
  }

   /**
   * tolerations defines the tolerations for the registry pod.
   * @return tolerations
  **/
  @ApiModelProperty(value = "tolerations defines the tolerations for the registry pod.")
  public List<ComCoreosOperatorsV1alpha1ClusterServiceVersionSpecInstallSpecSpecTemplateSpecTolerations> getTolerations() {
    return tolerations;
  }

  public void setTolerations(List<ComCoreosOperatorsV1alpha1ClusterServiceVersionSpecInstallSpecSpecTemplateSpecTolerations> tolerations) {
    this.tolerations = tolerations;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IoOpenshiftOperatorImageregistryV1ConfigSpec ioOpenshiftOperatorImageregistryV1ConfigSpec = (IoOpenshiftOperatorImageregistryV1ConfigSpec) o;
    return Objects.equals(this.defaultRoute, ioOpenshiftOperatorImageregistryV1ConfigSpec.defaultRoute) &&
        Objects.equals(this.disableRedirect, ioOpenshiftOperatorImageregistryV1ConfigSpec.disableRedirect) &&
        Objects.equals(this.httpSecret, ioOpenshiftOperatorImageregistryV1ConfigSpec.httpSecret) &&
        Objects.equals(this.logging, ioOpenshiftOperatorImageregistryV1ConfigSpec.logging) &&
        Objects.equals(this.managementState, ioOpenshiftOperatorImageregistryV1ConfigSpec.managementState) &&
        Objects.equals(this.nodeSelector, ioOpenshiftOperatorImageregistryV1ConfigSpec.nodeSelector) &&
        Objects.equals(this.proxy, ioOpenshiftOperatorImageregistryV1ConfigSpec.proxy) &&
        Objects.equals(this.readOnly, ioOpenshiftOperatorImageregistryV1ConfigSpec.readOnly) &&
        Objects.equals(this.replicas, ioOpenshiftOperatorImageregistryV1ConfigSpec.replicas) &&
        Objects.equals(this.requests, ioOpenshiftOperatorImageregistryV1ConfigSpec.requests) &&
        Objects.equals(this.resources, ioOpenshiftOperatorImageregistryV1ConfigSpec.resources) &&
        Objects.equals(this.routes, ioOpenshiftOperatorImageregistryV1ConfigSpec.routes) &&
        Objects.equals(this.storage, ioOpenshiftOperatorImageregistryV1ConfigSpec.storage) &&
        Objects.equals(this.tolerations, ioOpenshiftOperatorImageregistryV1ConfigSpec.tolerations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(defaultRoute, disableRedirect, httpSecret, logging, managementState, nodeSelector, proxy, readOnly, replicas, requests, resources, routes, storage, tolerations);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IoOpenshiftOperatorImageregistryV1ConfigSpec {\n");
    
    sb.append("    defaultRoute: ").append(toIndentedString(defaultRoute)).append("\n");
    sb.append("    disableRedirect: ").append(toIndentedString(disableRedirect)).append("\n");
    sb.append("    httpSecret: ").append(toIndentedString(httpSecret)).append("\n");
    sb.append("    logging: ").append(toIndentedString(logging)).append("\n");
    sb.append("    managementState: ").append(toIndentedString(managementState)).append("\n");
    sb.append("    nodeSelector: ").append(toIndentedString(nodeSelector)).append("\n");
    sb.append("    proxy: ").append(toIndentedString(proxy)).append("\n");
    sb.append("    readOnly: ").append(toIndentedString(readOnly)).append("\n");
    sb.append("    replicas: ").append(toIndentedString(replicas)).append("\n");
    sb.append("    requests: ").append(toIndentedString(requests)).append("\n");
    sb.append("    resources: ").append(toIndentedString(resources)).append("\n");
    sb.append("    routes: ").append(toIndentedString(routes)).append("\n");
    sb.append("    storage: ").append(toIndentedString(storage)).append("\n");
    sb.append("    tolerations: ").append(toIndentedString(tolerations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

