/*
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package open_cluster_management.io;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import open_cluster_management.io.ComGithubOpenshiftApiBuildV1ImageChangeTrigger;
import open_cluster_management.io.ComGithubOpenshiftApiBuildV1WebHookTrigger;

/**
 * BuildTriggerPolicy describes a policy for a single trigger that results in a new Build.
 */
@ApiModel(description = "BuildTriggerPolicy describes a policy for a single trigger that results in a new Build.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-05-18T17:27:50.678+03:00")
public class ComGithubOpenshiftApiBuildV1BuildTriggerPolicy {
  @SerializedName("bitbucket")
  private ComGithubOpenshiftApiBuildV1WebHookTrigger bitbucket = null;

  @SerializedName("generic")
  private ComGithubOpenshiftApiBuildV1WebHookTrigger generic = null;

  @SerializedName("github")
  private ComGithubOpenshiftApiBuildV1WebHookTrigger github = null;

  @SerializedName("gitlab")
  private ComGithubOpenshiftApiBuildV1WebHookTrigger gitlab = null;

  @SerializedName("imageChange")
  private ComGithubOpenshiftApiBuildV1ImageChangeTrigger imageChange = null;

  @SerializedName("type")
  private String type = null;

  public ComGithubOpenshiftApiBuildV1BuildTriggerPolicy bitbucket(ComGithubOpenshiftApiBuildV1WebHookTrigger bitbucket) {
    this.bitbucket = bitbucket;
    return this;
  }

   /**
   * BitbucketWebHook contains the parameters for a Bitbucket webhook type of trigger
   * @return bitbucket
  **/
  @ApiModelProperty(value = "BitbucketWebHook contains the parameters for a Bitbucket webhook type of trigger")
  public ComGithubOpenshiftApiBuildV1WebHookTrigger getBitbucket() {
    return bitbucket;
  }

  public void setBitbucket(ComGithubOpenshiftApiBuildV1WebHookTrigger bitbucket) {
    this.bitbucket = bitbucket;
  }

  public ComGithubOpenshiftApiBuildV1BuildTriggerPolicy generic(ComGithubOpenshiftApiBuildV1WebHookTrigger generic) {
    this.generic = generic;
    return this;
  }

   /**
   * generic contains the parameters for a Generic webhook type of trigger
   * @return generic
  **/
  @ApiModelProperty(value = "generic contains the parameters for a Generic webhook type of trigger")
  public ComGithubOpenshiftApiBuildV1WebHookTrigger getGeneric() {
    return generic;
  }

  public void setGeneric(ComGithubOpenshiftApiBuildV1WebHookTrigger generic) {
    this.generic = generic;
  }

  public ComGithubOpenshiftApiBuildV1BuildTriggerPolicy github(ComGithubOpenshiftApiBuildV1WebHookTrigger github) {
    this.github = github;
    return this;
  }

   /**
   * github contains the parameters for a GitHub webhook type of trigger
   * @return github
  **/
  @ApiModelProperty(value = "github contains the parameters for a GitHub webhook type of trigger")
  public ComGithubOpenshiftApiBuildV1WebHookTrigger getGithub() {
    return github;
  }

  public void setGithub(ComGithubOpenshiftApiBuildV1WebHookTrigger github) {
    this.github = github;
  }

  public ComGithubOpenshiftApiBuildV1BuildTriggerPolicy gitlab(ComGithubOpenshiftApiBuildV1WebHookTrigger gitlab) {
    this.gitlab = gitlab;
    return this;
  }

   /**
   * GitLabWebHook contains the parameters for a GitLab webhook type of trigger
   * @return gitlab
  **/
  @ApiModelProperty(value = "GitLabWebHook contains the parameters for a GitLab webhook type of trigger")
  public ComGithubOpenshiftApiBuildV1WebHookTrigger getGitlab() {
    return gitlab;
  }

  public void setGitlab(ComGithubOpenshiftApiBuildV1WebHookTrigger gitlab) {
    this.gitlab = gitlab;
  }

  public ComGithubOpenshiftApiBuildV1BuildTriggerPolicy imageChange(ComGithubOpenshiftApiBuildV1ImageChangeTrigger imageChange) {
    this.imageChange = imageChange;
    return this;
  }

   /**
   * imageChange contains parameters for an ImageChange type of trigger
   * @return imageChange
  **/
  @ApiModelProperty(value = "imageChange contains parameters for an ImageChange type of trigger")
  public ComGithubOpenshiftApiBuildV1ImageChangeTrigger getImageChange() {
    return imageChange;
  }

  public void setImageChange(ComGithubOpenshiftApiBuildV1ImageChangeTrigger imageChange) {
    this.imageChange = imageChange;
  }

  public ComGithubOpenshiftApiBuildV1BuildTriggerPolicy type(String type) {
    this.type = type;
    return this;
  }

   /**
   * type is the type of build trigger
   * @return type
  **/
  @ApiModelProperty(required = true, value = "type is the type of build trigger")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComGithubOpenshiftApiBuildV1BuildTriggerPolicy comGithubOpenshiftApiBuildV1BuildTriggerPolicy = (ComGithubOpenshiftApiBuildV1BuildTriggerPolicy) o;
    return Objects.equals(this.bitbucket, comGithubOpenshiftApiBuildV1BuildTriggerPolicy.bitbucket) &&
        Objects.equals(this.generic, comGithubOpenshiftApiBuildV1BuildTriggerPolicy.generic) &&
        Objects.equals(this.github, comGithubOpenshiftApiBuildV1BuildTriggerPolicy.github) &&
        Objects.equals(this.gitlab, comGithubOpenshiftApiBuildV1BuildTriggerPolicy.gitlab) &&
        Objects.equals(this.imageChange, comGithubOpenshiftApiBuildV1BuildTriggerPolicy.imageChange) &&
        Objects.equals(this.type, comGithubOpenshiftApiBuildV1BuildTriggerPolicy.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bitbucket, generic, github, gitlab, imageChange, type);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComGithubOpenshiftApiBuildV1BuildTriggerPolicy {\n");
    
    sb.append("    bitbucket: ").append(toIndentedString(bitbucket)).append("\n");
    sb.append("    generic: ").append(toIndentedString(generic)).append("\n");
    sb.append("    github: ").append(toIndentedString(github)).append("\n");
    sb.append("    gitlab: ").append(toIndentedString(gitlab)).append("\n");
    sb.append("    imageChange: ").append(toIndentedString(imageChange)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

