/*
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package open_cluster_management.io;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import open_cluster_management.io.IoK8sApiCoreV1EnvVar;
import open_cluster_management.io.IoK8sApiCoreV1LocalObjectReference;
import open_cluster_management.io.IoK8sApiCoreV1ObjectReference;

/**
 * DockerBuildStrategy defines input parameters specific to container image build.
 */
@ApiModel(description = "DockerBuildStrategy defines input parameters specific to container image build.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-05-18T17:27:50.678+03:00")
public class ComGithubOpenshiftApiBuildV1DockerBuildStrategy {
  @SerializedName("buildArgs")
  private List<IoK8sApiCoreV1EnvVar> buildArgs = null;

  @SerializedName("dockerfilePath")
  private String dockerfilePath = null;

  @SerializedName("env")
  private List<IoK8sApiCoreV1EnvVar> env = null;

  @SerializedName("forcePull")
  private Boolean forcePull = null;

  @SerializedName("from")
  private IoK8sApiCoreV1ObjectReference from = null;

  @SerializedName("imageOptimizationPolicy")
  private String imageOptimizationPolicy = null;

  @SerializedName("noCache")
  private Boolean noCache = null;

  @SerializedName("pullSecret")
  private IoK8sApiCoreV1LocalObjectReference pullSecret = null;

  public ComGithubOpenshiftApiBuildV1DockerBuildStrategy buildArgs(List<IoK8sApiCoreV1EnvVar> buildArgs) {
    this.buildArgs = buildArgs;
    return this;
  }

  public ComGithubOpenshiftApiBuildV1DockerBuildStrategy addBuildArgsItem(IoK8sApiCoreV1EnvVar buildArgsItem) {
    if (this.buildArgs == null) {
      this.buildArgs = new ArrayList<>();
    }
    this.buildArgs.add(buildArgsItem);
    return this;
  }

   /**
   * buildArgs contains build arguments that will be resolved in the Dockerfile.  See https://docs.docker.com/engine/reference/builder/#/arg for more details.
   * @return buildArgs
  **/
  @ApiModelProperty(value = "buildArgs contains build arguments that will be resolved in the Dockerfile.  See https://docs.docker.com/engine/reference/builder/#/arg for more details.")
  public List<IoK8sApiCoreV1EnvVar> getBuildArgs() {
    return buildArgs;
  }

  public void setBuildArgs(List<IoK8sApiCoreV1EnvVar> buildArgs) {
    this.buildArgs = buildArgs;
  }

  public ComGithubOpenshiftApiBuildV1DockerBuildStrategy dockerfilePath(String dockerfilePath) {
    this.dockerfilePath = dockerfilePath;
    return this;
  }

   /**
   * dockerfilePath is the path of the Dockerfile that will be used to build the container image, relative to the root of the context (contextDir).
   * @return dockerfilePath
  **/
  @ApiModelProperty(value = "dockerfilePath is the path of the Dockerfile that will be used to build the container image, relative to the root of the context (contextDir).")
  public String getDockerfilePath() {
    return dockerfilePath;
  }

  public void setDockerfilePath(String dockerfilePath) {
    this.dockerfilePath = dockerfilePath;
  }

  public ComGithubOpenshiftApiBuildV1DockerBuildStrategy env(List<IoK8sApiCoreV1EnvVar> env) {
    this.env = env;
    return this;
  }

  public ComGithubOpenshiftApiBuildV1DockerBuildStrategy addEnvItem(IoK8sApiCoreV1EnvVar envItem) {
    if (this.env == null) {
      this.env = new ArrayList<>();
    }
    this.env.add(envItem);
    return this;
  }

   /**
   * env contains additional environment variables you want to pass into a builder container.
   * @return env
  **/
  @ApiModelProperty(value = "env contains additional environment variables you want to pass into a builder container.")
  public List<IoK8sApiCoreV1EnvVar> getEnv() {
    return env;
  }

  public void setEnv(List<IoK8sApiCoreV1EnvVar> env) {
    this.env = env;
  }

  public ComGithubOpenshiftApiBuildV1DockerBuildStrategy forcePull(Boolean forcePull) {
    this.forcePull = forcePull;
    return this;
  }

   /**
   * forcePull describes if the builder should pull the images from registry prior to building.
   * @return forcePull
  **/
  @ApiModelProperty(value = "forcePull describes if the builder should pull the images from registry prior to building.")
  public Boolean isForcePull() {
    return forcePull;
  }

  public void setForcePull(Boolean forcePull) {
    this.forcePull = forcePull;
  }

  public ComGithubOpenshiftApiBuildV1DockerBuildStrategy from(IoK8sApiCoreV1ObjectReference from) {
    this.from = from;
    return this;
  }

   /**
   * from is reference to an DockerImage, ImageStreamTag, or ImageStreamImage from which the container image should be pulled the resulting image will be used in the FROM line of the Dockerfile for this build.
   * @return from
  **/
  @ApiModelProperty(value = "from is reference to an DockerImage, ImageStreamTag, or ImageStreamImage from which the container image should be pulled the resulting image will be used in the FROM line of the Dockerfile for this build.")
  public IoK8sApiCoreV1ObjectReference getFrom() {
    return from;
  }

  public void setFrom(IoK8sApiCoreV1ObjectReference from) {
    this.from = from;
  }

  public ComGithubOpenshiftApiBuildV1DockerBuildStrategy imageOptimizationPolicy(String imageOptimizationPolicy) {
    this.imageOptimizationPolicy = imageOptimizationPolicy;
    return this;
  }

   /**
   * imageOptimizationPolicy describes what optimizations the system can use when building images to reduce the final size or time spent building the image. The default policy is &#39;None&#39; which means the final build image will be equivalent to an image created by the container image build API. The experimental policy &#39;SkipLayers&#39; will avoid commiting new layers in between each image step, and will fail if the Dockerfile cannot provide compatibility with the &#39;None&#39; policy. An additional experimental policy &#39;SkipLayersAndWarn&#39; is the same as &#39;SkipLayers&#39; but simply warns if compatibility cannot be preserved.
   * @return imageOptimizationPolicy
  **/
  @ApiModelProperty(value = "imageOptimizationPolicy describes what optimizations the system can use when building images to reduce the final size or time spent building the image. The default policy is 'None' which means the final build image will be equivalent to an image created by the container image build API. The experimental policy 'SkipLayers' will avoid commiting new layers in between each image step, and will fail if the Dockerfile cannot provide compatibility with the 'None' policy. An additional experimental policy 'SkipLayersAndWarn' is the same as 'SkipLayers' but simply warns if compatibility cannot be preserved.")
  public String getImageOptimizationPolicy() {
    return imageOptimizationPolicy;
  }

  public void setImageOptimizationPolicy(String imageOptimizationPolicy) {
    this.imageOptimizationPolicy = imageOptimizationPolicy;
  }

  public ComGithubOpenshiftApiBuildV1DockerBuildStrategy noCache(Boolean noCache) {
    this.noCache = noCache;
    return this;
  }

   /**
   * noCache if set to true indicates that the container image build must be executed with the --no-cache&#x3D;true flag
   * @return noCache
  **/
  @ApiModelProperty(value = "noCache if set to true indicates that the container image build must be executed with the --no-cache=true flag")
  public Boolean isNoCache() {
    return noCache;
  }

  public void setNoCache(Boolean noCache) {
    this.noCache = noCache;
  }

  public ComGithubOpenshiftApiBuildV1DockerBuildStrategy pullSecret(IoK8sApiCoreV1LocalObjectReference pullSecret) {
    this.pullSecret = pullSecret;
    return this;
  }

   /**
   * pullSecret is the name of a Secret that would be used for setting up the authentication for pulling the container images from the private Docker registries
   * @return pullSecret
  **/
  @ApiModelProperty(value = "pullSecret is the name of a Secret that would be used for setting up the authentication for pulling the container images from the private Docker registries")
  public IoK8sApiCoreV1LocalObjectReference getPullSecret() {
    return pullSecret;
  }

  public void setPullSecret(IoK8sApiCoreV1LocalObjectReference pullSecret) {
    this.pullSecret = pullSecret;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComGithubOpenshiftApiBuildV1DockerBuildStrategy comGithubOpenshiftApiBuildV1DockerBuildStrategy = (ComGithubOpenshiftApiBuildV1DockerBuildStrategy) o;
    return Objects.equals(this.buildArgs, comGithubOpenshiftApiBuildV1DockerBuildStrategy.buildArgs) &&
        Objects.equals(this.dockerfilePath, comGithubOpenshiftApiBuildV1DockerBuildStrategy.dockerfilePath) &&
        Objects.equals(this.env, comGithubOpenshiftApiBuildV1DockerBuildStrategy.env) &&
        Objects.equals(this.forcePull, comGithubOpenshiftApiBuildV1DockerBuildStrategy.forcePull) &&
        Objects.equals(this.from, comGithubOpenshiftApiBuildV1DockerBuildStrategy.from) &&
        Objects.equals(this.imageOptimizationPolicy, comGithubOpenshiftApiBuildV1DockerBuildStrategy.imageOptimizationPolicy) &&
        Objects.equals(this.noCache, comGithubOpenshiftApiBuildV1DockerBuildStrategy.noCache) &&
        Objects.equals(this.pullSecret, comGithubOpenshiftApiBuildV1DockerBuildStrategy.pullSecret);
  }

  @Override
  public int hashCode() {
    return Objects.hash(buildArgs, dockerfilePath, env, forcePull, from, imageOptimizationPolicy, noCache, pullSecret);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComGithubOpenshiftApiBuildV1DockerBuildStrategy {\n");
    
    sb.append("    buildArgs: ").append(toIndentedString(buildArgs)).append("\n");
    sb.append("    dockerfilePath: ").append(toIndentedString(dockerfilePath)).append("\n");
    sb.append("    env: ").append(toIndentedString(env)).append("\n");
    sb.append("    forcePull: ").append(toIndentedString(forcePull)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    imageOptimizationPolicy: ").append(toIndentedString(imageOptimizationPolicy)).append("\n");
    sb.append("    noCache: ").append(toIndentedString(noCache)).append("\n");
    sb.append("    pullSecret: ").append(toIndentedString(pullSecret)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

