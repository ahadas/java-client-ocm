/*
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package open_cluster_management.io;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * SignatureSubject holds information about a person or entity who created the signature.
 */
@ApiModel(description = "SignatureSubject holds information about a person or entity who created the signature.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-05-18T17:27:50.678+03:00")
public class ComGithubOpenshiftApiImageV1SignatureSubject {
  @SerializedName("commonName")
  private String commonName = null;

  @SerializedName("organization")
  private String organization = null;

  @SerializedName("publicKeyID")
  private String publicKeyID = null;

  public ComGithubOpenshiftApiImageV1SignatureSubject commonName(String commonName) {
    this.commonName = commonName;
    return this;
  }

   /**
   * Common name (e.g. openshift-signing-service).
   * @return commonName
  **/
  @ApiModelProperty(value = "Common name (e.g. openshift-signing-service).")
  public String getCommonName() {
    return commonName;
  }

  public void setCommonName(String commonName) {
    this.commonName = commonName;
  }

  public ComGithubOpenshiftApiImageV1SignatureSubject organization(String organization) {
    this.organization = organization;
    return this;
  }

   /**
   * Organization name.
   * @return organization
  **/
  @ApiModelProperty(value = "Organization name.")
  public String getOrganization() {
    return organization;
  }

  public void setOrganization(String organization) {
    this.organization = organization;
  }

  public ComGithubOpenshiftApiImageV1SignatureSubject publicKeyID(String publicKeyID) {
    this.publicKeyID = publicKeyID;
    return this;
  }

   /**
   * If present, it is a human readable key id of public key belonging to the subject used to verify image signature. It should contain at least 64 lowest bits of public key&#39;s fingerprint (e.g. 0x685ebe62bf278440).
   * @return publicKeyID
  **/
  @ApiModelProperty(required = true, value = "If present, it is a human readable key id of public key belonging to the subject used to verify image signature. It should contain at least 64 lowest bits of public key's fingerprint (e.g. 0x685ebe62bf278440).")
  public String getPublicKeyID() {
    return publicKeyID;
  }

  public void setPublicKeyID(String publicKeyID) {
    this.publicKeyID = publicKeyID;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComGithubOpenshiftApiImageV1SignatureSubject comGithubOpenshiftApiImageV1SignatureSubject = (ComGithubOpenshiftApiImageV1SignatureSubject) o;
    return Objects.equals(this.commonName, comGithubOpenshiftApiImageV1SignatureSubject.commonName) &&
        Objects.equals(this.organization, comGithubOpenshiftApiImageV1SignatureSubject.organization) &&
        Objects.equals(this.publicKeyID, comGithubOpenshiftApiImageV1SignatureSubject.publicKeyID);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commonName, organization, publicKeyID);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComGithubOpenshiftApiImageV1SignatureSubject {\n");
    
    sb.append("    commonName: ").append(toIndentedString(commonName)).append("\n");
    sb.append("    organization: ").append(toIndentedString(organization)).append("\n");
    sb.append("    publicKeyID: ").append(toIndentedString(publicKeyID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

