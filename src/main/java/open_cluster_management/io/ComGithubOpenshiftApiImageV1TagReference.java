/*
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package open_cluster_management.io;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import open_cluster_management.io.ComGithubOpenshiftApiImageV1TagImportPolicy;
import open_cluster_management.io.ComGithubOpenshiftApiImageV1TagReferencePolicy;
import open_cluster_management.io.IoK8sApiCoreV1ObjectReference;

/**
 * TagReference specifies optional annotations for images using this tag and an optional reference to an ImageStreamTag, ImageStreamImage, or DockerImage this tag should track.
 */
@ApiModel(description = "TagReference specifies optional annotations for images using this tag and an optional reference to an ImageStreamTag, ImageStreamImage, or DockerImage this tag should track.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-05-18T17:27:50.678+03:00")
public class ComGithubOpenshiftApiImageV1TagReference {
  @SerializedName("annotations")
  private Map<String, String> annotations = null;

  @SerializedName("from")
  private IoK8sApiCoreV1ObjectReference from = null;

  @SerializedName("generation")
  private Long generation = null;

  @SerializedName("importPolicy")
  private ComGithubOpenshiftApiImageV1TagImportPolicy importPolicy = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("reference")
  private Boolean reference = null;

  @SerializedName("referencePolicy")
  private ComGithubOpenshiftApiImageV1TagReferencePolicy referencePolicy = null;

  public ComGithubOpenshiftApiImageV1TagReference annotations(Map<String, String> annotations) {
    this.annotations = annotations;
    return this;
  }

  public ComGithubOpenshiftApiImageV1TagReference putAnnotationsItem(String key, String annotationsItem) {
    if (this.annotations == null) {
      this.annotations = new HashMap<>();
    }
    this.annotations.put(key, annotationsItem);
    return this;
  }

   /**
   * Optional; if specified, annotations that are applied to images retrieved via ImageStreamTags.
   * @return annotations
  **/
  @ApiModelProperty(value = "Optional; if specified, annotations that are applied to images retrieved via ImageStreamTags.")
  public Map<String, String> getAnnotations() {
    return annotations;
  }

  public void setAnnotations(Map<String, String> annotations) {
    this.annotations = annotations;
  }

  public ComGithubOpenshiftApiImageV1TagReference from(IoK8sApiCoreV1ObjectReference from) {
    this.from = from;
    return this;
  }

   /**
   * Optional; if specified, a reference to another image that this tag should point to. Valid values are ImageStreamTag, ImageStreamImage, and DockerImage.  ImageStreamTag references can only reference a tag within this same ImageStream.
   * @return from
  **/
  @ApiModelProperty(value = "Optional; if specified, a reference to another image that this tag should point to. Valid values are ImageStreamTag, ImageStreamImage, and DockerImage.  ImageStreamTag references can only reference a tag within this same ImageStream.")
  public IoK8sApiCoreV1ObjectReference getFrom() {
    return from;
  }

  public void setFrom(IoK8sApiCoreV1ObjectReference from) {
    this.from = from;
  }

  public ComGithubOpenshiftApiImageV1TagReference generation(Long generation) {
    this.generation = generation;
    return this;
  }

   /**
   * Generation is a counter that tracks mutations to the spec tag (user intent). When a tag reference is changed the generation is set to match the current stream generation (which is incremented every time spec is changed). Other processes in the system like the image importer observe that the generation of spec tag is newer than the generation recorded in the status and use that as a trigger to import the newest remote tag. To trigger a new import, clients may set this value to zero which will reset the generation to the latest stream generation. Legacy clients will send this value as nil which will be merged with the current tag generation.
   * @return generation
  **/
  @ApiModelProperty(value = "Generation is a counter that tracks mutations to the spec tag (user intent). When a tag reference is changed the generation is set to match the current stream generation (which is incremented every time spec is changed). Other processes in the system like the image importer observe that the generation of spec tag is newer than the generation recorded in the status and use that as a trigger to import the newest remote tag. To trigger a new import, clients may set this value to zero which will reset the generation to the latest stream generation. Legacy clients will send this value as nil which will be merged with the current tag generation.")
  public Long getGeneration() {
    return generation;
  }

  public void setGeneration(Long generation) {
    this.generation = generation;
  }

  public ComGithubOpenshiftApiImageV1TagReference importPolicy(ComGithubOpenshiftApiImageV1TagImportPolicy importPolicy) {
    this.importPolicy = importPolicy;
    return this;
  }

   /**
   * ImportPolicy is information that controls how images may be imported by the server.
   * @return importPolicy
  **/
  @ApiModelProperty(value = "ImportPolicy is information that controls how images may be imported by the server.")
  public ComGithubOpenshiftApiImageV1TagImportPolicy getImportPolicy() {
    return importPolicy;
  }

  public void setImportPolicy(ComGithubOpenshiftApiImageV1TagImportPolicy importPolicy) {
    this.importPolicy = importPolicy;
  }

  public ComGithubOpenshiftApiImageV1TagReference name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the tag
   * @return name
  **/
  @ApiModelProperty(required = true, value = "Name of the tag")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public ComGithubOpenshiftApiImageV1TagReference reference(Boolean reference) {
    this.reference = reference;
    return this;
  }

   /**
   * Reference states if the tag will be imported. Default value is false, which means the tag will be imported.
   * @return reference
  **/
  @ApiModelProperty(value = "Reference states if the tag will be imported. Default value is false, which means the tag will be imported.")
  public Boolean isReference() {
    return reference;
  }

  public void setReference(Boolean reference) {
    this.reference = reference;
  }

  public ComGithubOpenshiftApiImageV1TagReference referencePolicy(ComGithubOpenshiftApiImageV1TagReferencePolicy referencePolicy) {
    this.referencePolicy = referencePolicy;
    return this;
  }

   /**
   * ReferencePolicy defines how other components should consume the image.
   * @return referencePolicy
  **/
  @ApiModelProperty(value = "ReferencePolicy defines how other components should consume the image.")
  public ComGithubOpenshiftApiImageV1TagReferencePolicy getReferencePolicy() {
    return referencePolicy;
  }

  public void setReferencePolicy(ComGithubOpenshiftApiImageV1TagReferencePolicy referencePolicy) {
    this.referencePolicy = referencePolicy;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComGithubOpenshiftApiImageV1TagReference comGithubOpenshiftApiImageV1TagReference = (ComGithubOpenshiftApiImageV1TagReference) o;
    return Objects.equals(this.annotations, comGithubOpenshiftApiImageV1TagReference.annotations) &&
        Objects.equals(this.from, comGithubOpenshiftApiImageV1TagReference.from) &&
        Objects.equals(this.generation, comGithubOpenshiftApiImageV1TagReference.generation) &&
        Objects.equals(this.importPolicy, comGithubOpenshiftApiImageV1TagReference.importPolicy) &&
        Objects.equals(this.name, comGithubOpenshiftApiImageV1TagReference.name) &&
        Objects.equals(this.reference, comGithubOpenshiftApiImageV1TagReference.reference) &&
        Objects.equals(this.referencePolicy, comGithubOpenshiftApiImageV1TagReference.referencePolicy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(annotations, from, generation, importPolicy, name, reference, referencePolicy);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComGithubOpenshiftApiImageV1TagReference {\n");
    
    sb.append("    annotations: ").append(toIndentedString(annotations)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    generation: ").append(toIndentedString(generation)).append("\n");
    sb.append("    importPolicy: ").append(toIndentedString(importPolicy)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    referencePolicy: ").append(toIndentedString(referencePolicy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

