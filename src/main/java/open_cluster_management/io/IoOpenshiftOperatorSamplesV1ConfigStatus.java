/*
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package open_cluster_management.io;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import open_cluster_management.io.IoOpenshiftOperatorSamplesV1ConfigStatusConditions;

/**
 * ConfigStatus contains the actual configuration in effect, as well as various details that describe the state of the Samples Operator.
 */
@ApiModel(description = "ConfigStatus contains the actual configuration in effect, as well as various details that describe the state of the Samples Operator.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-05-18T17:27:50.678+03:00")
public class IoOpenshiftOperatorSamplesV1ConfigStatus {
  @SerializedName("architectures")
  private List<String> architectures = null;

  @SerializedName("conditions")
  private List<IoOpenshiftOperatorSamplesV1ConfigStatusConditions> conditions = null;

  @SerializedName("managementState")
  private String managementState = null;

  @SerializedName("samplesRegistry")
  private String samplesRegistry = null;

  @SerializedName("skippedImagestreams")
  private List<String> skippedImagestreams = null;

  @SerializedName("skippedTemplates")
  private List<String> skippedTemplates = null;

  @SerializedName("version")
  private String version = null;

  public IoOpenshiftOperatorSamplesV1ConfigStatus architectures(List<String> architectures) {
    this.architectures = architectures;
    return this;
  }

  public IoOpenshiftOperatorSamplesV1ConfigStatus addArchitecturesItem(String architecturesItem) {
    if (this.architectures == null) {
      this.architectures = new ArrayList<>();
    }
    this.architectures.add(architecturesItem);
    return this;
  }

   /**
   * architectures determine which hardware architecture(s) to install, where x86_64 and ppc64le are the supported choices.
   * @return architectures
  **/
  @ApiModelProperty(value = "architectures determine which hardware architecture(s) to install, where x86_64 and ppc64le are the supported choices.")
  public List<String> getArchitectures() {
    return architectures;
  }

  public void setArchitectures(List<String> architectures) {
    this.architectures = architectures;
  }

  public IoOpenshiftOperatorSamplesV1ConfigStatus conditions(List<IoOpenshiftOperatorSamplesV1ConfigStatusConditions> conditions) {
    this.conditions = conditions;
    return this;
  }

  public IoOpenshiftOperatorSamplesV1ConfigStatus addConditionsItem(IoOpenshiftOperatorSamplesV1ConfigStatusConditions conditionsItem) {
    if (this.conditions == null) {
      this.conditions = new ArrayList<>();
    }
    this.conditions.add(conditionsItem);
    return this;
  }

   /**
   * conditions represents the available maintenance status of the sample imagestreams and templates.
   * @return conditions
  **/
  @ApiModelProperty(value = "conditions represents the available maintenance status of the sample imagestreams and templates.")
  public List<IoOpenshiftOperatorSamplesV1ConfigStatusConditions> getConditions() {
    return conditions;
  }

  public void setConditions(List<IoOpenshiftOperatorSamplesV1ConfigStatusConditions> conditions) {
    this.conditions = conditions;
  }

  public IoOpenshiftOperatorSamplesV1ConfigStatus managementState(String managementState) {
    this.managementState = managementState;
    return this;
  }

   /**
   * managementState reflects the current operational status of the on/off switch for the operator.  This operator compares the ManagementState as part of determining that we are turning the operator back on (i.e. \&quot;Managed\&quot;) when it was previously \&quot;Unmanaged\&quot;.
   * @return managementState
  **/
  @ApiModelProperty(value = "managementState reflects the current operational status of the on/off switch for the operator.  This operator compares the ManagementState as part of determining that we are turning the operator back on (i.e. \"Managed\") when it was previously \"Unmanaged\".")
  public String getManagementState() {
    return managementState;
  }

  public void setManagementState(String managementState) {
    this.managementState = managementState;
  }

  public IoOpenshiftOperatorSamplesV1ConfigStatus samplesRegistry(String samplesRegistry) {
    this.samplesRegistry = samplesRegistry;
    return this;
  }

   /**
   * samplesRegistry allows for the specification of which registry is accessed by the ImageStreams for their image content.  Defaults on the content in https://github.com/openshift/library that are pulled into this github repository, but based on our pulling only ocp content it typically defaults to registry.redhat.io.
   * @return samplesRegistry
  **/
  @ApiModelProperty(value = "samplesRegistry allows for the specification of which registry is accessed by the ImageStreams for their image content.  Defaults on the content in https://github.com/openshift/library that are pulled into this github repository, but based on our pulling only ocp content it typically defaults to registry.redhat.io.")
  public String getSamplesRegistry() {
    return samplesRegistry;
  }

  public void setSamplesRegistry(String samplesRegistry) {
    this.samplesRegistry = samplesRegistry;
  }

  public IoOpenshiftOperatorSamplesV1ConfigStatus skippedImagestreams(List<String> skippedImagestreams) {
    this.skippedImagestreams = skippedImagestreams;
    return this;
  }

  public IoOpenshiftOperatorSamplesV1ConfigStatus addSkippedImagestreamsItem(String skippedImagestreamsItem) {
    if (this.skippedImagestreams == null) {
      this.skippedImagestreams = new ArrayList<>();
    }
    this.skippedImagestreams.add(skippedImagestreamsItem);
    return this;
  }

   /**
   * skippedImagestreams specifies names of image streams that should NOT be created/updated.  Admins can use this to allow them to delete content they don’t want.  They will still have to manually delete the content but the operator will not recreate(or update) anything listed here.
   * @return skippedImagestreams
  **/
  @ApiModelProperty(value = "skippedImagestreams specifies names of image streams that should NOT be created/updated.  Admins can use this to allow them to delete content they don’t want.  They will still have to manually delete the content but the operator will not recreate(or update) anything listed here.")
  public List<String> getSkippedImagestreams() {
    return skippedImagestreams;
  }

  public void setSkippedImagestreams(List<String> skippedImagestreams) {
    this.skippedImagestreams = skippedImagestreams;
  }

  public IoOpenshiftOperatorSamplesV1ConfigStatus skippedTemplates(List<String> skippedTemplates) {
    this.skippedTemplates = skippedTemplates;
    return this;
  }

  public IoOpenshiftOperatorSamplesV1ConfigStatus addSkippedTemplatesItem(String skippedTemplatesItem) {
    if (this.skippedTemplates == null) {
      this.skippedTemplates = new ArrayList<>();
    }
    this.skippedTemplates.add(skippedTemplatesItem);
    return this;
  }

   /**
   * skippedTemplates specifies names of templates that should NOT be created/updated.  Admins can use this to allow them to delete content they don’t want.  They will still have to manually delete the content but the operator will not recreate(or update) anything listed here.
   * @return skippedTemplates
  **/
  @ApiModelProperty(value = "skippedTemplates specifies names of templates that should NOT be created/updated.  Admins can use this to allow them to delete content they don’t want.  They will still have to manually delete the content but the operator will not recreate(or update) anything listed here.")
  public List<String> getSkippedTemplates() {
    return skippedTemplates;
  }

  public void setSkippedTemplates(List<String> skippedTemplates) {
    this.skippedTemplates = skippedTemplates;
  }

  public IoOpenshiftOperatorSamplesV1ConfigStatus version(String version) {
    this.version = version;
    return this;
  }

   /**
   * version is the value of the operator&#39;s payload based version indicator when it was last successfully processed
   * @return version
  **/
  @ApiModelProperty(value = "version is the value of the operator's payload based version indicator when it was last successfully processed")
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IoOpenshiftOperatorSamplesV1ConfigStatus ioOpenshiftOperatorSamplesV1ConfigStatus = (IoOpenshiftOperatorSamplesV1ConfigStatus) o;
    return Objects.equals(this.architectures, ioOpenshiftOperatorSamplesV1ConfigStatus.architectures) &&
        Objects.equals(this.conditions, ioOpenshiftOperatorSamplesV1ConfigStatus.conditions) &&
        Objects.equals(this.managementState, ioOpenshiftOperatorSamplesV1ConfigStatus.managementState) &&
        Objects.equals(this.samplesRegistry, ioOpenshiftOperatorSamplesV1ConfigStatus.samplesRegistry) &&
        Objects.equals(this.skippedImagestreams, ioOpenshiftOperatorSamplesV1ConfigStatus.skippedImagestreams) &&
        Objects.equals(this.skippedTemplates, ioOpenshiftOperatorSamplesV1ConfigStatus.skippedTemplates) &&
        Objects.equals(this.version, ioOpenshiftOperatorSamplesV1ConfigStatus.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(architectures, conditions, managementState, samplesRegistry, skippedImagestreams, skippedTemplates, version);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IoOpenshiftOperatorSamplesV1ConfigStatus {\n");
    
    sb.append("    architectures: ").append(toIndentedString(architectures)).append("\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    managementState: ").append(toIndentedString(managementState)).append("\n");
    sb.append("    samplesRegistry: ").append(toIndentedString(samplesRegistry)).append("\n");
    sb.append("    skippedImagestreams: ").append(toIndentedString(skippedImagestreams)).append("\n");
    sb.append("    skippedTemplates: ").append(toIndentedString(skippedTemplates)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

