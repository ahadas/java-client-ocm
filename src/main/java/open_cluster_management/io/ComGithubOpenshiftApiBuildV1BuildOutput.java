/*
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package open_cluster_management.io;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import open_cluster_management.io.ComGithubOpenshiftApiBuildV1ImageLabel;
import open_cluster_management.io.IoK8sApiCoreV1LocalObjectReference;
import open_cluster_management.io.IoK8sApiCoreV1ObjectReference;

/**
 * BuildOutput is input to a build strategy and describes the container image that the strategy should produce.
 */
@ApiModel(description = "BuildOutput is input to a build strategy and describes the container image that the strategy should produce.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-05-18T17:27:50.678+03:00")
public class ComGithubOpenshiftApiBuildV1BuildOutput {
  @SerializedName("imageLabels")
  private List<ComGithubOpenshiftApiBuildV1ImageLabel> imageLabels = null;

  @SerializedName("pushSecret")
  private IoK8sApiCoreV1LocalObjectReference pushSecret = null;

  @SerializedName("to")
  private IoK8sApiCoreV1ObjectReference to = null;

  public ComGithubOpenshiftApiBuildV1BuildOutput imageLabels(List<ComGithubOpenshiftApiBuildV1ImageLabel> imageLabels) {
    this.imageLabels = imageLabels;
    return this;
  }

  public ComGithubOpenshiftApiBuildV1BuildOutput addImageLabelsItem(ComGithubOpenshiftApiBuildV1ImageLabel imageLabelsItem) {
    if (this.imageLabels == null) {
      this.imageLabels = new ArrayList<>();
    }
    this.imageLabels.add(imageLabelsItem);
    return this;
  }

   /**
   * imageLabels define a list of labels that are applied to the resulting image. If there are multiple labels with the same name then the last one in the list is used.
   * @return imageLabels
  **/
  @ApiModelProperty(value = "imageLabels define a list of labels that are applied to the resulting image. If there are multiple labels with the same name then the last one in the list is used.")
  public List<ComGithubOpenshiftApiBuildV1ImageLabel> getImageLabels() {
    return imageLabels;
  }

  public void setImageLabels(List<ComGithubOpenshiftApiBuildV1ImageLabel> imageLabels) {
    this.imageLabels = imageLabels;
  }

  public ComGithubOpenshiftApiBuildV1BuildOutput pushSecret(IoK8sApiCoreV1LocalObjectReference pushSecret) {
    this.pushSecret = pushSecret;
    return this;
  }

   /**
   * PushSecret is the name of a Secret that would be used for setting up the authentication for executing the Docker push to authentication enabled Docker Registry (or Docker Hub).
   * @return pushSecret
  **/
  @ApiModelProperty(value = "PushSecret is the name of a Secret that would be used for setting up the authentication for executing the Docker push to authentication enabled Docker Registry (or Docker Hub).")
  public IoK8sApiCoreV1LocalObjectReference getPushSecret() {
    return pushSecret;
  }

  public void setPushSecret(IoK8sApiCoreV1LocalObjectReference pushSecret) {
    this.pushSecret = pushSecret;
  }

  public ComGithubOpenshiftApiBuildV1BuildOutput to(IoK8sApiCoreV1ObjectReference to) {
    this.to = to;
    return this;
  }

   /**
   * to defines an optional location to push the output of this build to. Kind must be one of &#39;ImageStreamTag&#39; or &#39;DockerImage&#39;. This value will be used to look up a container image repository to push to. In the case of an ImageStreamTag, the ImageStreamTag will be looked for in the namespace of the build unless Namespace is specified.
   * @return to
  **/
  @ApiModelProperty(value = "to defines an optional location to push the output of this build to. Kind must be one of 'ImageStreamTag' or 'DockerImage'. This value will be used to look up a container image repository to push to. In the case of an ImageStreamTag, the ImageStreamTag will be looked for in the namespace of the build unless Namespace is specified.")
  public IoK8sApiCoreV1ObjectReference getTo() {
    return to;
  }

  public void setTo(IoK8sApiCoreV1ObjectReference to) {
    this.to = to;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComGithubOpenshiftApiBuildV1BuildOutput comGithubOpenshiftApiBuildV1BuildOutput = (ComGithubOpenshiftApiBuildV1BuildOutput) o;
    return Objects.equals(this.imageLabels, comGithubOpenshiftApiBuildV1BuildOutput.imageLabels) &&
        Objects.equals(this.pushSecret, comGithubOpenshiftApiBuildV1BuildOutput.pushSecret) &&
        Objects.equals(this.to, comGithubOpenshiftApiBuildV1BuildOutput.to);
  }

  @Override
  public int hashCode() {
    return Objects.hash(imageLabels, pushSecret, to);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComGithubOpenshiftApiBuildV1BuildOutput {\n");
    
    sb.append("    imageLabels: ").append(toIndentedString(imageLabels)).append("\n");
    sb.append("    pushSecret: ").append(toIndentedString(pushSecret)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

