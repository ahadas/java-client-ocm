/*
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package open_cluster_management.io;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import open_cluster_management.io.IoOpenshiftOperatorV1alpha1ImageContentSourcePolicySpecRepositoryDigestMirrors;

/**
 * spec holds user settable values for configuration
 */
@ApiModel(description = "spec holds user settable values for configuration")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-05-18T17:27:50.678+03:00")
public class IoOpenshiftOperatorV1alpha1ImageContentSourcePolicySpec {
  @SerializedName("repositoryDigestMirrors")
  private List<IoOpenshiftOperatorV1alpha1ImageContentSourcePolicySpecRepositoryDigestMirrors> repositoryDigestMirrors = null;

  public IoOpenshiftOperatorV1alpha1ImageContentSourcePolicySpec repositoryDigestMirrors(List<IoOpenshiftOperatorV1alpha1ImageContentSourcePolicySpecRepositoryDigestMirrors> repositoryDigestMirrors) {
    this.repositoryDigestMirrors = repositoryDigestMirrors;
    return this;
  }

  public IoOpenshiftOperatorV1alpha1ImageContentSourcePolicySpec addRepositoryDigestMirrorsItem(IoOpenshiftOperatorV1alpha1ImageContentSourcePolicySpecRepositoryDigestMirrors repositoryDigestMirrorsItem) {
    if (this.repositoryDigestMirrors == null) {
      this.repositoryDigestMirrors = new ArrayList<>();
    }
    this.repositoryDigestMirrors.add(repositoryDigestMirrorsItem);
    return this;
  }

   /**
   * repositoryDigestMirrors allows images referenced by image digests in pods to be pulled from alternative mirrored repository locations. The image pull specification provided to the pod will be compared to the source locations described in RepositoryDigestMirrors and the image may be pulled down from any of the mirrors in the list instead of the specified repository allowing administrators to choose a potentially faster mirror. Only image pull specifications that have an image disgest will have this behavior applied to them - tags will continue to be pulled from the specified repository in the pull spec.   Each “source” repository is treated independently; configurations for different “source” repositories don’t interact.   When multiple policies are defined for the same “source” repository, the sets of defined mirrors will be merged together, preserving the relative order of the mirrors, if possible. For example, if policy A has mirrors &#x60;a, b, c&#x60; and policy B has mirrors &#x60;c, d, e&#x60;, the mirrors will be used in the order &#x60;a, b, c, d, e&#x60;.  If the orders of mirror entries conflict (e.g. &#x60;a, b&#x60; vs. &#x60;b, a&#x60;) the configuration is not rejected but the resulting order is unspecified.
   * @return repositoryDigestMirrors
  **/
  @ApiModelProperty(value = "repositoryDigestMirrors allows images referenced by image digests in pods to be pulled from alternative mirrored repository locations. The image pull specification provided to the pod will be compared to the source locations described in RepositoryDigestMirrors and the image may be pulled down from any of the mirrors in the list instead of the specified repository allowing administrators to choose a potentially faster mirror. Only image pull specifications that have an image disgest will have this behavior applied to them - tags will continue to be pulled from the specified repository in the pull spec.   Each “source” repository is treated independently; configurations for different “source” repositories don’t interact.   When multiple policies are defined for the same “source” repository, the sets of defined mirrors will be merged together, preserving the relative order of the mirrors, if possible. For example, if policy A has mirrors `a, b, c` and policy B has mirrors `c, d, e`, the mirrors will be used in the order `a, b, c, d, e`.  If the orders of mirror entries conflict (e.g. `a, b` vs. `b, a`) the configuration is not rejected but the resulting order is unspecified.")
  public List<IoOpenshiftOperatorV1alpha1ImageContentSourcePolicySpecRepositoryDigestMirrors> getRepositoryDigestMirrors() {
    return repositoryDigestMirrors;
  }

  public void setRepositoryDigestMirrors(List<IoOpenshiftOperatorV1alpha1ImageContentSourcePolicySpecRepositoryDigestMirrors> repositoryDigestMirrors) {
    this.repositoryDigestMirrors = repositoryDigestMirrors;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IoOpenshiftOperatorV1alpha1ImageContentSourcePolicySpec ioOpenshiftOperatorV1alpha1ImageContentSourcePolicySpec = (IoOpenshiftOperatorV1alpha1ImageContentSourcePolicySpec) o;
    return Objects.equals(this.repositoryDigestMirrors, ioOpenshiftOperatorV1alpha1ImageContentSourcePolicySpec.repositoryDigestMirrors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(repositoryDigestMirrors);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IoOpenshiftOperatorV1alpha1ImageContentSourcePolicySpec {\n");
    
    sb.append("    repositoryDigestMirrors: ").append(toIndentedString(repositoryDigestMirrors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

