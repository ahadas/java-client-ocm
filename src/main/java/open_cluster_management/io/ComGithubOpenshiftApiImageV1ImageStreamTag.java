/*
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package open_cluster_management.io;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import open_cluster_management.io.ComGithubOpenshiftApiImageV1Image;
import open_cluster_management.io.ComGithubOpenshiftApiImageV1ImageLookupPolicy;
import open_cluster_management.io.ComGithubOpenshiftApiImageV1TagEventCondition;
import open_cluster_management.io.ComGithubOpenshiftApiImageV1TagReference;
import open_cluster_management.io.IoK8sApimachineryPkgApisMetaV1ObjectMetaV2;

/**
 * ImageStreamTag represents an Image that is retrieved by tag name from an ImageStream. Use this resource to interact with the tags and images in an image stream by tag, or to see the image details for a particular tag. The image associated with this resource is the most recently successfully tagged, imported, or pushed image (as described in the image stream status.tags.items list for this tag). If an import is in progress or has failed the previous image will be shown. Deleting an image stream tag clears both the status and spec fields of an image stream. If no image can be retrieved for a given tag, a not found error will be returned.
 */
@ApiModel(description = "ImageStreamTag represents an Image that is retrieved by tag name from an ImageStream. Use this resource to interact with the tags and images in an image stream by tag, or to see the image details for a particular tag. The image associated with this resource is the most recently successfully tagged, imported, or pushed image (as described in the image stream status.tags.items list for this tag). If an import is in progress or has failed the previous image will be shown. Deleting an image stream tag clears both the status and spec fields of an image stream. If no image can be retrieved for a given tag, a not found error will be returned.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-05-18T17:27:50.678+03:00")
public class ComGithubOpenshiftApiImageV1ImageStreamTag {
  @SerializedName("apiVersion")
  private String apiVersion = null;

  @SerializedName("conditions")
  private List<ComGithubOpenshiftApiImageV1TagEventCondition> conditions = null;

  @SerializedName("generation")
  private Long generation = null;

  @SerializedName("image")
  private ComGithubOpenshiftApiImageV1Image image = null;

  @SerializedName("kind")
  private String kind = null;

  @SerializedName("lookupPolicy")
  private ComGithubOpenshiftApiImageV1ImageLookupPolicy lookupPolicy = null;

  @SerializedName("metadata")
  private IoK8sApimachineryPkgApisMetaV1ObjectMetaV2 metadata = null;

  @SerializedName("tag")
  private ComGithubOpenshiftApiImageV1TagReference tag = null;

  public ComGithubOpenshiftApiImageV1ImageStreamTag apiVersion(String apiVersion) {
    this.apiVersion = apiVersion;
    return this;
  }

   /**
   * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
   * @return apiVersion
  **/
  @ApiModelProperty(value = "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources")
  public String getApiVersion() {
    return apiVersion;
  }

  public void setApiVersion(String apiVersion) {
    this.apiVersion = apiVersion;
  }

  public ComGithubOpenshiftApiImageV1ImageStreamTag conditions(List<ComGithubOpenshiftApiImageV1TagEventCondition> conditions) {
    this.conditions = conditions;
    return this;
  }

  public ComGithubOpenshiftApiImageV1ImageStreamTag addConditionsItem(ComGithubOpenshiftApiImageV1TagEventCondition conditionsItem) {
    if (this.conditions == null) {
      this.conditions = new ArrayList<>();
    }
    this.conditions.add(conditionsItem);
    return this;
  }

   /**
   * conditions is an array of conditions that apply to the image stream tag.
   * @return conditions
  **/
  @ApiModelProperty(value = "conditions is an array of conditions that apply to the image stream tag.")
  public List<ComGithubOpenshiftApiImageV1TagEventCondition> getConditions() {
    return conditions;
  }

  public void setConditions(List<ComGithubOpenshiftApiImageV1TagEventCondition> conditions) {
    this.conditions = conditions;
  }

  public ComGithubOpenshiftApiImageV1ImageStreamTag generation(Long generation) {
    this.generation = generation;
    return this;
  }

   /**
   * generation is the current generation of the tagged image - if tag is provided and this value is not equal to the tag generation, a user has requested an import that has not completed, or conditions will be filled out indicating any error.
   * @return generation
  **/
  @ApiModelProperty(required = true, value = "generation is the current generation of the tagged image - if tag is provided and this value is not equal to the tag generation, a user has requested an import that has not completed, or conditions will be filled out indicating any error.")
  public Long getGeneration() {
    return generation;
  }

  public void setGeneration(Long generation) {
    this.generation = generation;
  }

  public ComGithubOpenshiftApiImageV1ImageStreamTag image(ComGithubOpenshiftApiImageV1Image image) {
    this.image = image;
    return this;
  }

   /**
   * image associated with the ImageStream and tag.
   * @return image
  **/
  @ApiModelProperty(required = true, value = "image associated with the ImageStream and tag.")
  public ComGithubOpenshiftApiImageV1Image getImage() {
    return image;
  }

  public void setImage(ComGithubOpenshiftApiImageV1Image image) {
    this.image = image;
  }

  public ComGithubOpenshiftApiImageV1ImageStreamTag kind(String kind) {
    this.kind = kind;
    return this;
  }

   /**
   * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   * @return kind
  **/
  @ApiModelProperty(value = "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds")
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }

  public ComGithubOpenshiftApiImageV1ImageStreamTag lookupPolicy(ComGithubOpenshiftApiImageV1ImageLookupPolicy lookupPolicy) {
    this.lookupPolicy = lookupPolicy;
    return this;
  }

   /**
   * lookupPolicy indicates whether this tag will handle image references in this namespace.
   * @return lookupPolicy
  **/
  @ApiModelProperty(required = true, value = "lookupPolicy indicates whether this tag will handle image references in this namespace.")
  public ComGithubOpenshiftApiImageV1ImageLookupPolicy getLookupPolicy() {
    return lookupPolicy;
  }

  public void setLookupPolicy(ComGithubOpenshiftApiImageV1ImageLookupPolicy lookupPolicy) {
    this.lookupPolicy = lookupPolicy;
  }

  public ComGithubOpenshiftApiImageV1ImageStreamTag metadata(IoK8sApimachineryPkgApisMetaV1ObjectMetaV2 metadata) {
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @ApiModelProperty(value = "")
  public IoK8sApimachineryPkgApisMetaV1ObjectMetaV2 getMetadata() {
    return metadata;
  }

  public void setMetadata(IoK8sApimachineryPkgApisMetaV1ObjectMetaV2 metadata) {
    this.metadata = metadata;
  }

  public ComGithubOpenshiftApiImageV1ImageStreamTag tag(ComGithubOpenshiftApiImageV1TagReference tag) {
    this.tag = tag;
    return this;
  }

   /**
   * tag is the spec tag associated with this image stream tag, and it may be null if only pushes have occurred to this image stream.
   * @return tag
  **/
  @ApiModelProperty(required = true, value = "tag is the spec tag associated with this image stream tag, and it may be null if only pushes have occurred to this image stream.")
  public ComGithubOpenshiftApiImageV1TagReference getTag() {
    return tag;
  }

  public void setTag(ComGithubOpenshiftApiImageV1TagReference tag) {
    this.tag = tag;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComGithubOpenshiftApiImageV1ImageStreamTag comGithubOpenshiftApiImageV1ImageStreamTag = (ComGithubOpenshiftApiImageV1ImageStreamTag) o;
    return Objects.equals(this.apiVersion, comGithubOpenshiftApiImageV1ImageStreamTag.apiVersion) &&
        Objects.equals(this.conditions, comGithubOpenshiftApiImageV1ImageStreamTag.conditions) &&
        Objects.equals(this.generation, comGithubOpenshiftApiImageV1ImageStreamTag.generation) &&
        Objects.equals(this.image, comGithubOpenshiftApiImageV1ImageStreamTag.image) &&
        Objects.equals(this.kind, comGithubOpenshiftApiImageV1ImageStreamTag.kind) &&
        Objects.equals(this.lookupPolicy, comGithubOpenshiftApiImageV1ImageStreamTag.lookupPolicy) &&
        Objects.equals(this.metadata, comGithubOpenshiftApiImageV1ImageStreamTag.metadata) &&
        Objects.equals(this.tag, comGithubOpenshiftApiImageV1ImageStreamTag.tag);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiVersion, conditions, generation, image, kind, lookupPolicy, metadata, tag);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComGithubOpenshiftApiImageV1ImageStreamTag {\n");
    
    sb.append("    apiVersion: ").append(toIndentedString(apiVersion)).append("\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    generation: ").append(toIndentedString(generation)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    lookupPolicy: ").append(toIndentedString(lookupPolicy)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

