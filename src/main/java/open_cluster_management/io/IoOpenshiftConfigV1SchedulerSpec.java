/*
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package open_cluster_management.io;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import open_cluster_management.io.IoOpenshiftConfigV1SchedulerSpecPolicy;

/**
 * spec holds user settable values for configuration
 */
@ApiModel(description = "spec holds user settable values for configuration")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-05-18T17:27:50.678+03:00")
public class IoOpenshiftConfigV1SchedulerSpec {
  @SerializedName("defaultNodeSelector")
  private String defaultNodeSelector = null;

  @SerializedName("mastersSchedulable")
  private Boolean mastersSchedulable = null;

  @SerializedName("policy")
  private IoOpenshiftConfigV1SchedulerSpecPolicy policy = null;

  public IoOpenshiftConfigV1SchedulerSpec defaultNodeSelector(String defaultNodeSelector) {
    this.defaultNodeSelector = defaultNodeSelector;
    return this;
  }

   /**
   * defaultNodeSelector helps set the cluster-wide default node selector to restrict pod placement to specific nodes. This is applied to the pods created in all namespaces without a specified nodeSelector value. For example, defaultNodeSelector: \&quot;type&#x3D;user-node,region&#x3D;east\&quot; would set nodeSelector field in pod spec to \&quot;type&#x3D;user-node,region&#x3D;east\&quot; to all pods created in all namespaces. Namespaces having project-wide node selectors won&#39;t be impacted even if this field is set. This adds an annotation section to the namespace. For example, if a new namespace is created with node-selector&#x3D;&#39;type&#x3D;user-node,region&#x3D;east&#39;, the annotation openshift.io/node-selector: type&#x3D;user-node,region&#x3D;east gets added to the project. When the openshift.io/node-selector annotation is set on the project the value is used in preference to the value we are setting for defaultNodeSelector field. For instance, openshift.io/node-selector: \&quot;type&#x3D;user-node,region&#x3D;west\&quot; means that the default of \&quot;type&#x3D;user-node,region&#x3D;east\&quot; set in defaultNodeSelector would not be applied.
   * @return defaultNodeSelector
  **/
  @ApiModelProperty(value = "defaultNodeSelector helps set the cluster-wide default node selector to restrict pod placement to specific nodes. This is applied to the pods created in all namespaces without a specified nodeSelector value. For example, defaultNodeSelector: \"type=user-node,region=east\" would set nodeSelector field in pod spec to \"type=user-node,region=east\" to all pods created in all namespaces. Namespaces having project-wide node selectors won't be impacted even if this field is set. This adds an annotation section to the namespace. For example, if a new namespace is created with node-selector='type=user-node,region=east', the annotation openshift.io/node-selector: type=user-node,region=east gets added to the project. When the openshift.io/node-selector annotation is set on the project the value is used in preference to the value we are setting for defaultNodeSelector field. For instance, openshift.io/node-selector: \"type=user-node,region=west\" means that the default of \"type=user-node,region=east\" set in defaultNodeSelector would not be applied.")
  public String getDefaultNodeSelector() {
    return defaultNodeSelector;
  }

  public void setDefaultNodeSelector(String defaultNodeSelector) {
    this.defaultNodeSelector = defaultNodeSelector;
  }

  public IoOpenshiftConfigV1SchedulerSpec mastersSchedulable(Boolean mastersSchedulable) {
    this.mastersSchedulable = mastersSchedulable;
    return this;
  }

   /**
   * MastersSchedulable allows masters nodes to be schedulable. When this flag is turned on, all the master nodes in the cluster will be made schedulable, so that workload pods can run on them. The default value for this field is false, meaning none of the master nodes are schedulable. Important Note: Once the workload pods start running on the master nodes, extreme care must be taken to ensure that cluster-critical control plane components are not impacted. Please turn on this field after doing due diligence.
   * @return mastersSchedulable
  **/
  @ApiModelProperty(value = "MastersSchedulable allows masters nodes to be schedulable. When this flag is turned on, all the master nodes in the cluster will be made schedulable, so that workload pods can run on them. The default value for this field is false, meaning none of the master nodes are schedulable. Important Note: Once the workload pods start running on the master nodes, extreme care must be taken to ensure that cluster-critical control plane components are not impacted. Please turn on this field after doing due diligence.")
  public Boolean isMastersSchedulable() {
    return mastersSchedulable;
  }

  public void setMastersSchedulable(Boolean mastersSchedulable) {
    this.mastersSchedulable = mastersSchedulable;
  }

  public IoOpenshiftConfigV1SchedulerSpec policy(IoOpenshiftConfigV1SchedulerSpecPolicy policy) {
    this.policy = policy;
    return this;
  }

   /**
   * Get policy
   * @return policy
  **/
  @ApiModelProperty(value = "")
  public IoOpenshiftConfigV1SchedulerSpecPolicy getPolicy() {
    return policy;
  }

  public void setPolicy(IoOpenshiftConfigV1SchedulerSpecPolicy policy) {
    this.policy = policy;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IoOpenshiftConfigV1SchedulerSpec ioOpenshiftConfigV1SchedulerSpec = (IoOpenshiftConfigV1SchedulerSpec) o;
    return Objects.equals(this.defaultNodeSelector, ioOpenshiftConfigV1SchedulerSpec.defaultNodeSelector) &&
        Objects.equals(this.mastersSchedulable, ioOpenshiftConfigV1SchedulerSpec.mastersSchedulable) &&
        Objects.equals(this.policy, ioOpenshiftConfigV1SchedulerSpec.policy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(defaultNodeSelector, mastersSchedulable, policy);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IoOpenshiftConfigV1SchedulerSpec {\n");
    
    sb.append("    defaultNodeSelector: ").append(toIndentedString(defaultNodeSelector)).append("\n");
    sb.append("    mastersSchedulable: ").append(toIndentedString(mastersSchedulable)).append("\n");
    sb.append("    policy: ").append(toIndentedString(policy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

