/*
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package open_cluster_management.io;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import open_cluster_management.io.IoK8sApiCoreV1LocalObjectReference;

/**
 * SecretBuildSource describes a secret and its destination directory that will be used only at the build time. The content of the secret referenced here will be copied into the destination directory instead of mounting.
 */
@ApiModel(description = "SecretBuildSource describes a secret and its destination directory that will be used only at the build time. The content of the secret referenced here will be copied into the destination directory instead of mounting.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-05-18T17:27:50.678+03:00")
public class ComGithubOpenshiftApiBuildV1SecretBuildSource {
  @SerializedName("destinationDir")
  private String destinationDir = null;

  @SerializedName("secret")
  private IoK8sApiCoreV1LocalObjectReference secret = null;

  public ComGithubOpenshiftApiBuildV1SecretBuildSource destinationDir(String destinationDir) {
    this.destinationDir = destinationDir;
    return this;
  }

   /**
   * destinationDir is the directory where the files from the secret should be available for the build time. For the Source build strategy, these will be injected into a container where the assemble script runs. Later, when the script finishes, all files injected will be truncated to zero length. For the container image build strategy, these will be copied into the build directory, where the Dockerfile is located, so users can ADD or COPY them during container image build.
   * @return destinationDir
  **/
  @ApiModelProperty(value = "destinationDir is the directory where the files from the secret should be available for the build time. For the Source build strategy, these will be injected into a container where the assemble script runs. Later, when the script finishes, all files injected will be truncated to zero length. For the container image build strategy, these will be copied into the build directory, where the Dockerfile is located, so users can ADD or COPY them during container image build.")
  public String getDestinationDir() {
    return destinationDir;
  }

  public void setDestinationDir(String destinationDir) {
    this.destinationDir = destinationDir;
  }

  public ComGithubOpenshiftApiBuildV1SecretBuildSource secret(IoK8sApiCoreV1LocalObjectReference secret) {
    this.secret = secret;
    return this;
  }

   /**
   * secret is a reference to an existing secret that you want to use in your build.
   * @return secret
  **/
  @ApiModelProperty(required = true, value = "secret is a reference to an existing secret that you want to use in your build.")
  public IoK8sApiCoreV1LocalObjectReference getSecret() {
    return secret;
  }

  public void setSecret(IoK8sApiCoreV1LocalObjectReference secret) {
    this.secret = secret;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComGithubOpenshiftApiBuildV1SecretBuildSource comGithubOpenshiftApiBuildV1SecretBuildSource = (ComGithubOpenshiftApiBuildV1SecretBuildSource) o;
    return Objects.equals(this.destinationDir, comGithubOpenshiftApiBuildV1SecretBuildSource.destinationDir) &&
        Objects.equals(this.secret, comGithubOpenshiftApiBuildV1SecretBuildSource.secret);
  }

  @Override
  public int hashCode() {
    return Objects.hash(destinationDir, secret);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComGithubOpenshiftApiBuildV1SecretBuildSource {\n");
    
    sb.append("    destinationDir: ").append(toIndentedString(destinationDir)).append("\n");
    sb.append("    secret: ").append(toIndentedString(secret)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

