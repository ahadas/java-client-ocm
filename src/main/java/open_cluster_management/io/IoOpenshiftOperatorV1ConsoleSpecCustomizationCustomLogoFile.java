/*
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package open_cluster_management.io;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * customLogoFile replaces the default OpenShift logo in the masthead and about dialog. It is a reference to a ConfigMap in the openshift-config namespace. This can be created with a command like &#39;oc create configmap custom-logo --from-file&#x3D;/path/to/file -n openshift-config&#39;. Image size must be less than 1 MB due to constraints on the ConfigMap size. The ConfigMap key should include a file extension so that the console serves the file with the correct MIME type. Recommended logo specifications: Dimensions: Max height of 68px and max width of 200px SVG format preferred
 */
@ApiModel(description = "customLogoFile replaces the default OpenShift logo in the masthead and about dialog. It is a reference to a ConfigMap in the openshift-config namespace. This can be created with a command like 'oc create configmap custom-logo --from-file=/path/to/file -n openshift-config'. Image size must be less than 1 MB due to constraints on the ConfigMap size. The ConfigMap key should include a file extension so that the console serves the file with the correct MIME type. Recommended logo specifications: Dimensions: Max height of 68px and max width of 200px SVG format preferred")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-05-18T17:27:50.678+03:00")
public class IoOpenshiftOperatorV1ConsoleSpecCustomizationCustomLogoFile {
  @SerializedName("key")
  private String key = null;

  @SerializedName("name")
  private String name = null;

  public IoOpenshiftOperatorV1ConsoleSpecCustomizationCustomLogoFile key(String key) {
    this.key = key;
    return this;
  }

   /**
   * Key allows pointing to a specific key/value inside of the configmap.  This is useful for logical file references.
   * @return key
  **/
  @ApiModelProperty(value = "Key allows pointing to a specific key/value inside of the configmap.  This is useful for logical file references.")
  public String getKey() {
    return key;
  }

  public void setKey(String key) {
    this.key = key;
  }

  public IoOpenshiftOperatorV1ConsoleSpecCustomizationCustomLogoFile name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @ApiModelProperty(value = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IoOpenshiftOperatorV1ConsoleSpecCustomizationCustomLogoFile ioOpenshiftOperatorV1ConsoleSpecCustomizationCustomLogoFile = (IoOpenshiftOperatorV1ConsoleSpecCustomizationCustomLogoFile) o;
    return Objects.equals(this.key, ioOpenshiftOperatorV1ConsoleSpecCustomizationCustomLogoFile.key) &&
        Objects.equals(this.name, ioOpenshiftOperatorV1ConsoleSpecCustomizationCustomLogoFile.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(key, name);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IoOpenshiftOperatorV1ConsoleSpecCustomizationCustomLogoFile {\n");
    
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

