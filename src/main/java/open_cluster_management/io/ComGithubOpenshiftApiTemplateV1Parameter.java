/*
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package open_cluster_management.io;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Parameter defines a name/value variable that is to be processed during the Template to Config transformation.
 */
@ApiModel(description = "Parameter defines a name/value variable that is to be processed during the Template to Config transformation.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-05-18T17:27:50.678+03:00")
public class ComGithubOpenshiftApiTemplateV1Parameter {
  @SerializedName("description")
  private String description = null;

  @SerializedName("displayName")
  private String displayName = null;

  @SerializedName("from")
  private String from = null;

  @SerializedName("generate")
  private String generate = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("required")
  private Boolean required = null;

  @SerializedName("value")
  private String value = null;

  public ComGithubOpenshiftApiTemplateV1Parameter description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Description of a parameter. Optional.
   * @return description
  **/
  @ApiModelProperty(value = "Description of a parameter. Optional.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public ComGithubOpenshiftApiTemplateV1Parameter displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

   /**
   * Optional: The name that will show in UI instead of parameter &#39;Name&#39;
   * @return displayName
  **/
  @ApiModelProperty(value = "Optional: The name that will show in UI instead of parameter 'Name'")
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }

  public ComGithubOpenshiftApiTemplateV1Parameter from(String from) {
    this.from = from;
    return this;
  }

   /**
   * From is an input value for the generator. Optional.
   * @return from
  **/
  @ApiModelProperty(value = "From is an input value for the generator. Optional.")
  public String getFrom() {
    return from;
  }

  public void setFrom(String from) {
    this.from = from;
  }

  public ComGithubOpenshiftApiTemplateV1Parameter generate(String generate) {
    this.generate = generate;
    return this;
  }

   /**
   * generate specifies the generator to be used to generate random string from an input value specified by From field. The result string is stored into Value field. If empty, no generator is being used, leaving the result Value untouched. Optional.  The only supported generator is \&quot;expression\&quot;, which accepts a \&quot;from\&quot; value in the form of a simple regular expression containing the range expression \&quot;[a-zA-Z0-9]\&quot;, and the length expression \&quot;a{length}\&quot;.  Examples:  from             | value ----------------------------- \&quot;test[0-9]{1}x\&quot;  | \&quot;test7x\&quot; \&quot;[0-1]{8}\&quot;       | \&quot;01001100\&quot; \&quot;0x[A-F0-9]{4}\&quot;  | \&quot;0xB3AF\&quot; \&quot;[a-zA-Z0-9]{8}\&quot; | \&quot;hW4yQU5i\&quot;
   * @return generate
  **/
  @ApiModelProperty(value = "generate specifies the generator to be used to generate random string from an input value specified by From field. The result string is stored into Value field. If empty, no generator is being used, leaving the result Value untouched. Optional.  The only supported generator is \"expression\", which accepts a \"from\" value in the form of a simple regular expression containing the range expression \"[a-zA-Z0-9]\", and the length expression \"a{length}\".  Examples:  from             | value ----------------------------- \"test[0-9]{1}x\"  | \"test7x\" \"[0-1]{8}\"       | \"01001100\" \"0x[A-F0-9]{4}\"  | \"0xB3AF\" \"[a-zA-Z0-9]{8}\" | \"hW4yQU5i\"")
  public String getGenerate() {
    return generate;
  }

  public void setGenerate(String generate) {
    this.generate = generate;
  }

  public ComGithubOpenshiftApiTemplateV1Parameter name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name must be set and it can be referenced in Template Items using ${PARAMETER_NAME}. Required.
   * @return name
  **/
  @ApiModelProperty(required = true, value = "Name must be set and it can be referenced in Template Items using ${PARAMETER_NAME}. Required.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public ComGithubOpenshiftApiTemplateV1Parameter required(Boolean required) {
    this.required = required;
    return this;
  }

   /**
   * Optional: Indicates the parameter must have a value.  Defaults to false.
   * @return required
  **/
  @ApiModelProperty(value = "Optional: Indicates the parameter must have a value.  Defaults to false.")
  public Boolean isRequired() {
    return required;
  }

  public void setRequired(Boolean required) {
    this.required = required;
  }

  public ComGithubOpenshiftApiTemplateV1Parameter value(String value) {
    this.value = value;
    return this;
  }

   /**
   * Value holds the Parameter data. If specified, the generator will be ignored. The value replaces all occurrences of the Parameter ${Name} expression during the Template to Config transformation. Optional.
   * @return value
  **/
  @ApiModelProperty(value = "Value holds the Parameter data. If specified, the generator will be ignored. The value replaces all occurrences of the Parameter ${Name} expression during the Template to Config transformation. Optional.")
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComGithubOpenshiftApiTemplateV1Parameter comGithubOpenshiftApiTemplateV1Parameter = (ComGithubOpenshiftApiTemplateV1Parameter) o;
    return Objects.equals(this.description, comGithubOpenshiftApiTemplateV1Parameter.description) &&
        Objects.equals(this.displayName, comGithubOpenshiftApiTemplateV1Parameter.displayName) &&
        Objects.equals(this.from, comGithubOpenshiftApiTemplateV1Parameter.from) &&
        Objects.equals(this.generate, comGithubOpenshiftApiTemplateV1Parameter.generate) &&
        Objects.equals(this.name, comGithubOpenshiftApiTemplateV1Parameter.name) &&
        Objects.equals(this.required, comGithubOpenshiftApiTemplateV1Parameter.required) &&
        Objects.equals(this.value, comGithubOpenshiftApiTemplateV1Parameter.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, displayName, from, generate, name, required, value);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComGithubOpenshiftApiTemplateV1Parameter {\n");
    
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    generate: ").append(toIndentedString(generate)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

