/*
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package open_cluster_management.io;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import open_cluster_management.io.IoK8sApiCoreV1EnvVar;
import open_cluster_management.io.IoK8sApiCoreV1LocalObjectReference;
import open_cluster_management.io.IoK8sApiCoreV1ObjectReference;

/**
 * SourceBuildStrategy defines input parameters specific to an Source build.
 */
@ApiModel(description = "SourceBuildStrategy defines input parameters specific to an Source build.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-05-18T17:27:50.678+03:00")
public class ComGithubOpenshiftApiBuildV1SourceBuildStrategy {
  @SerializedName("env")
  private List<IoK8sApiCoreV1EnvVar> env = null;

  @SerializedName("forcePull")
  private Boolean forcePull = null;

  @SerializedName("from")
  private IoK8sApiCoreV1ObjectReference from = null;

  @SerializedName("incremental")
  private Boolean incremental = null;

  @SerializedName("pullSecret")
  private IoK8sApiCoreV1LocalObjectReference pullSecret = null;

  @SerializedName("scripts")
  private String scripts = null;

  public ComGithubOpenshiftApiBuildV1SourceBuildStrategy env(List<IoK8sApiCoreV1EnvVar> env) {
    this.env = env;
    return this;
  }

  public ComGithubOpenshiftApiBuildV1SourceBuildStrategy addEnvItem(IoK8sApiCoreV1EnvVar envItem) {
    if (this.env == null) {
      this.env = new ArrayList<>();
    }
    this.env.add(envItem);
    return this;
  }

   /**
   * env contains additional environment variables you want to pass into a builder container.
   * @return env
  **/
  @ApiModelProperty(value = "env contains additional environment variables you want to pass into a builder container.")
  public List<IoK8sApiCoreV1EnvVar> getEnv() {
    return env;
  }

  public void setEnv(List<IoK8sApiCoreV1EnvVar> env) {
    this.env = env;
  }

  public ComGithubOpenshiftApiBuildV1SourceBuildStrategy forcePull(Boolean forcePull) {
    this.forcePull = forcePull;
    return this;
  }

   /**
   * forcePull describes if the builder should pull the images from registry prior to building.
   * @return forcePull
  **/
  @ApiModelProperty(value = "forcePull describes if the builder should pull the images from registry prior to building.")
  public Boolean isForcePull() {
    return forcePull;
  }

  public void setForcePull(Boolean forcePull) {
    this.forcePull = forcePull;
  }

  public ComGithubOpenshiftApiBuildV1SourceBuildStrategy from(IoK8sApiCoreV1ObjectReference from) {
    this.from = from;
    return this;
  }

   /**
   * from is reference to an DockerImage, ImageStreamTag, or ImageStreamImage from which the container image should be pulled
   * @return from
  **/
  @ApiModelProperty(required = true, value = "from is reference to an DockerImage, ImageStreamTag, or ImageStreamImage from which the container image should be pulled")
  public IoK8sApiCoreV1ObjectReference getFrom() {
    return from;
  }

  public void setFrom(IoK8sApiCoreV1ObjectReference from) {
    this.from = from;
  }

  public ComGithubOpenshiftApiBuildV1SourceBuildStrategy incremental(Boolean incremental) {
    this.incremental = incremental;
    return this;
  }

   /**
   * incremental flag forces the Source build to do incremental builds if true.
   * @return incremental
  **/
  @ApiModelProperty(value = "incremental flag forces the Source build to do incremental builds if true.")
  public Boolean isIncremental() {
    return incremental;
  }

  public void setIncremental(Boolean incremental) {
    this.incremental = incremental;
  }

  public ComGithubOpenshiftApiBuildV1SourceBuildStrategy pullSecret(IoK8sApiCoreV1LocalObjectReference pullSecret) {
    this.pullSecret = pullSecret;
    return this;
  }

   /**
   * pullSecret is the name of a Secret that would be used for setting up the authentication for pulling the container images from the private Docker registries
   * @return pullSecret
  **/
  @ApiModelProperty(value = "pullSecret is the name of a Secret that would be used for setting up the authentication for pulling the container images from the private Docker registries")
  public IoK8sApiCoreV1LocalObjectReference getPullSecret() {
    return pullSecret;
  }

  public void setPullSecret(IoK8sApiCoreV1LocalObjectReference pullSecret) {
    this.pullSecret = pullSecret;
  }

  public ComGithubOpenshiftApiBuildV1SourceBuildStrategy scripts(String scripts) {
    this.scripts = scripts;
    return this;
  }

   /**
   * scripts is the location of Source scripts
   * @return scripts
  **/
  @ApiModelProperty(value = "scripts is the location of Source scripts")
  public String getScripts() {
    return scripts;
  }

  public void setScripts(String scripts) {
    this.scripts = scripts;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComGithubOpenshiftApiBuildV1SourceBuildStrategy comGithubOpenshiftApiBuildV1SourceBuildStrategy = (ComGithubOpenshiftApiBuildV1SourceBuildStrategy) o;
    return Objects.equals(this.env, comGithubOpenshiftApiBuildV1SourceBuildStrategy.env) &&
        Objects.equals(this.forcePull, comGithubOpenshiftApiBuildV1SourceBuildStrategy.forcePull) &&
        Objects.equals(this.from, comGithubOpenshiftApiBuildV1SourceBuildStrategy.from) &&
        Objects.equals(this.incremental, comGithubOpenshiftApiBuildV1SourceBuildStrategy.incremental) &&
        Objects.equals(this.pullSecret, comGithubOpenshiftApiBuildV1SourceBuildStrategy.pullSecret) &&
        Objects.equals(this.scripts, comGithubOpenshiftApiBuildV1SourceBuildStrategy.scripts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(env, forcePull, from, incremental, pullSecret, scripts);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComGithubOpenshiftApiBuildV1SourceBuildStrategy {\n");
    
    sb.append("    env: ").append(toIndentedString(env)).append("\n");
    sb.append("    forcePull: ").append(toIndentedString(forcePull)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    incremental: ").append(toIndentedString(incremental)).append("\n");
    sb.append("    pullSecret: ").append(toIndentedString(pullSecret)).append("\n");
    sb.append("    scripts: ").append(toIndentedString(scripts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

