/*
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package open_cluster_management.io;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import open_cluster_management.io.ComGithubOpenshiftApiBuildV1BuildOutput;
import open_cluster_management.io.ComGithubOpenshiftApiBuildV1BuildPostCommitSpec;
import open_cluster_management.io.ComGithubOpenshiftApiBuildV1BuildSource;
import open_cluster_management.io.ComGithubOpenshiftApiBuildV1BuildStrategy;
import open_cluster_management.io.ComGithubOpenshiftApiBuildV1BuildTriggerPolicy;
import open_cluster_management.io.ComGithubOpenshiftApiBuildV1SourceRevision;
import open_cluster_management.io.IoK8sApiCoreV1ResourceRequirements;

/**
 * BuildConfigSpec describes when and how builds are created
 */
@ApiModel(description = "BuildConfigSpec describes when and how builds are created")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-05-18T17:27:50.678+03:00")
public class ComGithubOpenshiftApiBuildV1BuildConfigSpec {
  @SerializedName("completionDeadlineSeconds")
  private Long completionDeadlineSeconds = null;

  @SerializedName("failedBuildsHistoryLimit")
  private Integer failedBuildsHistoryLimit = null;

  @SerializedName("nodeSelector")
  private Map<String, String> nodeSelector = null;

  @SerializedName("output")
  private ComGithubOpenshiftApiBuildV1BuildOutput output = null;

  @SerializedName("postCommit")
  private ComGithubOpenshiftApiBuildV1BuildPostCommitSpec postCommit = null;

  @SerializedName("resources")
  private IoK8sApiCoreV1ResourceRequirements resources = null;

  @SerializedName("revision")
  private ComGithubOpenshiftApiBuildV1SourceRevision revision = null;

  @SerializedName("runPolicy")
  private String runPolicy = null;

  @SerializedName("serviceAccount")
  private String serviceAccount = null;

  @SerializedName("source")
  private ComGithubOpenshiftApiBuildV1BuildSource source = null;

  @SerializedName("strategy")
  private ComGithubOpenshiftApiBuildV1BuildStrategy strategy = null;

  @SerializedName("successfulBuildsHistoryLimit")
  private Integer successfulBuildsHistoryLimit = null;

  @SerializedName("triggers")
  private List<ComGithubOpenshiftApiBuildV1BuildTriggerPolicy> triggers = new ArrayList<>();

  public ComGithubOpenshiftApiBuildV1BuildConfigSpec completionDeadlineSeconds(Long completionDeadlineSeconds) {
    this.completionDeadlineSeconds = completionDeadlineSeconds;
    return this;
  }

   /**
   * completionDeadlineSeconds is an optional duration in seconds, counted from the time when a build pod gets scheduled in the system, that the build may be active on a node before the system actively tries to terminate the build; value must be positive integer
   * @return completionDeadlineSeconds
  **/
  @ApiModelProperty(value = "completionDeadlineSeconds is an optional duration in seconds, counted from the time when a build pod gets scheduled in the system, that the build may be active on a node before the system actively tries to terminate the build; value must be positive integer")
  public Long getCompletionDeadlineSeconds() {
    return completionDeadlineSeconds;
  }

  public void setCompletionDeadlineSeconds(Long completionDeadlineSeconds) {
    this.completionDeadlineSeconds = completionDeadlineSeconds;
  }

  public ComGithubOpenshiftApiBuildV1BuildConfigSpec failedBuildsHistoryLimit(Integer failedBuildsHistoryLimit) {
    this.failedBuildsHistoryLimit = failedBuildsHistoryLimit;
    return this;
  }

   /**
   * failedBuildsHistoryLimit is the number of old failed builds to retain. When a BuildConfig is created, the 5 most recent failed builds are retained unless this value is set. If removed after the BuildConfig has been created, all failed builds are retained.
   * @return failedBuildsHistoryLimit
  **/
  @ApiModelProperty(value = "failedBuildsHistoryLimit is the number of old failed builds to retain. When a BuildConfig is created, the 5 most recent failed builds are retained unless this value is set. If removed after the BuildConfig has been created, all failed builds are retained.")
  public Integer getFailedBuildsHistoryLimit() {
    return failedBuildsHistoryLimit;
  }

  public void setFailedBuildsHistoryLimit(Integer failedBuildsHistoryLimit) {
    this.failedBuildsHistoryLimit = failedBuildsHistoryLimit;
  }

  public ComGithubOpenshiftApiBuildV1BuildConfigSpec nodeSelector(Map<String, String> nodeSelector) {
    this.nodeSelector = nodeSelector;
    return this;
  }

  public ComGithubOpenshiftApiBuildV1BuildConfigSpec putNodeSelectorItem(String key, String nodeSelectorItem) {
    if (this.nodeSelector == null) {
      this.nodeSelector = new HashMap<>();
    }
    this.nodeSelector.put(key, nodeSelectorItem);
    return this;
  }

   /**
   * nodeSelector is a selector which must be true for the build pod to fit on a node If nil, it can be overridden by default build nodeselector values for the cluster. If set to an empty map or a map with any values, default build nodeselector values are ignored.
   * @return nodeSelector
  **/
  @ApiModelProperty(value = "nodeSelector is a selector which must be true for the build pod to fit on a node If nil, it can be overridden by default build nodeselector values for the cluster. If set to an empty map or a map with any values, default build nodeselector values are ignored.")
  public Map<String, String> getNodeSelector() {
    return nodeSelector;
  }

  public void setNodeSelector(Map<String, String> nodeSelector) {
    this.nodeSelector = nodeSelector;
  }

  public ComGithubOpenshiftApiBuildV1BuildConfigSpec output(ComGithubOpenshiftApiBuildV1BuildOutput output) {
    this.output = output;
    return this;
  }

   /**
   * output describes the container image the Strategy should produce.
   * @return output
  **/
  @ApiModelProperty(value = "output describes the container image the Strategy should produce.")
  public ComGithubOpenshiftApiBuildV1BuildOutput getOutput() {
    return output;
  }

  public void setOutput(ComGithubOpenshiftApiBuildV1BuildOutput output) {
    this.output = output;
  }

  public ComGithubOpenshiftApiBuildV1BuildConfigSpec postCommit(ComGithubOpenshiftApiBuildV1BuildPostCommitSpec postCommit) {
    this.postCommit = postCommit;
    return this;
  }

   /**
   * postCommit is a build hook executed after the build output image is committed, before it is pushed to a registry.
   * @return postCommit
  **/
  @ApiModelProperty(value = "postCommit is a build hook executed after the build output image is committed, before it is pushed to a registry.")
  public ComGithubOpenshiftApiBuildV1BuildPostCommitSpec getPostCommit() {
    return postCommit;
  }

  public void setPostCommit(ComGithubOpenshiftApiBuildV1BuildPostCommitSpec postCommit) {
    this.postCommit = postCommit;
  }

  public ComGithubOpenshiftApiBuildV1BuildConfigSpec resources(IoK8sApiCoreV1ResourceRequirements resources) {
    this.resources = resources;
    return this;
  }

   /**
   * resources computes resource requirements to execute the build.
   * @return resources
  **/
  @ApiModelProperty(value = "resources computes resource requirements to execute the build.")
  public IoK8sApiCoreV1ResourceRequirements getResources() {
    return resources;
  }

  public void setResources(IoK8sApiCoreV1ResourceRequirements resources) {
    this.resources = resources;
  }

  public ComGithubOpenshiftApiBuildV1BuildConfigSpec revision(ComGithubOpenshiftApiBuildV1SourceRevision revision) {
    this.revision = revision;
    return this;
  }

   /**
   * revision is the information from the source for a specific repo snapshot. This is optional.
   * @return revision
  **/
  @ApiModelProperty(value = "revision is the information from the source for a specific repo snapshot. This is optional.")
  public ComGithubOpenshiftApiBuildV1SourceRevision getRevision() {
    return revision;
  }

  public void setRevision(ComGithubOpenshiftApiBuildV1SourceRevision revision) {
    this.revision = revision;
  }

  public ComGithubOpenshiftApiBuildV1BuildConfigSpec runPolicy(String runPolicy) {
    this.runPolicy = runPolicy;
    return this;
  }

   /**
   * RunPolicy describes how the new build created from this build configuration will be scheduled for execution. This is optional, if not specified we default to \&quot;Serial\&quot;.
   * @return runPolicy
  **/
  @ApiModelProperty(value = "RunPolicy describes how the new build created from this build configuration will be scheduled for execution. This is optional, if not specified we default to \"Serial\".")
  public String getRunPolicy() {
    return runPolicy;
  }

  public void setRunPolicy(String runPolicy) {
    this.runPolicy = runPolicy;
  }

  public ComGithubOpenshiftApiBuildV1BuildConfigSpec serviceAccount(String serviceAccount) {
    this.serviceAccount = serviceAccount;
    return this;
  }

   /**
   * serviceAccount is the name of the ServiceAccount to use to run the pod created by this build. The pod will be allowed to use secrets referenced by the ServiceAccount
   * @return serviceAccount
  **/
  @ApiModelProperty(value = "serviceAccount is the name of the ServiceAccount to use to run the pod created by this build. The pod will be allowed to use secrets referenced by the ServiceAccount")
  public String getServiceAccount() {
    return serviceAccount;
  }

  public void setServiceAccount(String serviceAccount) {
    this.serviceAccount = serviceAccount;
  }

  public ComGithubOpenshiftApiBuildV1BuildConfigSpec source(ComGithubOpenshiftApiBuildV1BuildSource source) {
    this.source = source;
    return this;
  }

   /**
   * source describes the SCM in use.
   * @return source
  **/
  @ApiModelProperty(value = "source describes the SCM in use.")
  public ComGithubOpenshiftApiBuildV1BuildSource getSource() {
    return source;
  }

  public void setSource(ComGithubOpenshiftApiBuildV1BuildSource source) {
    this.source = source;
  }

  public ComGithubOpenshiftApiBuildV1BuildConfigSpec strategy(ComGithubOpenshiftApiBuildV1BuildStrategy strategy) {
    this.strategy = strategy;
    return this;
  }

   /**
   * strategy defines how to perform a build.
   * @return strategy
  **/
  @ApiModelProperty(required = true, value = "strategy defines how to perform a build.")
  public ComGithubOpenshiftApiBuildV1BuildStrategy getStrategy() {
    return strategy;
  }

  public void setStrategy(ComGithubOpenshiftApiBuildV1BuildStrategy strategy) {
    this.strategy = strategy;
  }

  public ComGithubOpenshiftApiBuildV1BuildConfigSpec successfulBuildsHistoryLimit(Integer successfulBuildsHistoryLimit) {
    this.successfulBuildsHistoryLimit = successfulBuildsHistoryLimit;
    return this;
  }

   /**
   * successfulBuildsHistoryLimit is the number of old successful builds to retain. When a BuildConfig is created, the 5 most recent successful builds are retained unless this value is set. If removed after the BuildConfig has been created, all successful builds are retained.
   * @return successfulBuildsHistoryLimit
  **/
  @ApiModelProperty(value = "successfulBuildsHistoryLimit is the number of old successful builds to retain. When a BuildConfig is created, the 5 most recent successful builds are retained unless this value is set. If removed after the BuildConfig has been created, all successful builds are retained.")
  public Integer getSuccessfulBuildsHistoryLimit() {
    return successfulBuildsHistoryLimit;
  }

  public void setSuccessfulBuildsHistoryLimit(Integer successfulBuildsHistoryLimit) {
    this.successfulBuildsHistoryLimit = successfulBuildsHistoryLimit;
  }

  public ComGithubOpenshiftApiBuildV1BuildConfigSpec triggers(List<ComGithubOpenshiftApiBuildV1BuildTriggerPolicy> triggers) {
    this.triggers = triggers;
    return this;
  }

  public ComGithubOpenshiftApiBuildV1BuildConfigSpec addTriggersItem(ComGithubOpenshiftApiBuildV1BuildTriggerPolicy triggersItem) {
    this.triggers.add(triggersItem);
    return this;
  }

   /**
   * triggers determine how new Builds can be launched from a BuildConfig. If no triggers are defined, a new build can only occur as a result of an explicit client build creation.
   * @return triggers
  **/
  @ApiModelProperty(required = true, value = "triggers determine how new Builds can be launched from a BuildConfig. If no triggers are defined, a new build can only occur as a result of an explicit client build creation.")
  public List<ComGithubOpenshiftApiBuildV1BuildTriggerPolicy> getTriggers() {
    return triggers;
  }

  public void setTriggers(List<ComGithubOpenshiftApiBuildV1BuildTriggerPolicy> triggers) {
    this.triggers = triggers;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComGithubOpenshiftApiBuildV1BuildConfigSpec comGithubOpenshiftApiBuildV1BuildConfigSpec = (ComGithubOpenshiftApiBuildV1BuildConfigSpec) o;
    return Objects.equals(this.completionDeadlineSeconds, comGithubOpenshiftApiBuildV1BuildConfigSpec.completionDeadlineSeconds) &&
        Objects.equals(this.failedBuildsHistoryLimit, comGithubOpenshiftApiBuildV1BuildConfigSpec.failedBuildsHistoryLimit) &&
        Objects.equals(this.nodeSelector, comGithubOpenshiftApiBuildV1BuildConfigSpec.nodeSelector) &&
        Objects.equals(this.output, comGithubOpenshiftApiBuildV1BuildConfigSpec.output) &&
        Objects.equals(this.postCommit, comGithubOpenshiftApiBuildV1BuildConfigSpec.postCommit) &&
        Objects.equals(this.resources, comGithubOpenshiftApiBuildV1BuildConfigSpec.resources) &&
        Objects.equals(this.revision, comGithubOpenshiftApiBuildV1BuildConfigSpec.revision) &&
        Objects.equals(this.runPolicy, comGithubOpenshiftApiBuildV1BuildConfigSpec.runPolicy) &&
        Objects.equals(this.serviceAccount, comGithubOpenshiftApiBuildV1BuildConfigSpec.serviceAccount) &&
        Objects.equals(this.source, comGithubOpenshiftApiBuildV1BuildConfigSpec.source) &&
        Objects.equals(this.strategy, comGithubOpenshiftApiBuildV1BuildConfigSpec.strategy) &&
        Objects.equals(this.successfulBuildsHistoryLimit, comGithubOpenshiftApiBuildV1BuildConfigSpec.successfulBuildsHistoryLimit) &&
        Objects.equals(this.triggers, comGithubOpenshiftApiBuildV1BuildConfigSpec.triggers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(completionDeadlineSeconds, failedBuildsHistoryLimit, nodeSelector, output, postCommit, resources, revision, runPolicy, serviceAccount, source, strategy, successfulBuildsHistoryLimit, triggers);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComGithubOpenshiftApiBuildV1BuildConfigSpec {\n");
    
    sb.append("    completionDeadlineSeconds: ").append(toIndentedString(completionDeadlineSeconds)).append("\n");
    sb.append("    failedBuildsHistoryLimit: ").append(toIndentedString(failedBuildsHistoryLimit)).append("\n");
    sb.append("    nodeSelector: ").append(toIndentedString(nodeSelector)).append("\n");
    sb.append("    output: ").append(toIndentedString(output)).append("\n");
    sb.append("    postCommit: ").append(toIndentedString(postCommit)).append("\n");
    sb.append("    resources: ").append(toIndentedString(resources)).append("\n");
    sb.append("    revision: ").append(toIndentedString(revision)).append("\n");
    sb.append("    runPolicy: ").append(toIndentedString(runPolicy)).append("\n");
    sb.append("    serviceAccount: ").append(toIndentedString(serviceAccount)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    strategy: ").append(toIndentedString(strategy)).append("\n");
    sb.append("    successfulBuildsHistoryLimit: ").append(toIndentedString(successfulBuildsHistoryLimit)).append("\n");
    sb.append("    triggers: ").append(toIndentedString(triggers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

