/*
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package open_cluster_management.io;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * applicationMenu holds information about section and icon used for the link in the application menu, and it is applicable only when location is set to ApplicationMenu.
 */
@ApiModel(description = "applicationMenu holds information about section and icon used for the link in the application menu, and it is applicable only when location is set to ApplicationMenu.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-05-18T17:27:50.678+03:00")
public class IoOpenshiftConsoleV1ConsoleLinkSpecApplicationMenu {
  @SerializedName("imageURL")
  private String imageURL = null;

  @SerializedName("section")
  private String section = null;

  public IoOpenshiftConsoleV1ConsoleLinkSpecApplicationMenu imageURL(String imageURL) {
    this.imageURL = imageURL;
    return this;
  }

   /**
   * imageUrl is the URL for the icon used in front of the link in the application menu. The URL must be an HTTPS URL or a Data URI. The image should be square and will be shown at 24x24 pixels.
   * @return imageURL
  **/
  @ApiModelProperty(value = "imageUrl is the URL for the icon used in front of the link in the application menu. The URL must be an HTTPS URL or a Data URI. The image should be square and will be shown at 24x24 pixels.")
  public String getImageURL() {
    return imageURL;
  }

  public void setImageURL(String imageURL) {
    this.imageURL = imageURL;
  }

  public IoOpenshiftConsoleV1ConsoleLinkSpecApplicationMenu section(String section) {
    this.section = section;
    return this;
  }

   /**
   * section is the section of the application menu in which the link should appear. This can be any text that will appear as a subheading in the application menu dropdown. A new section will be created if the text does not match text of an existing section.
   * @return section
  **/
  @ApiModelProperty(required = true, value = "section is the section of the application menu in which the link should appear. This can be any text that will appear as a subheading in the application menu dropdown. A new section will be created if the text does not match text of an existing section.")
  public String getSection() {
    return section;
  }

  public void setSection(String section) {
    this.section = section;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IoOpenshiftConsoleV1ConsoleLinkSpecApplicationMenu ioOpenshiftConsoleV1ConsoleLinkSpecApplicationMenu = (IoOpenshiftConsoleV1ConsoleLinkSpecApplicationMenu) o;
    return Objects.equals(this.imageURL, ioOpenshiftConsoleV1ConsoleLinkSpecApplicationMenu.imageURL) &&
        Objects.equals(this.section, ioOpenshiftConsoleV1ConsoleLinkSpecApplicationMenu.section);
  }

  @Override
  public int hashCode() {
    return Objects.hash(imageURL, section);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IoOpenshiftConsoleV1ConsoleLinkSpecApplicationMenu {\n");
    
    sb.append("    imageURL: ").append(toIndentedString(imageURL)).append("\n");
    sb.append("    section: ").append(toIndentedString(section)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

