/*
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package open_cluster_management.io;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import open_cluster_management.io.ComGithubOpenshiftApiRouteV1RoutePort;
import open_cluster_management.io.ComGithubOpenshiftApiRouteV1RouteTargetReference;
import open_cluster_management.io.ComGithubOpenshiftApiRouteV1TLSConfig;

/**
 * RouteSpec describes the hostname or path the route exposes, any security information, and one to four backends (services) the route points to. Requests are distributed among the backends depending on the weights assigned to each backend. When using roundrobin scheduling the portion of requests that go to each backend is the backend weight divided by the sum of all of the backend weights. When the backend has more than one endpoint the requests that end up on the backend are roundrobin distributed among the endpoints. Weights are between 0 and 256 with default 100. Weight 0 causes no requests to the backend. If all weights are zero the route will be considered to have no backends and return a standard 503 response.  The &#x60;tls&#x60; field is optional and allows specific certificates or behavior for the route. Routers typically configure a default certificate on a wildcard domain to terminate routes without explicit certificates, but custom hostnames usually must choose passthrough (send traffic directly to the backend via the TLS Server-Name- Indication field) or provide a certificate.
 */
@ApiModel(description = "RouteSpec describes the hostname or path the route exposes, any security information, and one to four backends (services) the route points to. Requests are distributed among the backends depending on the weights assigned to each backend. When using roundrobin scheduling the portion of requests that go to each backend is the backend weight divided by the sum of all of the backend weights. When the backend has more than one endpoint the requests that end up on the backend are roundrobin distributed among the endpoints. Weights are between 0 and 256 with default 100. Weight 0 causes no requests to the backend. If all weights are zero the route will be considered to have no backends and return a standard 503 response.  The `tls` field is optional and allows specific certificates or behavior for the route. Routers typically configure a default certificate on a wildcard domain to terminate routes without explicit certificates, but custom hostnames usually must choose passthrough (send traffic directly to the backend via the TLS Server-Name- Indication field) or provide a certificate.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-05-18T17:27:50.678+03:00")
public class ComGithubOpenshiftApiRouteV1RouteSpec {
  @SerializedName("alternateBackends")
  private List<ComGithubOpenshiftApiRouteV1RouteTargetReference> alternateBackends = null;

  @SerializedName("host")
  private String host = null;

  @SerializedName("path")
  private String path = null;

  @SerializedName("port")
  private ComGithubOpenshiftApiRouteV1RoutePort port = null;

  @SerializedName("subdomain")
  private String subdomain = null;

  @SerializedName("tls")
  private ComGithubOpenshiftApiRouteV1TLSConfig tls = null;

  @SerializedName("to")
  private ComGithubOpenshiftApiRouteV1RouteTargetReference to = null;

  @SerializedName("wildcardPolicy")
  private String wildcardPolicy = null;

  public ComGithubOpenshiftApiRouteV1RouteSpec alternateBackends(List<ComGithubOpenshiftApiRouteV1RouteTargetReference> alternateBackends) {
    this.alternateBackends = alternateBackends;
    return this;
  }

  public ComGithubOpenshiftApiRouteV1RouteSpec addAlternateBackendsItem(ComGithubOpenshiftApiRouteV1RouteTargetReference alternateBackendsItem) {
    if (this.alternateBackends == null) {
      this.alternateBackends = new ArrayList<>();
    }
    this.alternateBackends.add(alternateBackendsItem);
    return this;
  }

   /**
   * alternateBackends allows up to 3 additional backends to be assigned to the route. Only the Service kind is allowed, and it will be defaulted to Service. Use the weight field in RouteTargetReference object to specify relative preference.
   * @return alternateBackends
  **/
  @ApiModelProperty(value = "alternateBackends allows up to 3 additional backends to be assigned to the route. Only the Service kind is allowed, and it will be defaulted to Service. Use the weight field in RouteTargetReference object to specify relative preference.")
  public List<ComGithubOpenshiftApiRouteV1RouteTargetReference> getAlternateBackends() {
    return alternateBackends;
  }

  public void setAlternateBackends(List<ComGithubOpenshiftApiRouteV1RouteTargetReference> alternateBackends) {
    this.alternateBackends = alternateBackends;
  }

  public ComGithubOpenshiftApiRouteV1RouteSpec host(String host) {
    this.host = host;
    return this;
  }

   /**
   * host is an alias/DNS that points to the service. Optional. If not specified a route name will typically be automatically chosen. Must follow DNS952 subdomain conventions.
   * @return host
  **/
  @ApiModelProperty(value = "host is an alias/DNS that points to the service. Optional. If not specified a route name will typically be automatically chosen. Must follow DNS952 subdomain conventions.")
  public String getHost() {
    return host;
  }

  public void setHost(String host) {
    this.host = host;
  }

  public ComGithubOpenshiftApiRouteV1RouteSpec path(String path) {
    this.path = path;
    return this;
  }

   /**
   * path that the router watches for, to route traffic for to the service. Optional
   * @return path
  **/
  @ApiModelProperty(value = "path that the router watches for, to route traffic for to the service. Optional")
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }

  public ComGithubOpenshiftApiRouteV1RouteSpec port(ComGithubOpenshiftApiRouteV1RoutePort port) {
    this.port = port;
    return this;
  }

   /**
   * If specified, the port to be used by the router. Most routers will use all endpoints exposed by the service by default - set this value to instruct routers which port to use.
   * @return port
  **/
  @ApiModelProperty(value = "If specified, the port to be used by the router. Most routers will use all endpoints exposed by the service by default - set this value to instruct routers which port to use.")
  public ComGithubOpenshiftApiRouteV1RoutePort getPort() {
    return port;
  }

  public void setPort(ComGithubOpenshiftApiRouteV1RoutePort port) {
    this.port = port;
  }

  public ComGithubOpenshiftApiRouteV1RouteSpec subdomain(String subdomain) {
    this.subdomain = subdomain;
    return this;
  }

   /**
   * subdomain is a DNS subdomain that is requested within the ingress controller&#39;s domain (as a subdomain). If host is set this field is ignored. An ingress controller may choose to ignore this suggested name, in which case the controller will report the assigned name in the status.ingress array or refuse to admit the route. If this value is set and the server does not support this field host will be populated automatically. Otherwise host is left empty. The field may have multiple parts separated by a dot, but not all ingress controllers may honor the request. This field may not be changed after creation except by a user with the update routes/custom-host permission.  Example: subdomain &#x60;frontend&#x60; automatically receives the router subdomain &#x60;apps.mycluster.com&#x60; to have a full hostname &#x60;frontend.apps.mycluster.com&#x60;.
   * @return subdomain
  **/
  @ApiModelProperty(value = "subdomain is a DNS subdomain that is requested within the ingress controller's domain (as a subdomain). If host is set this field is ignored. An ingress controller may choose to ignore this suggested name, in which case the controller will report the assigned name in the status.ingress array or refuse to admit the route. If this value is set and the server does not support this field host will be populated automatically. Otherwise host is left empty. The field may have multiple parts separated by a dot, but not all ingress controllers may honor the request. This field may not be changed after creation except by a user with the update routes/custom-host permission.  Example: subdomain `frontend` automatically receives the router subdomain `apps.mycluster.com` to have a full hostname `frontend.apps.mycluster.com`.")
  public String getSubdomain() {
    return subdomain;
  }

  public void setSubdomain(String subdomain) {
    this.subdomain = subdomain;
  }

  public ComGithubOpenshiftApiRouteV1RouteSpec tls(ComGithubOpenshiftApiRouteV1TLSConfig tls) {
    this.tls = tls;
    return this;
  }

   /**
   * The tls field provides the ability to configure certificates and termination for the route.
   * @return tls
  **/
  @ApiModelProperty(value = "The tls field provides the ability to configure certificates and termination for the route.")
  public ComGithubOpenshiftApiRouteV1TLSConfig getTls() {
    return tls;
  }

  public void setTls(ComGithubOpenshiftApiRouteV1TLSConfig tls) {
    this.tls = tls;
  }

  public ComGithubOpenshiftApiRouteV1RouteSpec to(ComGithubOpenshiftApiRouteV1RouteTargetReference to) {
    this.to = to;
    return this;
  }

   /**
   * to is an object the route should use as the primary backend. Only the Service kind is allowed, and it will be defaulted to Service. If the weight field (0-256 default 100) is set to zero, no traffic will be sent to this backend.
   * @return to
  **/
  @ApiModelProperty(required = true, value = "to is an object the route should use as the primary backend. Only the Service kind is allowed, and it will be defaulted to Service. If the weight field (0-256 default 100) is set to zero, no traffic will be sent to this backend.")
  public ComGithubOpenshiftApiRouteV1RouteTargetReference getTo() {
    return to;
  }

  public void setTo(ComGithubOpenshiftApiRouteV1RouteTargetReference to) {
    this.to = to;
  }

  public ComGithubOpenshiftApiRouteV1RouteSpec wildcardPolicy(String wildcardPolicy) {
    this.wildcardPolicy = wildcardPolicy;
    return this;
  }

   /**
   * Wildcard policy if any for the route. Currently only &#39;Subdomain&#39; or &#39;None&#39; is allowed.
   * @return wildcardPolicy
  **/
  @ApiModelProperty(value = "Wildcard policy if any for the route. Currently only 'Subdomain' or 'None' is allowed.")
  public String getWildcardPolicy() {
    return wildcardPolicy;
  }

  public void setWildcardPolicy(String wildcardPolicy) {
    this.wildcardPolicy = wildcardPolicy;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComGithubOpenshiftApiRouteV1RouteSpec comGithubOpenshiftApiRouteV1RouteSpec = (ComGithubOpenshiftApiRouteV1RouteSpec) o;
    return Objects.equals(this.alternateBackends, comGithubOpenshiftApiRouteV1RouteSpec.alternateBackends) &&
        Objects.equals(this.host, comGithubOpenshiftApiRouteV1RouteSpec.host) &&
        Objects.equals(this.path, comGithubOpenshiftApiRouteV1RouteSpec.path) &&
        Objects.equals(this.port, comGithubOpenshiftApiRouteV1RouteSpec.port) &&
        Objects.equals(this.subdomain, comGithubOpenshiftApiRouteV1RouteSpec.subdomain) &&
        Objects.equals(this.tls, comGithubOpenshiftApiRouteV1RouteSpec.tls) &&
        Objects.equals(this.to, comGithubOpenshiftApiRouteV1RouteSpec.to) &&
        Objects.equals(this.wildcardPolicy, comGithubOpenshiftApiRouteV1RouteSpec.wildcardPolicy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alternateBackends, host, path, port, subdomain, tls, to, wildcardPolicy);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComGithubOpenshiftApiRouteV1RouteSpec {\n");
    
    sb.append("    alternateBackends: ").append(toIndentedString(alternateBackends)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    subdomain: ").append(toIndentedString(subdomain)).append("\n");
    sb.append("    tls: ").append(toIndentedString(tls)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    wildcardPolicy: ").append(toIndentedString(wildcardPolicy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

