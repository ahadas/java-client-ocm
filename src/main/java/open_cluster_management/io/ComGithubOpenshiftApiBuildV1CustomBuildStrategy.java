/*
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package open_cluster_management.io;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import open_cluster_management.io.ComGithubOpenshiftApiBuildV1SecretSpec;
import open_cluster_management.io.IoK8sApiCoreV1EnvVar;
import open_cluster_management.io.IoK8sApiCoreV1LocalObjectReference;
import open_cluster_management.io.IoK8sApiCoreV1ObjectReference;

/**
 * CustomBuildStrategy defines input parameters specific to Custom build.
 */
@ApiModel(description = "CustomBuildStrategy defines input parameters specific to Custom build.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-05-18T17:27:50.678+03:00")
public class ComGithubOpenshiftApiBuildV1CustomBuildStrategy {
  @SerializedName("buildAPIVersion")
  private String buildAPIVersion = null;

  @SerializedName("env")
  private List<IoK8sApiCoreV1EnvVar> env = null;

  @SerializedName("exposeDockerSocket")
  private Boolean exposeDockerSocket = null;

  @SerializedName("forcePull")
  private Boolean forcePull = null;

  @SerializedName("from")
  private IoK8sApiCoreV1ObjectReference from = null;

  @SerializedName("pullSecret")
  private IoK8sApiCoreV1LocalObjectReference pullSecret = null;

  @SerializedName("secrets")
  private List<ComGithubOpenshiftApiBuildV1SecretSpec> secrets = null;

  public ComGithubOpenshiftApiBuildV1CustomBuildStrategy buildAPIVersion(String buildAPIVersion) {
    this.buildAPIVersion = buildAPIVersion;
    return this;
  }

   /**
   * buildAPIVersion is the requested API version for the Build object serialized and passed to the custom builder
   * @return buildAPIVersion
  **/
  @ApiModelProperty(value = "buildAPIVersion is the requested API version for the Build object serialized and passed to the custom builder")
  public String getBuildAPIVersion() {
    return buildAPIVersion;
  }

  public void setBuildAPIVersion(String buildAPIVersion) {
    this.buildAPIVersion = buildAPIVersion;
  }

  public ComGithubOpenshiftApiBuildV1CustomBuildStrategy env(List<IoK8sApiCoreV1EnvVar> env) {
    this.env = env;
    return this;
  }

  public ComGithubOpenshiftApiBuildV1CustomBuildStrategy addEnvItem(IoK8sApiCoreV1EnvVar envItem) {
    if (this.env == null) {
      this.env = new ArrayList<>();
    }
    this.env.add(envItem);
    return this;
  }

   /**
   * env contains additional environment variables you want to pass into a builder container.
   * @return env
  **/
  @ApiModelProperty(value = "env contains additional environment variables you want to pass into a builder container.")
  public List<IoK8sApiCoreV1EnvVar> getEnv() {
    return env;
  }

  public void setEnv(List<IoK8sApiCoreV1EnvVar> env) {
    this.env = env;
  }

  public ComGithubOpenshiftApiBuildV1CustomBuildStrategy exposeDockerSocket(Boolean exposeDockerSocket) {
    this.exposeDockerSocket = exposeDockerSocket;
    return this;
  }

   /**
   * exposeDockerSocket will allow running Docker commands (and build container images) from inside the container.
   * @return exposeDockerSocket
  **/
  @ApiModelProperty(value = "exposeDockerSocket will allow running Docker commands (and build container images) from inside the container.")
  public Boolean isExposeDockerSocket() {
    return exposeDockerSocket;
  }

  public void setExposeDockerSocket(Boolean exposeDockerSocket) {
    this.exposeDockerSocket = exposeDockerSocket;
  }

  public ComGithubOpenshiftApiBuildV1CustomBuildStrategy forcePull(Boolean forcePull) {
    this.forcePull = forcePull;
    return this;
  }

   /**
   * forcePull describes if the controller should configure the build pod to always pull the images for the builder or only pull if it is not present locally
   * @return forcePull
  **/
  @ApiModelProperty(value = "forcePull describes if the controller should configure the build pod to always pull the images for the builder or only pull if it is not present locally")
  public Boolean isForcePull() {
    return forcePull;
  }

  public void setForcePull(Boolean forcePull) {
    this.forcePull = forcePull;
  }

  public ComGithubOpenshiftApiBuildV1CustomBuildStrategy from(IoK8sApiCoreV1ObjectReference from) {
    this.from = from;
    return this;
  }

   /**
   * from is reference to an DockerImage, ImageStreamTag, or ImageStreamImage from which the container image should be pulled
   * @return from
  **/
  @ApiModelProperty(required = true, value = "from is reference to an DockerImage, ImageStreamTag, or ImageStreamImage from which the container image should be pulled")
  public IoK8sApiCoreV1ObjectReference getFrom() {
    return from;
  }

  public void setFrom(IoK8sApiCoreV1ObjectReference from) {
    this.from = from;
  }

  public ComGithubOpenshiftApiBuildV1CustomBuildStrategy pullSecret(IoK8sApiCoreV1LocalObjectReference pullSecret) {
    this.pullSecret = pullSecret;
    return this;
  }

   /**
   * pullSecret is the name of a Secret that would be used for setting up the authentication for pulling the container images from the private Docker registries
   * @return pullSecret
  **/
  @ApiModelProperty(value = "pullSecret is the name of a Secret that would be used for setting up the authentication for pulling the container images from the private Docker registries")
  public IoK8sApiCoreV1LocalObjectReference getPullSecret() {
    return pullSecret;
  }

  public void setPullSecret(IoK8sApiCoreV1LocalObjectReference pullSecret) {
    this.pullSecret = pullSecret;
  }

  public ComGithubOpenshiftApiBuildV1CustomBuildStrategy secrets(List<ComGithubOpenshiftApiBuildV1SecretSpec> secrets) {
    this.secrets = secrets;
    return this;
  }

  public ComGithubOpenshiftApiBuildV1CustomBuildStrategy addSecretsItem(ComGithubOpenshiftApiBuildV1SecretSpec secretsItem) {
    if (this.secrets == null) {
      this.secrets = new ArrayList<>();
    }
    this.secrets.add(secretsItem);
    return this;
  }

   /**
   * secrets is a list of additional secrets that will be included in the build pod
   * @return secrets
  **/
  @ApiModelProperty(value = "secrets is a list of additional secrets that will be included in the build pod")
  public List<ComGithubOpenshiftApiBuildV1SecretSpec> getSecrets() {
    return secrets;
  }

  public void setSecrets(List<ComGithubOpenshiftApiBuildV1SecretSpec> secrets) {
    this.secrets = secrets;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComGithubOpenshiftApiBuildV1CustomBuildStrategy comGithubOpenshiftApiBuildV1CustomBuildStrategy = (ComGithubOpenshiftApiBuildV1CustomBuildStrategy) o;
    return Objects.equals(this.buildAPIVersion, comGithubOpenshiftApiBuildV1CustomBuildStrategy.buildAPIVersion) &&
        Objects.equals(this.env, comGithubOpenshiftApiBuildV1CustomBuildStrategy.env) &&
        Objects.equals(this.exposeDockerSocket, comGithubOpenshiftApiBuildV1CustomBuildStrategy.exposeDockerSocket) &&
        Objects.equals(this.forcePull, comGithubOpenshiftApiBuildV1CustomBuildStrategy.forcePull) &&
        Objects.equals(this.from, comGithubOpenshiftApiBuildV1CustomBuildStrategy.from) &&
        Objects.equals(this.pullSecret, comGithubOpenshiftApiBuildV1CustomBuildStrategy.pullSecret) &&
        Objects.equals(this.secrets, comGithubOpenshiftApiBuildV1CustomBuildStrategy.secrets);
  }

  @Override
  public int hashCode() {
    return Objects.hash(buildAPIVersion, env, exposeDockerSocket, forcePull, from, pullSecret, secrets);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComGithubOpenshiftApiBuildV1CustomBuildStrategy {\n");
    
    sb.append("    buildAPIVersion: ").append(toIndentedString(buildAPIVersion)).append("\n");
    sb.append("    env: ").append(toIndentedString(env)).append("\n");
    sb.append("    exposeDockerSocket: ").append(toIndentedString(exposeDockerSocket)).append("\n");
    sb.append("    forcePull: ").append(toIndentedString(forcePull)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    pullSecret: ").append(toIndentedString(pullSecret)).append("\n");
    sb.append("    secrets: ").append(toIndentedString(secrets)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

