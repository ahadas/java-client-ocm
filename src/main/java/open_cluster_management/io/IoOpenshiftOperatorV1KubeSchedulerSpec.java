/*
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package open_cluster_management.io;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * spec is the specification of the desired behavior of the Kubernetes Scheduler
 */
@ApiModel(description = "spec is the specification of the desired behavior of the Kubernetes Scheduler")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-05-18T17:27:50.678+03:00")
public class IoOpenshiftOperatorV1KubeSchedulerSpec {
  @SerializedName("failedRevisionLimit")
  private Integer failedRevisionLimit = null;

  @SerializedName("forceRedeploymentReason")
  private String forceRedeploymentReason = null;

  @SerializedName("logLevel")
  private String logLevel = null;

  @SerializedName("managementState")
  private String managementState = null;

  @SerializedName("observedConfig")
  private Object observedConfig = null;

  @SerializedName("operatorLogLevel")
  private String operatorLogLevel = null;

  @SerializedName("succeededRevisionLimit")
  private Integer succeededRevisionLimit = null;

  @SerializedName("unsupportedConfigOverrides")
  private Object unsupportedConfigOverrides = null;

  public IoOpenshiftOperatorV1KubeSchedulerSpec failedRevisionLimit(Integer failedRevisionLimit) {
    this.failedRevisionLimit = failedRevisionLimit;
    return this;
  }

   /**
   * failedRevisionLimit is the number of failed static pod installer revisions to keep on disk and in the api -1 &#x3D; unlimited, 0 or unset &#x3D; 5 (default)
   * @return failedRevisionLimit
  **/
  @ApiModelProperty(value = "failedRevisionLimit is the number of failed static pod installer revisions to keep on disk and in the api -1 = unlimited, 0 or unset = 5 (default)")
  public Integer getFailedRevisionLimit() {
    return failedRevisionLimit;
  }

  public void setFailedRevisionLimit(Integer failedRevisionLimit) {
    this.failedRevisionLimit = failedRevisionLimit;
  }

  public IoOpenshiftOperatorV1KubeSchedulerSpec forceRedeploymentReason(String forceRedeploymentReason) {
    this.forceRedeploymentReason = forceRedeploymentReason;
    return this;
  }

   /**
   * forceRedeploymentReason can be used to force the redeployment of the operand by providing a unique string. This provides a mechanism to kick a previously failed deployment and provide a reason why you think it will work this time instead of failing again on the same config.
   * @return forceRedeploymentReason
  **/
  @ApiModelProperty(value = "forceRedeploymentReason can be used to force the redeployment of the operand by providing a unique string. This provides a mechanism to kick a previously failed deployment and provide a reason why you think it will work this time instead of failing again on the same config.")
  public String getForceRedeploymentReason() {
    return forceRedeploymentReason;
  }

  public void setForceRedeploymentReason(String forceRedeploymentReason) {
    this.forceRedeploymentReason = forceRedeploymentReason;
  }

  public IoOpenshiftOperatorV1KubeSchedulerSpec logLevel(String logLevel) {
    this.logLevel = logLevel;
    return this;
  }

   /**
   * logLevel is an intent based logging for an overall component.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for their operands.
   * @return logLevel
  **/
  @ApiModelProperty(value = "logLevel is an intent based logging for an overall component.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for their operands.")
  public String getLogLevel() {
    return logLevel;
  }

  public void setLogLevel(String logLevel) {
    this.logLevel = logLevel;
  }

  public IoOpenshiftOperatorV1KubeSchedulerSpec managementState(String managementState) {
    this.managementState = managementState;
    return this;
  }

   /**
   * managementState indicates whether and how the operator should manage the component
   * @return managementState
  **/
  @ApiModelProperty(value = "managementState indicates whether and how the operator should manage the component")
  public String getManagementState() {
    return managementState;
  }

  public void setManagementState(String managementState) {
    this.managementState = managementState;
  }

  public IoOpenshiftOperatorV1KubeSchedulerSpec observedConfig(Object observedConfig) {
    this.observedConfig = observedConfig;
    return this;
  }

   /**
   * observedConfig holds a sparse config that controller has observed from the cluster state.  It exists in spec because it is an input to the level for the operator
   * @return observedConfig
  **/
  @ApiModelProperty(value = "observedConfig holds a sparse config that controller has observed from the cluster state.  It exists in spec because it is an input to the level for the operator")
  public Object getObservedConfig() {
    return observedConfig;
  }

  public void setObservedConfig(Object observedConfig) {
    this.observedConfig = observedConfig;
  }

  public IoOpenshiftOperatorV1KubeSchedulerSpec operatorLogLevel(String operatorLogLevel) {
    this.operatorLogLevel = operatorLogLevel;
    return this;
  }

   /**
   * operatorLogLevel is an intent based logging for the operator itself.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for themselves.
   * @return operatorLogLevel
  **/
  @ApiModelProperty(value = "operatorLogLevel is an intent based logging for the operator itself.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for themselves.")
  public String getOperatorLogLevel() {
    return operatorLogLevel;
  }

  public void setOperatorLogLevel(String operatorLogLevel) {
    this.operatorLogLevel = operatorLogLevel;
  }

  public IoOpenshiftOperatorV1KubeSchedulerSpec succeededRevisionLimit(Integer succeededRevisionLimit) {
    this.succeededRevisionLimit = succeededRevisionLimit;
    return this;
  }

   /**
   * succeededRevisionLimit is the number of successful static pod installer revisions to keep on disk and in the api -1 &#x3D; unlimited, 0 or unset &#x3D; 5 (default)
   * @return succeededRevisionLimit
  **/
  @ApiModelProperty(value = "succeededRevisionLimit is the number of successful static pod installer revisions to keep on disk and in the api -1 = unlimited, 0 or unset = 5 (default)")
  public Integer getSucceededRevisionLimit() {
    return succeededRevisionLimit;
  }

  public void setSucceededRevisionLimit(Integer succeededRevisionLimit) {
    this.succeededRevisionLimit = succeededRevisionLimit;
  }

  public IoOpenshiftOperatorV1KubeSchedulerSpec unsupportedConfigOverrides(Object unsupportedConfigOverrides) {
    this.unsupportedConfigOverrides = unsupportedConfigOverrides;
    return this;
  }

   /**
   * unsupportedConfigOverrides holds a sparse config that will override any previously set options.  It only needs to be the fields to override it will end up overlaying in the following order: 1. hardcoded defaults 2. observedConfig 3. unsupportedConfigOverrides
   * @return unsupportedConfigOverrides
  **/
  @ApiModelProperty(value = "unsupportedConfigOverrides holds a sparse config that will override any previously set options.  It only needs to be the fields to override it will end up overlaying in the following order: 1. hardcoded defaults 2. observedConfig 3. unsupportedConfigOverrides")
  public Object getUnsupportedConfigOverrides() {
    return unsupportedConfigOverrides;
  }

  public void setUnsupportedConfigOverrides(Object unsupportedConfigOverrides) {
    this.unsupportedConfigOverrides = unsupportedConfigOverrides;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IoOpenshiftOperatorV1KubeSchedulerSpec ioOpenshiftOperatorV1KubeSchedulerSpec = (IoOpenshiftOperatorV1KubeSchedulerSpec) o;
    return Objects.equals(this.failedRevisionLimit, ioOpenshiftOperatorV1KubeSchedulerSpec.failedRevisionLimit) &&
        Objects.equals(this.forceRedeploymentReason, ioOpenshiftOperatorV1KubeSchedulerSpec.forceRedeploymentReason) &&
        Objects.equals(this.logLevel, ioOpenshiftOperatorV1KubeSchedulerSpec.logLevel) &&
        Objects.equals(this.managementState, ioOpenshiftOperatorV1KubeSchedulerSpec.managementState) &&
        Objects.equals(this.observedConfig, ioOpenshiftOperatorV1KubeSchedulerSpec.observedConfig) &&
        Objects.equals(this.operatorLogLevel, ioOpenshiftOperatorV1KubeSchedulerSpec.operatorLogLevel) &&
        Objects.equals(this.succeededRevisionLimit, ioOpenshiftOperatorV1KubeSchedulerSpec.succeededRevisionLimit) &&
        Objects.equals(this.unsupportedConfigOverrides, ioOpenshiftOperatorV1KubeSchedulerSpec.unsupportedConfigOverrides);
  }

  @Override
  public int hashCode() {
    return Objects.hash(failedRevisionLimit, forceRedeploymentReason, logLevel, managementState, observedConfig, operatorLogLevel, succeededRevisionLimit, unsupportedConfigOverrides);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IoOpenshiftOperatorV1KubeSchedulerSpec {\n");
    
    sb.append("    failedRevisionLimit: ").append(toIndentedString(failedRevisionLimit)).append("\n");
    sb.append("    forceRedeploymentReason: ").append(toIndentedString(forceRedeploymentReason)).append("\n");
    sb.append("    logLevel: ").append(toIndentedString(logLevel)).append("\n");
    sb.append("    managementState: ").append(toIndentedString(managementState)).append("\n");
    sb.append("    observedConfig: ").append(toIndentedString(observedConfig)).append("\n");
    sb.append("    operatorLogLevel: ").append(toIndentedString(operatorLogLevel)).append("\n");
    sb.append("    succeededRevisionLimit: ").append(toIndentedString(succeededRevisionLimit)).append("\n");
    sb.append("    unsupportedConfigOverrides: ").append(toIndentedString(unsupportedConfigOverrides)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

