/*
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package open_cluster_management.io;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * RepositoryDigestMirrors holds cluster-wide information about how to handle mirros in the registries config. Note: the mirrors only work when pulling the images that are referenced by their digests.
 */
@ApiModel(description = "RepositoryDigestMirrors holds cluster-wide information about how to handle mirros in the registries config. Note: the mirrors only work when pulling the images that are referenced by their digests.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-05-18T17:27:50.678+03:00")
public class IoOpenshiftOperatorV1alpha1ImageContentSourcePolicySpecRepositoryDigestMirrors {
  @SerializedName("mirrors")
  private List<String> mirrors = null;

  @SerializedName("source")
  private String source = null;

  public IoOpenshiftOperatorV1alpha1ImageContentSourcePolicySpecRepositoryDigestMirrors mirrors(List<String> mirrors) {
    this.mirrors = mirrors;
    return this;
  }

  public IoOpenshiftOperatorV1alpha1ImageContentSourcePolicySpecRepositoryDigestMirrors addMirrorsItem(String mirrorsItem) {
    if (this.mirrors == null) {
      this.mirrors = new ArrayList<>();
    }
    this.mirrors.add(mirrorsItem);
    return this;
  }

   /**
   * mirrors is one or more repositories that may also contain the same images. The order of mirrors in this list is treated as the user&#39;s desired priority, while source is by default considered lower priority than all mirrors. Other cluster configuration, including (but not limited to) other repositoryDigestMirrors objects, may impact the exact order mirrors are contacted in, or some mirrors may be contacted in parallel, so this should be considered a preference rather than a guarantee of ordering.
   * @return mirrors
  **/
  @ApiModelProperty(value = "mirrors is one or more repositories that may also contain the same images. The order of mirrors in this list is treated as the user's desired priority, while source is by default considered lower priority than all mirrors. Other cluster configuration, including (but not limited to) other repositoryDigestMirrors objects, may impact the exact order mirrors are contacted in, or some mirrors may be contacted in parallel, so this should be considered a preference rather than a guarantee of ordering.")
  public List<String> getMirrors() {
    return mirrors;
  }

  public void setMirrors(List<String> mirrors) {
    this.mirrors = mirrors;
  }

  public IoOpenshiftOperatorV1alpha1ImageContentSourcePolicySpecRepositoryDigestMirrors source(String source) {
    this.source = source;
    return this;
  }

   /**
   * source is the repository that users refer to, e.g. in image pull specifications.
   * @return source
  **/
  @ApiModelProperty(required = true, value = "source is the repository that users refer to, e.g. in image pull specifications.")
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IoOpenshiftOperatorV1alpha1ImageContentSourcePolicySpecRepositoryDigestMirrors ioOpenshiftOperatorV1alpha1ImageContentSourcePolicySpecRepositoryDigestMirrors = (IoOpenshiftOperatorV1alpha1ImageContentSourcePolicySpecRepositoryDigestMirrors) o;
    return Objects.equals(this.mirrors, ioOpenshiftOperatorV1alpha1ImageContentSourcePolicySpecRepositoryDigestMirrors.mirrors) &&
        Objects.equals(this.source, ioOpenshiftOperatorV1alpha1ImageContentSourcePolicySpecRepositoryDigestMirrors.source);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mirrors, source);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IoOpenshiftOperatorV1alpha1ImageContentSourcePolicySpecRepositoryDigestMirrors {\n");
    
    sb.append("    mirrors: ").append(toIndentedString(mirrors)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

