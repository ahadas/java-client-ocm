/*
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package open_cluster_management.io;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import open_cluster_management.io.IoK8sApiCoreV1EnvVar;

/**
 * JenkinsPipelineBuildStrategy holds parameters specific to a Jenkins Pipeline build.
 */
@ApiModel(description = "JenkinsPipelineBuildStrategy holds parameters specific to a Jenkins Pipeline build.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-05-18T17:27:50.678+03:00")
public class ComGithubOpenshiftApiBuildV1JenkinsPipelineBuildStrategy {
  @SerializedName("env")
  private List<IoK8sApiCoreV1EnvVar> env = null;

  @SerializedName("jenkinsfile")
  private String jenkinsfile = null;

  @SerializedName("jenkinsfilePath")
  private String jenkinsfilePath = null;

  public ComGithubOpenshiftApiBuildV1JenkinsPipelineBuildStrategy env(List<IoK8sApiCoreV1EnvVar> env) {
    this.env = env;
    return this;
  }

  public ComGithubOpenshiftApiBuildV1JenkinsPipelineBuildStrategy addEnvItem(IoK8sApiCoreV1EnvVar envItem) {
    if (this.env == null) {
      this.env = new ArrayList<>();
    }
    this.env.add(envItem);
    return this;
  }

   /**
   * env contains additional environment variables you want to pass into a build pipeline.
   * @return env
  **/
  @ApiModelProperty(value = "env contains additional environment variables you want to pass into a build pipeline.")
  public List<IoK8sApiCoreV1EnvVar> getEnv() {
    return env;
  }

  public void setEnv(List<IoK8sApiCoreV1EnvVar> env) {
    this.env = env;
  }

  public ComGithubOpenshiftApiBuildV1JenkinsPipelineBuildStrategy jenkinsfile(String jenkinsfile) {
    this.jenkinsfile = jenkinsfile;
    return this;
  }

   /**
   * Jenkinsfile defines the optional raw contents of a Jenkinsfile which defines a Jenkins pipeline build.
   * @return jenkinsfile
  **/
  @ApiModelProperty(value = "Jenkinsfile defines the optional raw contents of a Jenkinsfile which defines a Jenkins pipeline build.")
  public String getJenkinsfile() {
    return jenkinsfile;
  }

  public void setJenkinsfile(String jenkinsfile) {
    this.jenkinsfile = jenkinsfile;
  }

  public ComGithubOpenshiftApiBuildV1JenkinsPipelineBuildStrategy jenkinsfilePath(String jenkinsfilePath) {
    this.jenkinsfilePath = jenkinsfilePath;
    return this;
  }

   /**
   * JenkinsfilePath is the optional path of the Jenkinsfile that will be used to configure the pipeline relative to the root of the context (contextDir). If both JenkinsfilePath &amp; Jenkinsfile are both not specified, this defaults to Jenkinsfile in the root of the specified contextDir.
   * @return jenkinsfilePath
  **/
  @ApiModelProperty(value = "JenkinsfilePath is the optional path of the Jenkinsfile that will be used to configure the pipeline relative to the root of the context (contextDir). If both JenkinsfilePath & Jenkinsfile are both not specified, this defaults to Jenkinsfile in the root of the specified contextDir.")
  public String getJenkinsfilePath() {
    return jenkinsfilePath;
  }

  public void setJenkinsfilePath(String jenkinsfilePath) {
    this.jenkinsfilePath = jenkinsfilePath;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComGithubOpenshiftApiBuildV1JenkinsPipelineBuildStrategy comGithubOpenshiftApiBuildV1JenkinsPipelineBuildStrategy = (ComGithubOpenshiftApiBuildV1JenkinsPipelineBuildStrategy) o;
    return Objects.equals(this.env, comGithubOpenshiftApiBuildV1JenkinsPipelineBuildStrategy.env) &&
        Objects.equals(this.jenkinsfile, comGithubOpenshiftApiBuildV1JenkinsPipelineBuildStrategy.jenkinsfile) &&
        Objects.equals(this.jenkinsfilePath, comGithubOpenshiftApiBuildV1JenkinsPipelineBuildStrategy.jenkinsfilePath);
  }

  @Override
  public int hashCode() {
    return Objects.hash(env, jenkinsfile, jenkinsfilePath);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComGithubOpenshiftApiBuildV1JenkinsPipelineBuildStrategy {\n");
    
    sb.append("    env: ").append(toIndentedString(env)).append("\n");
    sb.append("    jenkinsfile: ").append(toIndentedString(jenkinsfile)).append("\n");
    sb.append("    jenkinsfilePath: ").append(toIndentedString(jenkinsfilePath)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

