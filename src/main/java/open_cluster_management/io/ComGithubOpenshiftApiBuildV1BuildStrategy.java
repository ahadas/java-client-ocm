/*
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package open_cluster_management.io;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import open_cluster_management.io.ComGithubOpenshiftApiBuildV1CustomBuildStrategy;
import open_cluster_management.io.ComGithubOpenshiftApiBuildV1DockerBuildStrategy;
import open_cluster_management.io.ComGithubOpenshiftApiBuildV1JenkinsPipelineBuildStrategy;
import open_cluster_management.io.ComGithubOpenshiftApiBuildV1SourceBuildStrategy;

/**
 * BuildStrategy contains the details of how to perform a build.
 */
@ApiModel(description = "BuildStrategy contains the details of how to perform a build.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-05-18T17:27:50.678+03:00")
public class ComGithubOpenshiftApiBuildV1BuildStrategy {
  @SerializedName("customStrategy")
  private ComGithubOpenshiftApiBuildV1CustomBuildStrategy customStrategy = null;

  @SerializedName("dockerStrategy")
  private ComGithubOpenshiftApiBuildV1DockerBuildStrategy dockerStrategy = null;

  @SerializedName("jenkinsPipelineStrategy")
  private ComGithubOpenshiftApiBuildV1JenkinsPipelineBuildStrategy jenkinsPipelineStrategy = null;

  @SerializedName("sourceStrategy")
  private ComGithubOpenshiftApiBuildV1SourceBuildStrategy sourceStrategy = null;

  @SerializedName("type")
  private String type = null;

  public ComGithubOpenshiftApiBuildV1BuildStrategy customStrategy(ComGithubOpenshiftApiBuildV1CustomBuildStrategy customStrategy) {
    this.customStrategy = customStrategy;
    return this;
  }

   /**
   * customStrategy holds the parameters to the Custom build strategy
   * @return customStrategy
  **/
  @ApiModelProperty(value = "customStrategy holds the parameters to the Custom build strategy")
  public ComGithubOpenshiftApiBuildV1CustomBuildStrategy getCustomStrategy() {
    return customStrategy;
  }

  public void setCustomStrategy(ComGithubOpenshiftApiBuildV1CustomBuildStrategy customStrategy) {
    this.customStrategy = customStrategy;
  }

  public ComGithubOpenshiftApiBuildV1BuildStrategy dockerStrategy(ComGithubOpenshiftApiBuildV1DockerBuildStrategy dockerStrategy) {
    this.dockerStrategy = dockerStrategy;
    return this;
  }

   /**
   * dockerStrategy holds the parameters to the container image build strategy.
   * @return dockerStrategy
  **/
  @ApiModelProperty(value = "dockerStrategy holds the parameters to the container image build strategy.")
  public ComGithubOpenshiftApiBuildV1DockerBuildStrategy getDockerStrategy() {
    return dockerStrategy;
  }

  public void setDockerStrategy(ComGithubOpenshiftApiBuildV1DockerBuildStrategy dockerStrategy) {
    this.dockerStrategy = dockerStrategy;
  }

  public ComGithubOpenshiftApiBuildV1BuildStrategy jenkinsPipelineStrategy(ComGithubOpenshiftApiBuildV1JenkinsPipelineBuildStrategy jenkinsPipelineStrategy) {
    this.jenkinsPipelineStrategy = jenkinsPipelineStrategy;
    return this;
  }

   /**
   * JenkinsPipelineStrategy holds the parameters to the Jenkins Pipeline build strategy.
   * @return jenkinsPipelineStrategy
  **/
  @ApiModelProperty(value = "JenkinsPipelineStrategy holds the parameters to the Jenkins Pipeline build strategy.")
  public ComGithubOpenshiftApiBuildV1JenkinsPipelineBuildStrategy getJenkinsPipelineStrategy() {
    return jenkinsPipelineStrategy;
  }

  public void setJenkinsPipelineStrategy(ComGithubOpenshiftApiBuildV1JenkinsPipelineBuildStrategy jenkinsPipelineStrategy) {
    this.jenkinsPipelineStrategy = jenkinsPipelineStrategy;
  }

  public ComGithubOpenshiftApiBuildV1BuildStrategy sourceStrategy(ComGithubOpenshiftApiBuildV1SourceBuildStrategy sourceStrategy) {
    this.sourceStrategy = sourceStrategy;
    return this;
  }

   /**
   * sourceStrategy holds the parameters to the Source build strategy.
   * @return sourceStrategy
  **/
  @ApiModelProperty(value = "sourceStrategy holds the parameters to the Source build strategy.")
  public ComGithubOpenshiftApiBuildV1SourceBuildStrategy getSourceStrategy() {
    return sourceStrategy;
  }

  public void setSourceStrategy(ComGithubOpenshiftApiBuildV1SourceBuildStrategy sourceStrategy) {
    this.sourceStrategy = sourceStrategy;
  }

  public ComGithubOpenshiftApiBuildV1BuildStrategy type(String type) {
    this.type = type;
    return this;
  }

   /**
   * type is the kind of build strategy.
   * @return type
  **/
  @ApiModelProperty(required = true, value = "type is the kind of build strategy.")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComGithubOpenshiftApiBuildV1BuildStrategy comGithubOpenshiftApiBuildV1BuildStrategy = (ComGithubOpenshiftApiBuildV1BuildStrategy) o;
    return Objects.equals(this.customStrategy, comGithubOpenshiftApiBuildV1BuildStrategy.customStrategy) &&
        Objects.equals(this.dockerStrategy, comGithubOpenshiftApiBuildV1BuildStrategy.dockerStrategy) &&
        Objects.equals(this.jenkinsPipelineStrategy, comGithubOpenshiftApiBuildV1BuildStrategy.jenkinsPipelineStrategy) &&
        Objects.equals(this.sourceStrategy, comGithubOpenshiftApiBuildV1BuildStrategy.sourceStrategy) &&
        Objects.equals(this.type, comGithubOpenshiftApiBuildV1BuildStrategy.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customStrategy, dockerStrategy, jenkinsPipelineStrategy, sourceStrategy, type);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComGithubOpenshiftApiBuildV1BuildStrategy {\n");
    
    sb.append("    customStrategy: ").append(toIndentedString(customStrategy)).append("\n");
    sb.append("    dockerStrategy: ").append(toIndentedString(dockerStrategy)).append("\n");
    sb.append("    jenkinsPipelineStrategy: ").append(toIndentedString(jenkinsPipelineStrategy)).append("\n");
    sb.append("    sourceStrategy: ").append(toIndentedString(sourceStrategy)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

