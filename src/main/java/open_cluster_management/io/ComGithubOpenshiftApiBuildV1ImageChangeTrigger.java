/*
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package open_cluster_management.io;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import open_cluster_management.io.IoK8sApiCoreV1ObjectReference;

/**
 * ImageChangeTrigger allows builds to be triggered when an ImageStream changes
 */
@ApiModel(description = "ImageChangeTrigger allows builds to be triggered when an ImageStream changes")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-05-18T17:27:50.678+03:00")
public class ComGithubOpenshiftApiBuildV1ImageChangeTrigger {
  @SerializedName("from")
  private IoK8sApiCoreV1ObjectReference from = null;

  @SerializedName("lastTriggeredImageID")
  private String lastTriggeredImageID = null;

  @SerializedName("paused")
  private Boolean paused = null;

  public ComGithubOpenshiftApiBuildV1ImageChangeTrigger from(IoK8sApiCoreV1ObjectReference from) {
    this.from = from;
    return this;
  }

   /**
   * from is a reference to an ImageStreamTag that will trigger a build when updated It is optional. If no From is specified, the From image from the build strategy will be used. Only one ImageChangeTrigger with an empty From reference is allowed in a build configuration.
   * @return from
  **/
  @ApiModelProperty(value = "from is a reference to an ImageStreamTag that will trigger a build when updated It is optional. If no From is specified, the From image from the build strategy will be used. Only one ImageChangeTrigger with an empty From reference is allowed in a build configuration.")
  public IoK8sApiCoreV1ObjectReference getFrom() {
    return from;
  }

  public void setFrom(IoK8sApiCoreV1ObjectReference from) {
    this.from = from;
  }

  public ComGithubOpenshiftApiBuildV1ImageChangeTrigger lastTriggeredImageID(String lastTriggeredImageID) {
    this.lastTriggeredImageID = lastTriggeredImageID;
    return this;
  }

   /**
   * lastTriggeredImageID is used internally by the ImageChangeController to save last used image ID for build
   * @return lastTriggeredImageID
  **/
  @ApiModelProperty(value = "lastTriggeredImageID is used internally by the ImageChangeController to save last used image ID for build")
  public String getLastTriggeredImageID() {
    return lastTriggeredImageID;
  }

  public void setLastTriggeredImageID(String lastTriggeredImageID) {
    this.lastTriggeredImageID = lastTriggeredImageID;
  }

  public ComGithubOpenshiftApiBuildV1ImageChangeTrigger paused(Boolean paused) {
    this.paused = paused;
    return this;
  }

   /**
   * paused is true if this trigger is temporarily disabled. Optional.
   * @return paused
  **/
  @ApiModelProperty(value = "paused is true if this trigger is temporarily disabled. Optional.")
  public Boolean isPaused() {
    return paused;
  }

  public void setPaused(Boolean paused) {
    this.paused = paused;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComGithubOpenshiftApiBuildV1ImageChangeTrigger comGithubOpenshiftApiBuildV1ImageChangeTrigger = (ComGithubOpenshiftApiBuildV1ImageChangeTrigger) o;
    return Objects.equals(this.from, comGithubOpenshiftApiBuildV1ImageChangeTrigger.from) &&
        Objects.equals(this.lastTriggeredImageID, comGithubOpenshiftApiBuildV1ImageChangeTrigger.lastTriggeredImageID) &&
        Objects.equals(this.paused, comGithubOpenshiftApiBuildV1ImageChangeTrigger.paused);
  }

  @Override
  public int hashCode() {
    return Objects.hash(from, lastTriggeredImageID, paused);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComGithubOpenshiftApiBuildV1ImageChangeTrigger {\n");
    
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    lastTriggeredImageID: ").append(toIndentedString(lastTriggeredImageID)).append("\n");
    sb.append("    paused: ").append(toIndentedString(paused)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

