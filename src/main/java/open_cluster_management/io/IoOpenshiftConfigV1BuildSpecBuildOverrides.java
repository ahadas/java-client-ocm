/*
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package open_cluster_management.io;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import open_cluster_management.io.ComCoreosOperatorsV1alpha1ClusterServiceVersionSpecInstallSpecSpecTemplateSpecTolerations;
import open_cluster_management.io.IoOpenshiftConfigV1BuildSpecBuildDefaultsImageLabels;

/**
 * BuildOverrides controls override settings for builds
 */
@ApiModel(description = "BuildOverrides controls override settings for builds")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-05-18T17:27:50.678+03:00")
public class IoOpenshiftConfigV1BuildSpecBuildOverrides {
  @SerializedName("imageLabels")
  private List<IoOpenshiftConfigV1BuildSpecBuildDefaultsImageLabels> imageLabels = null;

  @SerializedName("nodeSelector")
  private Map<String, String> nodeSelector = null;

  @SerializedName("tolerations")
  private List<ComCoreosOperatorsV1alpha1ClusterServiceVersionSpecInstallSpecSpecTemplateSpecTolerations> tolerations = null;

  public IoOpenshiftConfigV1BuildSpecBuildOverrides imageLabels(List<IoOpenshiftConfigV1BuildSpecBuildDefaultsImageLabels> imageLabels) {
    this.imageLabels = imageLabels;
    return this;
  }

  public IoOpenshiftConfigV1BuildSpecBuildOverrides addImageLabelsItem(IoOpenshiftConfigV1BuildSpecBuildDefaultsImageLabels imageLabelsItem) {
    if (this.imageLabels == null) {
      this.imageLabels = new ArrayList<>();
    }
    this.imageLabels.add(imageLabelsItem);
    return this;
  }

   /**
   * ImageLabels is a list of docker labels that are applied to the resulting image. If user provided a label in their Build/BuildConfig with the same name as one in this list, the user&#39;s label will be overwritten.
   * @return imageLabels
  **/
  @ApiModelProperty(value = "ImageLabels is a list of docker labels that are applied to the resulting image. If user provided a label in their Build/BuildConfig with the same name as one in this list, the user's label will be overwritten.")
  public List<IoOpenshiftConfigV1BuildSpecBuildDefaultsImageLabels> getImageLabels() {
    return imageLabels;
  }

  public void setImageLabels(List<IoOpenshiftConfigV1BuildSpecBuildDefaultsImageLabels> imageLabels) {
    this.imageLabels = imageLabels;
  }

  public IoOpenshiftConfigV1BuildSpecBuildOverrides nodeSelector(Map<String, String> nodeSelector) {
    this.nodeSelector = nodeSelector;
    return this;
  }

  public IoOpenshiftConfigV1BuildSpecBuildOverrides putNodeSelectorItem(String key, String nodeSelectorItem) {
    if (this.nodeSelector == null) {
      this.nodeSelector = new HashMap<>();
    }
    this.nodeSelector.put(key, nodeSelectorItem);
    return this;
  }

   /**
   * NodeSelector is a selector which must be true for the build pod to fit on a node
   * @return nodeSelector
  **/
  @ApiModelProperty(value = "NodeSelector is a selector which must be true for the build pod to fit on a node")
  public Map<String, String> getNodeSelector() {
    return nodeSelector;
  }

  public void setNodeSelector(Map<String, String> nodeSelector) {
    this.nodeSelector = nodeSelector;
  }

  public IoOpenshiftConfigV1BuildSpecBuildOverrides tolerations(List<ComCoreosOperatorsV1alpha1ClusterServiceVersionSpecInstallSpecSpecTemplateSpecTolerations> tolerations) {
    this.tolerations = tolerations;
    return this;
  }

  public IoOpenshiftConfigV1BuildSpecBuildOverrides addTolerationsItem(ComCoreosOperatorsV1alpha1ClusterServiceVersionSpecInstallSpecSpecTemplateSpecTolerations tolerationsItem) {
    if (this.tolerations == null) {
      this.tolerations = new ArrayList<>();
    }
    this.tolerations.add(tolerationsItem);
    return this;
  }

   /**
   * Tolerations is a list of Tolerations that will override any existing tolerations set on a build pod.
   * @return tolerations
  **/
  @ApiModelProperty(value = "Tolerations is a list of Tolerations that will override any existing tolerations set on a build pod.")
  public List<ComCoreosOperatorsV1alpha1ClusterServiceVersionSpecInstallSpecSpecTemplateSpecTolerations> getTolerations() {
    return tolerations;
  }

  public void setTolerations(List<ComCoreosOperatorsV1alpha1ClusterServiceVersionSpecInstallSpecSpecTemplateSpecTolerations> tolerations) {
    this.tolerations = tolerations;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IoOpenshiftConfigV1BuildSpecBuildOverrides ioOpenshiftConfigV1BuildSpecBuildOverrides = (IoOpenshiftConfigV1BuildSpecBuildOverrides) o;
    return Objects.equals(this.imageLabels, ioOpenshiftConfigV1BuildSpecBuildOverrides.imageLabels) &&
        Objects.equals(this.nodeSelector, ioOpenshiftConfigV1BuildSpecBuildOverrides.nodeSelector) &&
        Objects.equals(this.tolerations, ioOpenshiftConfigV1BuildSpecBuildOverrides.tolerations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(imageLabels, nodeSelector, tolerations);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IoOpenshiftConfigV1BuildSpecBuildOverrides {\n");
    
    sb.append("    imageLabels: ").append(toIndentedString(imageLabels)).append("\n");
    sb.append("    nodeSelector: ").append(toIndentedString(nodeSelector)).append("\n");
    sb.append("    tolerations: ").append(toIndentedString(tolerations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

