/*
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package open_cluster_management.io;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import open_cluster_management.io.ComGithubOpenshiftApiBuildV1SourceControlUser;

/**
 * GitSourceRevision is the commit information from a git source for a build
 */
@ApiModel(description = "GitSourceRevision is the commit information from a git source for a build")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-05-18T17:27:50.678+03:00")
public class ComGithubOpenshiftApiBuildV1GitSourceRevision {
  @SerializedName("author")
  private ComGithubOpenshiftApiBuildV1SourceControlUser author = null;

  @SerializedName("commit")
  private String commit = null;

  @SerializedName("committer")
  private ComGithubOpenshiftApiBuildV1SourceControlUser committer = null;

  @SerializedName("message")
  private String message = null;

  public ComGithubOpenshiftApiBuildV1GitSourceRevision author(ComGithubOpenshiftApiBuildV1SourceControlUser author) {
    this.author = author;
    return this;
  }

   /**
   * author is the author of a specific commit
   * @return author
  **/
  @ApiModelProperty(value = "author is the author of a specific commit")
  public ComGithubOpenshiftApiBuildV1SourceControlUser getAuthor() {
    return author;
  }

  public void setAuthor(ComGithubOpenshiftApiBuildV1SourceControlUser author) {
    this.author = author;
  }

  public ComGithubOpenshiftApiBuildV1GitSourceRevision commit(String commit) {
    this.commit = commit;
    return this;
  }

   /**
   * commit is the commit hash identifying a specific commit
   * @return commit
  **/
  @ApiModelProperty(value = "commit is the commit hash identifying a specific commit")
  public String getCommit() {
    return commit;
  }

  public void setCommit(String commit) {
    this.commit = commit;
  }

  public ComGithubOpenshiftApiBuildV1GitSourceRevision committer(ComGithubOpenshiftApiBuildV1SourceControlUser committer) {
    this.committer = committer;
    return this;
  }

   /**
   * committer is the committer of a specific commit
   * @return committer
  **/
  @ApiModelProperty(value = "committer is the committer of a specific commit")
  public ComGithubOpenshiftApiBuildV1SourceControlUser getCommitter() {
    return committer;
  }

  public void setCommitter(ComGithubOpenshiftApiBuildV1SourceControlUser committer) {
    this.committer = committer;
  }

  public ComGithubOpenshiftApiBuildV1GitSourceRevision message(String message) {
    this.message = message;
    return this;
  }

   /**
   * message is the description of a specific commit
   * @return message
  **/
  @ApiModelProperty(value = "message is the description of a specific commit")
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComGithubOpenshiftApiBuildV1GitSourceRevision comGithubOpenshiftApiBuildV1GitSourceRevision = (ComGithubOpenshiftApiBuildV1GitSourceRevision) o;
    return Objects.equals(this.author, comGithubOpenshiftApiBuildV1GitSourceRevision.author) &&
        Objects.equals(this.commit, comGithubOpenshiftApiBuildV1GitSourceRevision.commit) &&
        Objects.equals(this.committer, comGithubOpenshiftApiBuildV1GitSourceRevision.committer) &&
        Objects.equals(this.message, comGithubOpenshiftApiBuildV1GitSourceRevision.message);
  }

  @Override
  public int hashCode() {
    return Objects.hash(author, commit, committer, message);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComGithubOpenshiftApiBuildV1GitSourceRevision {\n");
    
    sb.append("    author: ").append(toIndentedString(author)).append("\n");
    sb.append("    commit: ").append(toIndentedString(commit)).append("\n");
    sb.append("    committer: ").append(toIndentedString(committer)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

