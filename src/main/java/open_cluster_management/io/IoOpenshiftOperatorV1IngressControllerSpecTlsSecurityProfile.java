/*
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package open_cluster_management.io;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * tlsSecurityProfile specifies settings for TLS connections for ingresscontrollers.   If unset, the default is based on the apiservers.config.openshift.io/cluster resource.   Note that when using the Old, Intermediate, and Modern profile types, the effective profile configuration is subject to change between releases. For example, given a specification to use the Intermediate profile deployed on release X.Y.Z, an upgrade to release X.Y.Z+1 may cause a new profile configuration to be applied to the ingress controller, resulting in a rollout.   Note that the minimum TLS version for ingress controllers is 1.1, and the maximum TLS version is 1.2.  An implication of this restriction is that the Modern TLS profile type cannot be used because it requires TLS 1.3.
 */
@ApiModel(description = "tlsSecurityProfile specifies settings for TLS connections for ingresscontrollers.   If unset, the default is based on the apiservers.config.openshift.io/cluster resource.   Note that when using the Old, Intermediate, and Modern profile types, the effective profile configuration is subject to change between releases. For example, given a specification to use the Intermediate profile deployed on release X.Y.Z, an upgrade to release X.Y.Z+1 may cause a new profile configuration to be applied to the ingress controller, resulting in a rollout.   Note that the minimum TLS version for ingress controllers is 1.1, and the maximum TLS version is 1.2.  An implication of this restriction is that the Modern TLS profile type cannot be used because it requires TLS 1.3.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-05-18T17:27:50.678+03:00")
public class IoOpenshiftOperatorV1IngressControllerSpecTlsSecurityProfile {
  @SerializedName("custom")
  private Object custom = null;

  @SerializedName("intermediate")
  private Object intermediate = null;

  @SerializedName("modern")
  private Object modern = null;

  @SerializedName("old")
  private Object old = null;

  @SerializedName("type")
  private String type = null;

  public IoOpenshiftOperatorV1IngressControllerSpecTlsSecurityProfile custom(Object custom) {
    this.custom = custom;
    return this;
  }

   /**
   * custom is a user-defined TLS security profile. Be extremely careful using a custom profile as invalid configurations can be catastrophic. An example custom profile looks like this:     ciphers:     - ECDHE-ECDSA-CHACHA20-POLY1305     - ECDHE-RSA-CHACHA20-POLY1305     - ECDHE-RSA-AES128-GCM-SHA256     - ECDHE-ECDSA-AES128-GCM-SHA256   minTLSVersion: TLSv1.1
   * @return custom
  **/
  @ApiModelProperty(value = "custom is a user-defined TLS security profile. Be extremely careful using a custom profile as invalid configurations can be catastrophic. An example custom profile looks like this:     ciphers:     - ECDHE-ECDSA-CHACHA20-POLY1305     - ECDHE-RSA-CHACHA20-POLY1305     - ECDHE-RSA-AES128-GCM-SHA256     - ECDHE-ECDSA-AES128-GCM-SHA256   minTLSVersion: TLSv1.1")
  public Object getCustom() {
    return custom;
  }

  public void setCustom(Object custom) {
    this.custom = custom;
  }

  public IoOpenshiftOperatorV1IngressControllerSpecTlsSecurityProfile intermediate(Object intermediate) {
    this.intermediate = intermediate;
    return this;
  }

   /**
   * intermediate is a TLS security profile based on:   https://wiki.mozilla.org/Security/Server_Side_TLS#Intermediate_compatibility_.28recommended.29   and looks like this (yaml):     ciphers:     - TLS_AES_128_GCM_SHA256     - TLS_AES_256_GCM_SHA384     - TLS_CHACHA20_POLY1305_SHA256     - ECDHE-ECDSA-AES128-GCM-SHA256     - ECDHE-RSA-AES128-GCM-SHA256     - ECDHE-ECDSA-AES256-GCM-SHA384     - ECDHE-RSA-AES256-GCM-SHA384     - ECDHE-ECDSA-CHACHA20-POLY1305     - ECDHE-RSA-CHACHA20-POLY1305     - DHE-RSA-AES128-GCM-SHA256     - DHE-RSA-AES256-GCM-SHA384   minTLSVersion: TLSv1.2
   * @return intermediate
  **/
  @ApiModelProperty(value = "intermediate is a TLS security profile based on:   https://wiki.mozilla.org/Security/Server_Side_TLS#Intermediate_compatibility_.28recommended.29   and looks like this (yaml):     ciphers:     - TLS_AES_128_GCM_SHA256     - TLS_AES_256_GCM_SHA384     - TLS_CHACHA20_POLY1305_SHA256     - ECDHE-ECDSA-AES128-GCM-SHA256     - ECDHE-RSA-AES128-GCM-SHA256     - ECDHE-ECDSA-AES256-GCM-SHA384     - ECDHE-RSA-AES256-GCM-SHA384     - ECDHE-ECDSA-CHACHA20-POLY1305     - ECDHE-RSA-CHACHA20-POLY1305     - DHE-RSA-AES128-GCM-SHA256     - DHE-RSA-AES256-GCM-SHA384   minTLSVersion: TLSv1.2")
  public Object getIntermediate() {
    return intermediate;
  }

  public void setIntermediate(Object intermediate) {
    this.intermediate = intermediate;
  }

  public IoOpenshiftOperatorV1IngressControllerSpecTlsSecurityProfile modern(Object modern) {
    this.modern = modern;
    return this;
  }

   /**
   * modern is a TLS security profile based on:   https://wiki.mozilla.org/Security/Server_Side_TLS#Modern_compatibility   and looks like this (yaml):     ciphers:     - TLS_AES_128_GCM_SHA256     - TLS_AES_256_GCM_SHA384     - TLS_CHACHA20_POLY1305_SHA256   minTLSVersion: TLSv1.3   NOTE: Currently unsupported.
   * @return modern
  **/
  @ApiModelProperty(value = "modern is a TLS security profile based on:   https://wiki.mozilla.org/Security/Server_Side_TLS#Modern_compatibility   and looks like this (yaml):     ciphers:     - TLS_AES_128_GCM_SHA256     - TLS_AES_256_GCM_SHA384     - TLS_CHACHA20_POLY1305_SHA256   minTLSVersion: TLSv1.3   NOTE: Currently unsupported.")
  public Object getModern() {
    return modern;
  }

  public void setModern(Object modern) {
    this.modern = modern;
  }

  public IoOpenshiftOperatorV1IngressControllerSpecTlsSecurityProfile old(Object old) {
    this.old = old;
    return this;
  }

   /**
   * old is a TLS security profile based on:   https://wiki.mozilla.org/Security/Server_Side_TLS#Old_backward_compatibility   and looks like this (yaml):     ciphers:     - TLS_AES_128_GCM_SHA256     - TLS_AES_256_GCM_SHA384     - TLS_CHACHA20_POLY1305_SHA256     - ECDHE-ECDSA-AES128-GCM-SHA256     - ECDHE-RSA-AES128-GCM-SHA256     - ECDHE-ECDSA-AES256-GCM-SHA384     - ECDHE-RSA-AES256-GCM-SHA384     - ECDHE-ECDSA-CHACHA20-POLY1305     - ECDHE-RSA-CHACHA20-POLY1305     - DHE-RSA-AES128-GCM-SHA256     - DHE-RSA-AES256-GCM-SHA384     - DHE-RSA-CHACHA20-POLY1305     - ECDHE-ECDSA-AES128-SHA256     - ECDHE-RSA-AES128-SHA256     - ECDHE-ECDSA-AES128-SHA     - ECDHE-RSA-AES128-SHA     - ECDHE-ECDSA-AES256-SHA384     - ECDHE-RSA-AES256-SHA384     - ECDHE-ECDSA-AES256-SHA     - ECDHE-RSA-AES256-SHA     - DHE-RSA-AES128-SHA256     - DHE-RSA-AES256-SHA256     - AES128-GCM-SHA256     - AES256-GCM-SHA384     - AES128-SHA256     - AES256-SHA256     - AES128-SHA     - AES256-SHA     - DES-CBC3-SHA   minTLSVersion: TLSv1.0
   * @return old
  **/
  @ApiModelProperty(value = "old is a TLS security profile based on:   https://wiki.mozilla.org/Security/Server_Side_TLS#Old_backward_compatibility   and looks like this (yaml):     ciphers:     - TLS_AES_128_GCM_SHA256     - TLS_AES_256_GCM_SHA384     - TLS_CHACHA20_POLY1305_SHA256     - ECDHE-ECDSA-AES128-GCM-SHA256     - ECDHE-RSA-AES128-GCM-SHA256     - ECDHE-ECDSA-AES256-GCM-SHA384     - ECDHE-RSA-AES256-GCM-SHA384     - ECDHE-ECDSA-CHACHA20-POLY1305     - ECDHE-RSA-CHACHA20-POLY1305     - DHE-RSA-AES128-GCM-SHA256     - DHE-RSA-AES256-GCM-SHA384     - DHE-RSA-CHACHA20-POLY1305     - ECDHE-ECDSA-AES128-SHA256     - ECDHE-RSA-AES128-SHA256     - ECDHE-ECDSA-AES128-SHA     - ECDHE-RSA-AES128-SHA     - ECDHE-ECDSA-AES256-SHA384     - ECDHE-RSA-AES256-SHA384     - ECDHE-ECDSA-AES256-SHA     - ECDHE-RSA-AES256-SHA     - DHE-RSA-AES128-SHA256     - DHE-RSA-AES256-SHA256     - AES128-GCM-SHA256     - AES256-GCM-SHA384     - AES128-SHA256     - AES256-SHA256     - AES128-SHA     - AES256-SHA     - DES-CBC3-SHA   minTLSVersion: TLSv1.0")
  public Object getOld() {
    return old;
  }

  public void setOld(Object old) {
    this.old = old;
  }

  public IoOpenshiftOperatorV1IngressControllerSpecTlsSecurityProfile type(String type) {
    this.type = type;
    return this;
  }

   /**
   * type is one of Old, Intermediate, Modern or Custom. Custom provides the ability to specify individual TLS security profile parameters. Old, Intermediate and Modern are TLS security profiles based on:   https://wiki.mozilla.org/Security/Server_Side_TLS#Recommended_configurations   The profiles are intent based, so they may change over time as new ciphers are developed and existing ciphers are found to be insecure.  Depending on precisely which ciphers are available to a process, the list may be reduced.   Note that the Modern profile is currently not supported because it is not yet well adopted by common software libraries.
   * @return type
  **/
  @ApiModelProperty(value = "type is one of Old, Intermediate, Modern or Custom. Custom provides the ability to specify individual TLS security profile parameters. Old, Intermediate and Modern are TLS security profiles based on:   https://wiki.mozilla.org/Security/Server_Side_TLS#Recommended_configurations   The profiles are intent based, so they may change over time as new ciphers are developed and existing ciphers are found to be insecure.  Depending on precisely which ciphers are available to a process, the list may be reduced.   Note that the Modern profile is currently not supported because it is not yet well adopted by common software libraries.")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IoOpenshiftOperatorV1IngressControllerSpecTlsSecurityProfile ioOpenshiftOperatorV1IngressControllerSpecTlsSecurityProfile = (IoOpenshiftOperatorV1IngressControllerSpecTlsSecurityProfile) o;
    return Objects.equals(this.custom, ioOpenshiftOperatorV1IngressControllerSpecTlsSecurityProfile.custom) &&
        Objects.equals(this.intermediate, ioOpenshiftOperatorV1IngressControllerSpecTlsSecurityProfile.intermediate) &&
        Objects.equals(this.modern, ioOpenshiftOperatorV1IngressControllerSpecTlsSecurityProfile.modern) &&
        Objects.equals(this.old, ioOpenshiftOperatorV1IngressControllerSpecTlsSecurityProfile.old) &&
        Objects.equals(this.type, ioOpenshiftOperatorV1IngressControllerSpecTlsSecurityProfile.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(custom, intermediate, modern, old, type);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IoOpenshiftOperatorV1IngressControllerSpecTlsSecurityProfile {\n");
    
    sb.append("    custom: ").append(toIndentedString(custom)).append("\n");
    sb.append("    intermediate: ").append(toIndentedString(intermediate)).append("\n");
    sb.append("    modern: ").append(toIndentedString(modern)).append("\n");
    sb.append("    old: ").append(toIndentedString(old)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

