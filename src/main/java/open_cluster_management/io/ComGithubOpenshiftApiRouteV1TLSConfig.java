/*
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package open_cluster_management.io;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * TLSConfig defines config used to secure a route and provide termination
 */
@ApiModel(description = "TLSConfig defines config used to secure a route and provide termination")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-05-18T17:27:50.678+03:00")
public class ComGithubOpenshiftApiRouteV1TLSConfig {
  @SerializedName("caCertificate")
  private String caCertificate = null;

  @SerializedName("certificate")
  private String certificate = null;

  @SerializedName("destinationCACertificate")
  private String destinationCACertificate = null;

  @SerializedName("insecureEdgeTerminationPolicy")
  private String insecureEdgeTerminationPolicy = null;

  @SerializedName("key")
  private String key = null;

  @SerializedName("termination")
  private String termination = null;

  public ComGithubOpenshiftApiRouteV1TLSConfig caCertificate(String caCertificate) {
    this.caCertificate = caCertificate;
    return this;
  }

   /**
   * caCertificate provides the cert authority certificate contents
   * @return caCertificate
  **/
  @ApiModelProperty(value = "caCertificate provides the cert authority certificate contents")
  public String getCaCertificate() {
    return caCertificate;
  }

  public void setCaCertificate(String caCertificate) {
    this.caCertificate = caCertificate;
  }

  public ComGithubOpenshiftApiRouteV1TLSConfig certificate(String certificate) {
    this.certificate = certificate;
    return this;
  }

   /**
   * certificate provides certificate contents
   * @return certificate
  **/
  @ApiModelProperty(value = "certificate provides certificate contents")
  public String getCertificate() {
    return certificate;
  }

  public void setCertificate(String certificate) {
    this.certificate = certificate;
  }

  public ComGithubOpenshiftApiRouteV1TLSConfig destinationCACertificate(String destinationCACertificate) {
    this.destinationCACertificate = destinationCACertificate;
    return this;
  }

   /**
   * destinationCACertificate provides the contents of the ca certificate of the final destination.  When using reencrypt termination this file should be provided in order to have routers use it for health checks on the secure connection. If this field is not specified, the router may provide its own destination CA and perform hostname validation using the short service name (service.namespace.svc), which allows infrastructure generated certificates to automatically verify.
   * @return destinationCACertificate
  **/
  @ApiModelProperty(value = "destinationCACertificate provides the contents of the ca certificate of the final destination.  When using reencrypt termination this file should be provided in order to have routers use it for health checks on the secure connection. If this field is not specified, the router may provide its own destination CA and perform hostname validation using the short service name (service.namespace.svc), which allows infrastructure generated certificates to automatically verify.")
  public String getDestinationCACertificate() {
    return destinationCACertificate;
  }

  public void setDestinationCACertificate(String destinationCACertificate) {
    this.destinationCACertificate = destinationCACertificate;
  }

  public ComGithubOpenshiftApiRouteV1TLSConfig insecureEdgeTerminationPolicy(String insecureEdgeTerminationPolicy) {
    this.insecureEdgeTerminationPolicy = insecureEdgeTerminationPolicy;
    return this;
  }

   /**
   * insecureEdgeTerminationPolicy indicates the desired behavior for insecure connections to a route. While each router may make its own decisions on which ports to expose, this is normally port 80.  * Allow - traffic is sent to the server on the insecure port (default) * Disable - no traffic is allowed on the insecure port. * Redirect - clients are redirected to the secure port.
   * @return insecureEdgeTerminationPolicy
  **/
  @ApiModelProperty(value = "insecureEdgeTerminationPolicy indicates the desired behavior for insecure connections to a route. While each router may make its own decisions on which ports to expose, this is normally port 80.  * Allow - traffic is sent to the server on the insecure port (default) * Disable - no traffic is allowed on the insecure port. * Redirect - clients are redirected to the secure port.")
  public String getInsecureEdgeTerminationPolicy() {
    return insecureEdgeTerminationPolicy;
  }

  public void setInsecureEdgeTerminationPolicy(String insecureEdgeTerminationPolicy) {
    this.insecureEdgeTerminationPolicy = insecureEdgeTerminationPolicy;
  }

  public ComGithubOpenshiftApiRouteV1TLSConfig key(String key) {
    this.key = key;
    return this;
  }

   /**
   * key provides key file contents
   * @return key
  **/
  @ApiModelProperty(value = "key provides key file contents")
  public String getKey() {
    return key;
  }

  public void setKey(String key) {
    this.key = key;
  }

  public ComGithubOpenshiftApiRouteV1TLSConfig termination(String termination) {
    this.termination = termination;
    return this;
  }

   /**
   * termination indicates termination type.
   * @return termination
  **/
  @ApiModelProperty(required = true, value = "termination indicates termination type.")
  public String getTermination() {
    return termination;
  }

  public void setTermination(String termination) {
    this.termination = termination;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComGithubOpenshiftApiRouteV1TLSConfig comGithubOpenshiftApiRouteV1TLSConfig = (ComGithubOpenshiftApiRouteV1TLSConfig) o;
    return Objects.equals(this.caCertificate, comGithubOpenshiftApiRouteV1TLSConfig.caCertificate) &&
        Objects.equals(this.certificate, comGithubOpenshiftApiRouteV1TLSConfig.certificate) &&
        Objects.equals(this.destinationCACertificate, comGithubOpenshiftApiRouteV1TLSConfig.destinationCACertificate) &&
        Objects.equals(this.insecureEdgeTerminationPolicy, comGithubOpenshiftApiRouteV1TLSConfig.insecureEdgeTerminationPolicy) &&
        Objects.equals(this.key, comGithubOpenshiftApiRouteV1TLSConfig.key) &&
        Objects.equals(this.termination, comGithubOpenshiftApiRouteV1TLSConfig.termination);
  }

  @Override
  public int hashCode() {
    return Objects.hash(caCertificate, certificate, destinationCACertificate, insecureEdgeTerminationPolicy, key, termination);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComGithubOpenshiftApiRouteV1TLSConfig {\n");
    
    sb.append("    caCertificate: ").append(toIndentedString(caCertificate)).append("\n");
    sb.append("    certificate: ").append(toIndentedString(certificate)).append("\n");
    sb.append("    destinationCACertificate: ").append(toIndentedString(destinationCACertificate)).append("\n");
    sb.append("    insecureEdgeTerminationPolicy: ").append(toIndentedString(insecureEdgeTerminationPolicy)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    termination: ").append(toIndentedString(termination)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

